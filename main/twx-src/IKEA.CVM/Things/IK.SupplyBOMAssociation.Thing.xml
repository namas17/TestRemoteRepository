<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="IK.SupplyBOMAssociation.Thing"
         projectName="IKEA.CVM"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="closePopup">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="connectSupplyObject">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="parts"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectMaterialSubType"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectType"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyPartNumber"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="connectSupplyObject_bck">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="parts"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectMaterialSubType"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectType"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyPartNumber"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="disconnectSupplyObject">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForDisconnect"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="disconnectSupplyObject_bck">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForDisconnect"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterStructure">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="structureData"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterSupplyObjects">
                        <ResultType
                         aspect.dataShape="IK.SupplyObject.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.SupplyObject.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="supplyObjects"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getEndItems">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getObjectTypes">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSelectedRows">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getStructure">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="root"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getStructure_bck">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="root"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSupplyObjects">
                        <ResultType
                         aspect.dataShape="IK.SupplyObject.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="object_type"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="resetStructure">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateSupplyObjectType">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="materialSubType"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectId"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplyObjectType"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="closePopup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " closePopup -> ";
                                        try {
                                        	pause(5000);
                                        	logger.info(FN + "Executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="connectSupplyObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " connectSupplyObject -> ";
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        
                                        try {
                                        	let objectId = supplyObjectId;
                                        	if (parts && parts.getRowCount() > 0) {
                                        		//Validation
                                        		let params = {
                                        			t: parts /* INFOTABLE */ ,
                                        			columns: "type,materialSubType" /* STRING */
                                        		};
                                        		let typeIT = Resources["InfoTableFunctions"].Distinct(params);
                                        		if (typeIT && typeIT.getRowCount() > 1) {
                                        			result = {
                                        				"association": false,
                                        				"first_association": false,
                                        				"type": ""
                                        			};
                                        		} else {
                                        			if ((parts.rows[0].type == "Item Structure") || (supplyObjectType && supplyObjectType != parts.rows[0].type) || (supplyObjectMaterialSubType && supplyObjectMaterialSubType != parts.rows[0].materialSubType)) {
                                        				result = {
                                        					"association": false,
                                        					"first_association": false,
                                        					"type": ""
                                        				};
                                        			} else {
                                        				let isFirstTimeAssociation = false;
                                        				if (!supplyObjectType || supplyObjectType.length == 0) {
                                        					objectId = me.updateSupplyObjectType({
                                        						supplyObjectId: supplyObjectId /* STRING */ ,
                                        						supplyObjectType: parts.rows[0].type /* STRING */ ,
                                        						materialSubType: parts.rows[0].materialSubType
                                        					});
                                        					isFirstTimeAssociation = true;
                                        					for (let i = 0; i < parts.getRowCount(); i++) {
                                        						let row = parts.rows[i];
                                        						if (row.supplyPartNumber) {
                                        							me.disconnectSupplyObject({
                                        								inputForDisconnect: row.supplyPartId + "#_#" + row.supplyPartConfigurableLinkId + "#_#" + row.articleNumber + "#_#" + row.objectId + "#_#" + row.supplyPartNumber /* STRING */
                                        							});
                                        						}
                                        						let childObj = checkChildForSupplyObject();
                                        						let partNumbers = childObj.partNumbers;
                                        						let obj = childObj.obj;
                                        
                                        						if (partNumbers.includes(row.number)) {
                                        							let articleNumber = obj[row.number].articleNumber;
                                        							if (!articleNumber.split(",").includes(row.articleNumber)) {
                                        								let json = {
                                        									"com.ikea.GDArticleID": articleNumber + "," + row.articleNumber
                                        								};
                                        								let link = Things[odataconnectorthing].updateConfigurableRevisionLink({
                                        									PartId: supplyObjectId,
                                        									ConfigurableRevisionLinkId: obj[row.number].configurableRevisionLinkId,
                                        									ConfigurableRevisionLink: json
                                        								});
                                        								addRequirementTrackerDetails(row.objectId);
                                        							}
                                        						} else {
                                        							let json = {
                                        								"com.ikea.GDIRNumber": "IR000001",
                                        								"com.ikea.GDBatchID": "001",
                                        								"com.ikea.GDArticleID": row.articleNumber,
                                        								"com.ikea.GDSupplierDetails": project_number,
                                        								"Child@odata.bind": "Parts('" + row.objectId + "')"
                                        							};
                                        							let link = Things[odataconnectorthing].createConfigurableRevisionLinkDown({
                                        								PartId: objectId,
                                        								ConfigurableRevisionLink: json
                                        							});
                                        							//Adding requirement object tracker details
                                        							addRequirementTrackerDetails(row.objectId);
                                        						}
                                        					}
                                        					result = {
                                        						"association": true,
                                        						"first_association": isFirstTimeAssociation,
                                        						"type": isFirstTimeAssociation ? "You have defined the BOM part type for this supply object as a “" + parts.rows[0].type + "” It is not possible to define another BOM part type to this supply object." : ""
                                        					};
                                        				} else {
                                        					for (let i = 0; i < parts.getRowCount(); i++) {
                                        						let row = parts.rows[i];
                                        						//disconnect supply object if it has already
                                        						if (row.supplyPartNumber) {
                                        							me.disconnectSupplyObject({
                                        								inputForDisconnect: row.supplyPartId + "#_#" + row.supplyPartConfigurableLinkId + "#_#" + row.articleNumber + "#_#" + row.objectId + "#_#" + row.supplyPartNumber /* STRING */
                                        							});
                                        						}
                                        						let childObj = checkChildForSupplyObject();
                                        						let partNumbers = childObj.partNumbers;
                                        						let obj = childObj.obj;
                                        
                                        						if (partNumbers.includes(row.number)) {
                                        							let articleNumber = obj[row.number].articleNumber;
                                        							if (!articleNumber.split(",").includes(row.articleNumber)) {
                                        								let json = {
                                        									"com.ikea.GDArticleID": articleNumber + "," + row.articleNumber
                                        								};
                                        								let link = Things[odataconnectorthing].updateConfigurableRevisionLink({
                                        									PartId: supplyObjectId,
                                        									ConfigurableRevisionLinkId: obj[row.number].configurableRevisionLinkId,
                                        									ConfigurableRevisionLink: json
                                        								});
                                        								addRequirementTrackerDetails(row.objectId);
                                        							}
                                        						} else {
                                        							let json = {
                                        								"com.ikea.GDIRNumber": "IR000001",
                                        								"com.ikea.GDBatchID": "001",
                                        								"com.ikea.GDArticleID": row.articleNumber,
                                        								"com.ikea.GDSupplierDetails": project_number,
                                        								"Child@odata.bind": "Parts('" + row.objectId + "')"
                                        							};
                                        							let link = Things[odataconnectorthing].createConfigurableRevisionLinkDown({
                                        								PartId: objectId,
                                        								ConfigurableRevisionLink: json
                                        							});
                                        							addRequirementTrackerDetails(row.objectId);
                                        						}
                                        					}
                                        					result = {
                                        						"association": true,
                                        						"first_association": false,
                                        						"type": ""
                                        					};
                                        				}
                                        
                                        			}
                                        		}
                                        	}
                                        	logger.info(FN + " Supply object connected for " + parts.getRowCount() + " part(s) with supply object [" + supplyPartNumber + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function addRequirementTrackerDetails(objectId) {
                                        	let traces = Things[odataconnectorthing].getTraces({
                                        		PartId: objectId,
                                        		$select: "Uri"
                                        	});
                                        	let values = traces.value;
                                        	for (let i = 0; i < values.length; i++) {
                                        		let value = values[i];
                                        		let uri = value.Uri;
                                        		let reqId = uri.split("=")[1];
                                        		let date = new Date();
                                        		date.setDate(date.getDate() + 60);
                                        		let date1 = new Date();
                                        
                                        		let deadLine = Things[databaseConnector].getDeadLineDetailForSupplyObject({
                                        			supply_object_id: supplyPartNumber,
                                        			requirement_id: reqId
                                        		});
                                        		if (deadLine.getRowCount() == 0) {
                                        			let addData = Things[databaseConnector].addRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId,
                                        				date_tracking_type: "Compliant in production deadline",
                                        				deadline: date,
                                        				created_timestamp: date1,
                                        				connection_counter: 1
                                        			});
                                        		} else {
                                        			let updateData = Things[databaseConnector].updateRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId,
                                        				connection_counter: deadLine.rows[0].CONNECTION_COUNTER + 1
                                        			});
                                        		}
                                        	}
                                        }
                                        
                                        function checkChildForSupplyObject() {
                                        	let partJson = Things[odataconnectorthing].getParts({
                                        		$filter: "Number eq '" + supplyPartNumber + "'",
                                        		$expand: "ConfigurableRevisionLinkDown($expand=Child($select=Number))" /* STRING {"dataShape":""} */ ,
                                        		$select: "ConfigurableRevisionLinkDown"
                                        	});
                                        	let partNumbers = [];
                                        	let obj = {};
                                        	let supplyParts = partJson.value;
                                        	supplyParts.forEach(supplyPart => {
                                        		let ikeapartjson = supplyPart.ConfigurableRevisionLinkDown;
                                        		for (let n = 0; n < ikeapartjson.length; n++) {
                                        			let ikeapartvalue = ikeapartjson[n];
                                        			let childNumber = ikeapartvalue.Child.Number;
                                        			partNumbers.push(childNumber);
                                        			obj[childNumber] = {};
                                        			obj[childNumber].articleNumber = ikeapartvalue["com.ikea.GDArticleID"];
                                        			obj[childNumber].configurableRevisionLinkId = ikeapartvalue.ID;
                                        		}
                                        	});
                                        	return {
                                        		partNumbers: partNumbers,
                                        		obj: obj
                                        	};
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="connectSupplyObject_bck">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " connectSupplyObject_bck -> ";
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        
                                        try {
                                        	let objectId = supplyObjectId;
                                        	if (parts && parts.getRowCount() > 0) {
                                        		//Validation
                                        		let params = {
                                        			t: parts /* INFOTABLE */ ,
                                        			columns: "type,materialSubType" /* STRING */
                                        		};
                                        		let typeIT = Resources["InfoTableFunctions"].Distinct(params);
                                        		if (typeIT && typeIT.getRowCount() > 1) {
                                        			result = {
                                        				"association": false,
                                        				"first_association": false,
                                        				"type": ""
                                        			};
                                        		} else {
                                        			if ((parts.rows[0].type == "Item Structure") || (supplyObjectType && supplyObjectType != parts.rows[0].type) || (supplyObjectMaterialSubType && supplyObjectMaterialSubType != parts.rows[0].materialSubType)) {
                                        				result = {
                                        					"association": false,
                                        					"first_association": false,
                                        					"type": ""
                                        				};
                                        			} else {
                                        				let partTraces = getPartsTraces();
                                        				let isFirstTimeAssociation = false;
                                        				if (!supplyObjectType || supplyObjectType.length == 0) {
                                        					isFirstTimeAssociation = true;
                                        					objectId = me.updateSupplyObjectType({
                                        						supplyObjectId: supplyObjectId /* STRING */ ,
                                        						supplyObjectType: parts.rows[0].type /* STRING */ ,
                                        						materialSubType: parts.rows[0].materialSubType
                                        					});
                                        				}
                                        
                                        				for (let i = 0; i < parts.getRowCount(); i++) {
                                        					let row = parts.rows[i];
                                        					if (row.supplyPartNumber) {
                                        
                                        						me.disconnectSupplyObject_bck({
                                        							inputForDisconnect: row.supplyPartId + "#_#" + row.supplyPartConfigurableLinkId + "#_#" + row.objectId + "#_#" + row.number + "#_#" + row.supplyPartNumber + "#_#" + row.hierarchy /* STRING */ ,
                                        							project_number: project_number
                                        						});
                                        					}
                                        					// check if the objects are already connected
                                        					let associations = Things[databaseConnector].getSupplyBOMAssociationByPartAndSupplyObject({
                                        						part_number: row.number,
                                        						supply_object_number: supplyPartNumber,
                                        						supplier_number: project_number
                                        					});
                                        
                                        					if (!associations || associations.getRowCount() == 0) {
                                        						// create link in windchill
                                        						let json = {
                                        							"com.ikea.GDSupplierDetails": project_number,
                                        							"Child@odata.bind": "Parts('" + row.objectId + "')"
                                        						};
                                        						let link = Things[odataconnectorthing].createConfigurableRevisionLinkDown({
                                        							PartId: objectId,
                                        							ConfigurableRevisionLink: json
                                        						});
                                        					}
                                        					let traces = partTraces[row.number];
                                        					let tracesStr = traces.join(",");
                                        					// Add supply bom association table
                                        					let association = Things[databaseConnector].addSupplyBOMAssociation({
                                        						supply_object_number: supplyPartNumber,
                                        						part_number: row.number,
                                        						hierarchy: row.hierarchy,
                                        						article_number: row.articleNumber,
                                        						supplier_number: project_number,
                                        						created_timestamp: new Date(),
                                        						traces: tracesStr
                                        					});
                                        					addRequirementTrackerDetails(traces);
                                        					result = {
                                        						"association": true,
                                        						"first_association": isFirstTimeAssociation,
                                        						"type": isFirstTimeAssociation ? "You have defined the BOM part type for this supply object as a “" + parts.rows[0].type + "” It is not possible to define another BOM part type to this supply object." : ""
                                        					};
                                        				}
                                        			}
                                        		}
                                        	}
                                        	logger.info(FN + " Supply object connected for " + parts.getRowCount() + " part(s) with supply object [" + supplyPartNumber + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function getPartsTraces() {
                                        	let partTraces = {};
                                        	let filterParts = "";
                                        	let SEP = ",";
                                        	for (let i = 0; i < parts.getRowCount(); i++) {
                                        		let value = parts[i];
                                        		filterParts += value.number + SEP;
                                        	}
                                        	if (filterParts.length > 0) {
                                        		filterParts = filterParts.substring(0, filterParts.length - SEP.length);
                                        	}
                                        	let partsJson = Things[odataconnectorthing].getPostParts({
                                        		numbers: filterParts,
                                        		$expand: "Traces($select=Uri)",
                                        		$select: "Number"
                                        	});
                                        	let values = partsJson.value;
                                        	for (let i = 0; i < values.length; i++) {
                                        		let value = values[i];
                                        		let traces = value.Traces;
                                        		let tracesArr = [];
                                        		for (let i = 0; i < traces.length; i++) {            
                                        			let uri = traces[i].Uri;
                                        			let reqId = uri.split("=")[1];
                                        			tracesArr.push(reqId);
                                        		}
                                        		partTraces[value.Number] = tracesArr;
                                        	}
                                        	return partTraces;
                                        }
                                        
                                        function addRequirementTrackerDetails(traces) {
                                        	for (let i = 0; i < traces.length; i++) {		
                                        		let reqId = traces[i];
                                        		let date = new Date();
                                        		date.setDate(date.getDate() + 60);
                                        		let date1 = new Date();
                                        
                                        		let deadLine = Things[databaseConnector].getDeadLineDetailForSupplyObject({
                                        			supply_object_id: supplyPartNumber,
                                        			requirement_id: reqId
                                        		});
                                        		if (deadLine.getRowCount() == 0) {
                                        			let addData = Things[databaseConnector].addRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId,
                                        				date_tracking_type: "Compliant in production deadline",
                                        				deadline: date,
                                        				created_timestamp: date1,
                                        				connection_counter: 1
                                        			});
                                        		} else {
                                        			let updateData = Things[databaseConnector].updateRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId,
                                        				connection_counter: deadLine.rows[0].CONNECTION_COUNTER + 1
                                        			});
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="disconnectSupplyObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " disconnectSupplyObject -> ";
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        try {
                                        	let input = inputForDisconnect.split("#_#");
                                        	let supplyPartId = input[0];
                                        	let linkId = input[1];
                                        	let articleId = input[2];
                                        	let ikeaObjectId = input[3];
                                        	let supplyPartNumber = input[4];
                                        
                                        	let configurableLinkJson = Things[odataconnectorthing].getConfigurableRevisionLinkDown({
                                        		PartId: supplyPartId,
                                        	});
                                        	let links = configurableLinkJson.value;
                                        	let obj;
                                        	for (let i = 0; i < links.length; i++) {
                                        		let row = links[i];
                                        		if (row.ID == linkId) {
                                        			obj = row;
                                        			break;
                                        		}
                                        	}
                                        	let articleIds = obj["com.ikea.GDArticleID"].split(",");
                                        	if (articleIds.length > 1) {
                                        		let index = articleIds.indexOf(articleId);
                                        		articleIds.splice(index, 1);
                                        		let articleNumber = articleIds.join(",");
                                        		let json = {
                                        			"com.ikea.GDArticleID": articleNumber
                                        		};
                                        		let link = Things[odataconnectorthing].updateConfigurableRevisionLink({
                                        			PartId: supplyPartId,
                                        			ConfigurableRevisionLinkId: linkId,
                                        			ConfigurableRevisionLink: json
                                        		});
                                        		deleteRequirementObjectTracker(ikeaObjectId, supplyPartNumber);
                                        
                                        	} else {
                                        		let json = Things[odataconnectorthing].deleteConfigurableRevisionLinkDown({
                                        			PartId: supplyPartId,
                                        			ConfigurableRevisionLinkId: linkId
                                        		});
                                        		deleteRequirementObjectTracker(ikeaObjectId, supplyPartNumber);
                                        	}
                                        
                                        	logger.info(FN + "supply object disconnected for article [" + articleId + "]  Supply object [" + supplyPartNumber + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function deleteRequirementObjectTracker(ikeaObjectId, supplyPartNumber) {
                                        	let traces = Things[odataconnectorthing].getTraces({
                                        		PartId: ikeaObjectId,
                                        		$select: "Uri"
                                        	});
                                        	let values = traces.value;
                                        	for (let i = 0; i < values.length; i++) {
                                        		let value = values[i];
                                        		let uri = value.Uri;
                                        		let reqId = uri.split("=")[1];
                                        
                                        		let deadLine = Things[databaseConnector].getDeadLineDetailForSupplyObject({
                                        			supply_object_id: supplyPartNumber,
                                        			requirement_id: reqId
                                        		});
                                        		if (deadLine.rows[0].CONNECTION_COUNTER == 1) {
                                        			let deleteData = Things[databaseConnector].deleteRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId
                                        			});
                                        		} else {
                                        			let updateData = Things[databaseConnector].updateRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId,
                                        				connection_counter: deadLine.rows[0].CONNECTION_COUNTER - 1
                                        			});
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="disconnectSupplyObject_bck">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " disconnectSupplyObject -> ";
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        try {
                                        	let input = inputForDisconnect.split("#_#");
                                        	let supplyPartId = input[0];
                                        	let linkId = input[1];
                                        	let ikeaObjectId = input[2];
                                        	let ikeaPartNumber = input[3];
                                        	let supplyPartNumber = input[4];
                                        	let hierarchy = input[5];
                                        
                                        	let deleteLink = Things[databaseConnector].deleteSupplyBOMAssociationByHierarchyAndSupplyObject({
                                        		supply_object_number: supplyPartNumber,
                                        		hierarchy: hierarchy,
                                        		supplier_number: project_number
                                        	});
                                        	let links = Things[databaseConnector].getSupplyBOMAssociationByPartAndSupplyObject({
                                        		supply_object_number: supplyPartNumber,
                                        		part_number: ikeaPartNumber,
                                        		supplier_number: project_number
                                        	});
                                        	if (!links || links.getRowCount() == 0) {
                                        		let json = Things[odataconnectorthing].deleteConfigurableRevisionLinkDown({
                                        			PartId: supplyPartId,
                                        			ConfigurableRevisionLinkId: linkId
                                        		});
                                        	}
                                        	deleteRequirementObjectTracker(ikeaObjectId, supplyPartNumber);
                                        	logger.info(FN + "supply object disconnected for [" + supplyPartNumber + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function deleteRequirementObjectTracker(ikeaObjectId, supplyPartNumber) {
                                        	let traces = Things[odataconnectorthing].getTraces({
                                        		PartId: ikeaObjectId,
                                        		$select: "Uri"
                                        	});
                                        	let values = traces.value;
                                        	for (let i = 0; i < values.length; i++) {
                                        		let value = values[i];
                                        		let uri = value.Uri;
                                        		let reqId = uri.split("=")[1];
                                        
                                        		let deadLine = Things[databaseConnector].getDeadLineDetailForSupplyObject({
                                        			supply_object_id: supplyPartNumber,
                                        			requirement_id: reqId
                                        		});
                                        		if (deadLine.rows[0].CONNECTION_COUNTER == 1) {
                                        			let deleteData = Things[databaseConnector].deleteRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId
                                        			});
                                        		} else {
                                        			let updateData = Things[databaseConnector].updateRequirementObjectTrackerDetails({
                                        				supply_object_id: supplyPartNumber,
                                        				requirement_id: reqId,
                                        				connection_counter: deadLine.rows[0].CONNECTION_COUNTER - 1
                                        			});
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterStructure">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterStructure -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        
                                        try {
                                        	if (structureData && searchText) {
                                        		for (let i = 0; i < structureData.getRowCount(); i++) {
                                        			let row = structureData.rows[i];
                                        			if (row.name.toUpperCase().includes(searchText.toUpperCase()) || row.number.toUpperCase().includes(searchText.toUpperCase()) || (row.supplyPartName && row.supplyPartName.toUpperCase().includes(searchText.toUpperCase())) || (row.supplyPartNumber && row.supplyPartNumber.toUpperCase().includes(searchText.toUpperCase()))) {
                                        				row.parentId = "";
                                        				row.hasChildren = false;
                                        				result.AddRow(row);
                                        			}
                                        		}
                                        	} else {
                                        		result = structureData;
                                        	}
                                        
                                        	logger.info(FN + "Structure filtered for [" + searchText + "]. Result :" + result.getRowCount());
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterSupplyObjects">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterSupplyObjects -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.SupplyObject.DataShape"
                                        });
                                        
                                        try {
                                        	let query = {
                                        		"filters": {
                                        			"filters": [{
                                        				"type": "LIKE",
                                        				"fieldName": "name",
                                        				"value": "%" + searchText + "%"
                                        			}, {
                                        				"type": "LIKE",
                                        				"fieldName": "supply_object_id",
                                        				"value": "%" + searchText + "%"
                                        			}],
                                        			"type": "OR"
                                        		}
                                        	};
                                        	params = {
                                        		t: supplyObjects /* INFOTABLE */ ,
                                        		query: query /* QUERY */
                                        	};
                                        	result = Resources["InfoTableFunctions"].Query(params);
                                        
                                        	logger.info(FN + "Supply objects filtered for [" + searchText + "].");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getEndItems">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getEndItems -> ";
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(GenericStringList)
                                        let part_number = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredDataShape"
                                        });
                                        
                                        try {
                                        	let projectNumber = project_number.replace("_", "/");
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	var number = Things[databaseConnector].getIRUsingSupplierId({
                                        		project_number: projectNumber
                                        	});
                                        	partNumber = " ";
                                        	for (let i = 0; i < number.getRowCount(); i++) {
                                        		partNumber += "Number eq '" + number[i].PRODUCTNUMBER + "'";
                                        		if (i < number.getRowCount() - 1) {
                                        			partNumber += " or ";
                                        		}
                                        	}
                                        
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	var json = Things[odataconnectorthing].getParts({
                                        		$filter: partNumber,
                                        		$select: "Name,Number,ID"
                                        	});
                                        
                                        	if (json !== undefined && json.value !== undefined) {
                                        		var items = json.value;
                                        		for (var i = 0; i < items.length; i++) {
                                        			var item = items[i];
                                        			// IK.PTC.Resource.App.StructuredDataShape entry object
                                        			var newEntry = new Object();
                                        			newEntry.type = undefined; // STRING
                                        			newEntry.version = undefined; // STRING
                                        			newEntry.parentId = undefined; // STRING
                                        			newEntry.defaultUnit = undefined; // STRING
                                        			newEntry.number = item.Number; // STRING
                                        			newEntry.view = undefined; // STRING
                                        			newEntry.name = item.Number + " - " + item.Name; // STRING
                                        			newEntry.objectId = item.ID; // STRING
                                        			newEntry.usesOccurrenceIdentifier = undefined; // STRING
                                        			newEntry.cost = undefined; // NUMBER
                                        			newEntry.quantityInStock = undefined; // INTEGER
                                        			newEntry.treeId = undefined; // STRING
                                        			newEntry.hasChildren = undefined; // BOOLEAN
                                        			newEntry.navigationSessionId = undefined; // STRING
                                        			newEntry.LastModified = undefined; // DATETIME
                                        			newEntry.state = undefined; // STRING
                                        			newEntry.objectIcon = undefined; // IMAGELINK
                                        			result.AddRow(newEntry);
                                        		}
                                        		logger.info(FN + "Articles fetched successfully for [" + project_number + "]");
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getObjectTypes">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getObjectTypes -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	result.AddRow({
                                        		item: "Trade good"
                                        	});
                                        	logger.info(FN + "Executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSelectedRows">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSelectedRows -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        
                                        try {
                                        	if (data) {
                                        		let query = {
                                        			"filters": {
                                        				"type": "EQ",
                                        				"fieldName": "isSelected",
                                        				"value": true
                                        			}
                                        		};
                                        		params = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        
                                        	}
                                        	logger.info(FN + "Selected rows count - " + result.getRowCount());
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getStructure">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getStructure -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        
                                        try {
                                        	let articles = "";
                                        	if (root && root.getRowCount() > 0) {
                                        		for (let i = 0; i < root.getRowCount(); i++) {
                                        			var newRootEntry = root.rows[i];
                                        			var rootOid = root.rows[i].objectId;
                                        			var rootNumber = root.rows[i].number;
                                        			articles = articles + "," + rootNumber;
                                        			var rootName = root.rows[i].name;
                                        			var verObjMapping = {};
                                        			var odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        			const expandPart = "Part($select=ObjectType,ID,TypeIcon,Version,VersionID,DefaultUnit,MaterialClassification/ClfNodeHierarchyDisplayName;$expand=ConfigurableRevisionLinkUp($expand=Parent($select=Name,Number,ID,TypeIcon,Version,VersionID,ObjectType)))";
                                        			const selectComponents = "PartId,PartName,PartNumber,PVTreeId,PVParentTreeId";
                                        			const partUse = "";
                                        			const exp = expandPart + ",Components($select=" + selectComponents + ";$expand=" + expandPart + partUse + ";$levels=max)";
                                        			let structure = Things[odataconnectorthing].getPartStructure({
                                        				$expand: exp /* STRING {"dataShape":""} */ ,
                                        				ID: rootOid /* STRING [Required] {"dataShape":""} */ ,
                                        				NavigationCriteria: {} /* STRING {"dataShape":""} */ ,
                                        				$select: selectComponents /* STRING {"dataShape":""} */
                                        			});
                                        			let hierarchy = "";
                                        			if (structure) {
                                        				fillDataRecursively(structure, rootNumber, rootName, hierarchy);
                                        			}
                                        		}
                                        	}
                                        	logger.info(FN + "service executed for [" + articles + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function fillDataRecursively(jsonInput, rootNumber, rootName, hierarchy) {
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + jsonInput.PartNumber : jsonInput.PartNumber;
                                        	const jsonPart = jsonInput.Part;
                                        	const innerComponents = jsonInput.Components;
                                        	// PTC.Resource.App.StructuredDataShape entry object
                                        	let newEntry = new Object();
                                        	newEntry.articleName = rootName;
                                        	newEntry.articleNumber = rootNumber;
                                        	newEntry.type = jsonPart.ObjectType;
                                        	newEntry.hierarchy = hierarchy;
                                        	let material_subtype = "";
                                        	if (jsonPart.MaterialClassification) {
                                        		let materialHierarchy = jsonPart.MaterialClassification.ClfNodeHierarchyDisplayName.split(" > ");
                                        		material_subtype = materialHierarchy[materialHierarchy.length - 1];
                                        	}
                                        	newEntry.materialSubType = material_subtype;
                                        	let icon;
                                        	if (newEntry.type == "IKEA Part") {
                                        		icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.PartIcon.Media')\">";
                                        	} else if (newEntry.type == "Material") {
                                        		icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.MaterialIcon.Media')\">";
                                        	} else if (newEntry.type == "Appearance") {
                                        		icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.AppearanceIcon.Media')\">";
                                        	}
                                        	newEntry.parentId = jsonInput.PVParentTreeId ? jsonInput.PVParentTreeId.replace("/", rootNumber) : jsonInput.PVParentTreeId;
                                        	newEntry.number = jsonInput.PartNumber;
                                        	newEntry.name = jsonInput.PartName;
                                        	newEntry.objectId = jsonPart.ID;
                                        	newEntry.hasChildren = innerComponents !== undefined && innerComponents.length > 0;
                                        	if (rootNumber == jsonInput.PartNumber) {
                                        		newEntry.objectHTML = "<b style=\"padding-left:7px;\">" + newEntry.number + "  -  " + newEntry.name + "</b>";
                                        	} else {
                                        		newEntry.objectHTML = icon + newEntry.number + "  -  " + newEntry.name;
                                        	}
                                        	newEntry.treeId = jsonInput.PVTreeId ? jsonInput.PVTreeId.replace("/", rootNumber) : jsonInput.PVTreeId;
                                        	newEntry.supplyPart = false;
                                        	newEntry.isSelected = false;
                                        	for (let i = 0; i < jsonPart.ConfigurableRevisionLinkUp.length; i++) {
                                        		var obj = jsonPart.ConfigurableRevisionLinkUp[i];
                                        		if (obj) {
                                        			let linkArticleIds = obj["com.ikea.GDArticleID"].split(",");
                                        			if (linkArticleIds.includes(rootNumber) && obj["com.ikea.GDSupplierDetails"] == project_number) {
                                        				newEntry.supplyPartObjectId = obj.Parent.ID;
                                        				newEntry.supplyPartId = obj.Parent.ID;
                                        				newEntry.supplyPartConfigurableLinkId = obj.ID;
                                        				newEntry.supplyPartName = obj.Parent.Name;
                                        				newEntry.supplyPartNumber = obj.Parent.Number;
                                        				let supplyIcon;
                                        				if (newEntry.type == "IKEA Part") {
                                        					supplyIcon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.PartIconBlue.Media')\">";
                                        				} else if (newEntry.type == "Material") {
                                        					supplyIcon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.MaterialIconBlue.Media')\">";
                                        				} else if (newEntry.type == "Appearance") {
                                        					supplyIcon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.AppearanceIconBlue.Media')\">";
                                        				}
                                        				if (rootNumber == newEntry.number) {
                                        					newEntry.objectHTML = "<p style=\"color: #0058A3; display: inline-block;\"><b>" + newEntry.supplyPartNumber + "  -  " + newEntry.supplyPartName + "</b></p><img style=\"cursor: pointer; vertical-align:middle; height:20px; width:20px; padding-left:5px;\" src='/Thingworx/MediaEntities/IKEA.Crosscloseicon' onclick=\"disconnectSupplyObject('" + newEntry.supplyPartObjectId + "#_#" + newEntry.supplyPartConfigurableLinkId + "#_#" + rootNumber + "#_#" + newEntry.objectId + "#_#" + newEntry.supplyPartNumber + "')\">"; // STRING  
                                        				} else {
                                        					newEntry.objectHTML = supplyIcon + "<p style=\"color: #0058A3; display: inline-block;\"><b>" + newEntry.supplyPartNumber + "  -  " + newEntry.supplyPartName + "</b></p><img style=\"cursor: pointer;vertical-align:middle; height:20px; width:20px; padding-left:5px;\" src='/Thingworx/MediaEntities/IKEA.Crosscloseicon' onclick=\"disconnectSupplyObject('" + newEntry.supplyPartObjectId + "#_#" + newEntry.supplyPartConfigurableLinkId + "#_#" + rootNumber + "#_#" + newEntry.objectId + "#_#" + newEntry.supplyPartNumber + "')\">"; // STRING 
                                        				}
                                        				newEntry.supplyPart = true;
                                        			}
                                        		}
                                        	}
                                        	result.AddRow(newEntry);
                                        	for (let c = 0; innerComponents !== undefined && c < innerComponents.length; c++) {
                                        		fillDataRecursively(innerComponents[c], rootNumber, rootName, hierarchy);
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getStructure_bck">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getStructure_bck -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        let dbconnectorthing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        
                                        try {
                                        	let articles = "";
                                        	if (root && root.getRowCount() > 0) {
                                        		for (let i = 0; i < root.getRowCount(); i++) {
                                        			var rootOid = root.rows[i].objectId;
                                        			var rootNumber = root.rows[i].number;
                                        			articles = articles + "," + rootNumber;
                                        			var rootName = root.rows[i].name;
                                        			var odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        			const expandPart = "Part($select=ObjectType,ID,MaterialClassification/ClfNodeHierarchyDisplayName;$expand=ConfigurableRevisionLinkUp($expand=Parent($select=Name,Number,ID,ObjectType)))";
                                        			const selectComponents = "PartId,PartName,PartNumber,PVTreeId,PVParentTreeId";
                                        			const partUse = "";
                                        			const exp = expandPart + ",Components($select=" + selectComponents + ";$expand=" + expandPart + partUse + ";$levels=max)";
                                        			let structure = Things[odataconnectorthing].getPartStructure({
                                        				$expand: exp /* STRING {"dataShape":""} */ ,
                                        				ID: rootOid /* STRING [Required] {"dataShape":""} */ ,
                                        				NavigationCriteria: {} /* STRING {"dataShape":""} */ ,
                                        				$select: selectComponents /* STRING {"dataShape":""} */
                                        			});
                                        			let hierarchy = "";
                                        			if (structure) {
                                        				fillDataRecursively(structure, rootNumber, rootName, hierarchy);
                                        			}
                                        		}
                                        	}
                                        	logger.info(FN + "service executed for [" + articles + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function fillDataRecursively(jsonInput, rootNumber, rootName, hierarchy) {
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + jsonInput.PartNumber : jsonInput.PartNumber;
                                        	const jsonPart = jsonInput.Part;
                                        	const innerComponents = jsonInput.Components;
                                        	// PTC.Resource.App.StructuredDataShape entry object
                                        	let newEntry = new Object();
                                        	newEntry.articleName = rootName;
                                        	newEntry.articleNumber = rootNumber;
                                        	newEntry.type = jsonPart.ObjectType;
                                        	newEntry.hierarchy = hierarchy;
                                        	let material_subtype = "";
                                        	if (jsonPart.MaterialClassification) {
                                        		let materialHierarchy = jsonPart.MaterialClassification.ClfNodeHierarchyDisplayName.split(" > ");
                                        		material_subtype = materialHierarchy[materialHierarchy.length - 1];
                                        	}
                                        	newEntry.materialSubType = material_subtype;
                                        	let icon;
                                        	if (newEntry.type == "IKEA Part") {
                                        		icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.PartIcon.Media')\">";
                                        	} else if (newEntry.type == "Material") {
                                        		icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.MaterialIcon.Media')\">";
                                        	} else if (newEntry.type == "Appearance") {
                                        		icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.AppearanceIcon.Media')\">";
                                        	}
                                        	newEntry.parentId = jsonInput.PVParentTreeId ? jsonInput.PVParentTreeId.replace("/", rootNumber) : jsonInput.PVParentTreeId;
                                        	newEntry.number = jsonInput.PartNumber;
                                        	newEntry.name = jsonInput.PartName;
                                        	newEntry.objectId = jsonPart.ID;
                                        	newEntry.hasChildren = innerComponents !== undefined && innerComponents.length > 0;
                                        	if (rootNumber == jsonInput.PartNumber) {
                                        		newEntry.objectHTML = "<b style=\"padding-left:7px;\">" + newEntry.number + "  -  " + newEntry.name + "</b>";
                                        	} else {
                                        		newEntry.objectHTML = icon + newEntry.number + "  -  " + newEntry.name;
                                        	}
                                        	newEntry.treeId = jsonInput.PVTreeId ? jsonInput.PVTreeId.replace("/", rootNumber) : jsonInput.PVTreeId;
                                        	newEntry.supplyPart = false;
                                        	newEntry.isSelected = false;
                                        	for (let i = 0; i < jsonPart.ConfigurableRevisionLinkUp.length; i++) {
                                        		let obj = jsonPart.ConfigurableRevisionLinkUp[i];
                                        		if (obj) {
                                        			let link = Things[dbconnectorthing].getSupplyBOMAssociationByHierarchyAndSupplyObject({
                                        				hierarchy: hierarchy,
                                        				supply_object_number: obj.Parent.Number,
                                        				supplier_number: project_number
                                        			});
                                        			if (link && link.getRowCount() > 0) {
                                        				newEntry.supplyPartObjectId = obj.Parent.ID;
                                        				newEntry.supplyPartId = obj.Parent.ID;
                                        				newEntry.supplyPartConfigurableLinkId = obj.ID;
                                        				newEntry.supplyPartName = obj.Parent.Name;
                                        				newEntry.supplyPartNumber = obj.Parent.Number;
                                        				let supplyIcon;
                                        				if (newEntry.type == "IKEA Part") {
                                        					supplyIcon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.PartIconBlue.Media')\">";
                                        				} else if (newEntry.type == "Material") {
                                        					supplyIcon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.MaterialIconBlue.Media')\">";
                                        				} else if (newEntry.type == "Appearance") {
                                        					supplyIcon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:5px;padding-right:7px;\" src='/Thingworx/MediaEntities/IK.AppearanceIconBlue.Media')\">";
                                        				}
                                        				if (rootNumber == newEntry.number) {
                                        					newEntry.objectHTML = "<p style=\"color: #0058A3; display: inline-block;\"><b>" + newEntry.supplyPartNumber + "  -  " + newEntry.supplyPartName + "</b></p><img style=\"cursor: pointer; vertical-align:middle; height:20px; width:20px; padding-left:5px;\" src='/Thingworx/MediaEntities/IKEA.Crosscloseicon' onclick=\"disconnectSupplyObject('" + newEntry.supplyPartObjectId + "#_#" + newEntry.supplyPartConfigurableLinkId + "#_#" + newEntry.objectId + "#_#" + newEntry.number + "#_#" + newEntry.supplyPartNumber + "#_#" + newEntry.hierarchy + "')\">"; // STRING  
                                        				} else {
                                        					newEntry.objectHTML = supplyIcon + "<p style=\"color: #0058A3; display: inline-block;\"><b>" + newEntry.supplyPartNumber + "  -  " + newEntry.supplyPartName + "</b></p><img style=\"cursor: pointer;vertical-align:middle; height:20px; width:20px; padding-left:5px;\" src='/Thingworx/MediaEntities/IKEA.Crosscloseicon' onclick=\"disconnectSupplyObject('" + newEntry.supplyPartObjectId + "#_#" + newEntry.supplyPartConfigurableLinkId + "#_#" + newEntry.objectId + "#_#" + newEntry.number + "#_#" + newEntry.supplyPartNumber + "#_#" + newEntry.hierarchy + "')\">"; // STRING 
                                        				}
                                        				newEntry.supplyPart = true;
                                        			}
                                        		}
                                        	}
                                        	result.AddRow(newEntry);
                                        	for (let c = 0; innerComponents !== undefined && c < innerComponents.length; c++) {
                                        		fillDataRecursively(innerComponents[c], rootNumber, rootName, hierarchy);
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSupplyObjects">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSupplyObjects -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.SupplyObject.DataShape"
                                        });
                                        
                                        try {
                                        	if (project_name) {
                                        		let libraryID = Things["IK.CVM.Configuration"].getSupplyPartsLibraryID();
                                        		let cabinetID = Things["IK.CVM.Configuration"].getSupplyPartCabinetID();
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let swaggerConnector = Things["IK.CVM.Configuration"].getWNCSwaggerConnector();
                                        
                                        		let folderjson = Things[swaggerConnector].Get_Folders({
                                        			id: libraryID
                                        		});
                                        		let folderId;
                                        		if (folderjson !== undefined && folderjson.items !== undefined) {
                                        			let items = folderjson.items;
                                        			for (let i = 0; i < items.length; i++) {
                                        				let item = items[i];
                                        				if (item.attributes.name == project_name) {
                                        					folderId = item.id;
                                        				}
                                        			}
                                        		}
                                        
                                        		let subfolderjson = Things[swaggerConnector].Get_SubFolders({
                                        			id: folderId
                                        		});
                                        		var subfolderId;
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let subfolderitems = subfolderjson.items;
                                        			for (let j = 0; j < subfolderitems.length; j++) {
                                        				let subfolderitem = subfolderitems[j];
                                        				if (subfolderitem.attributes.name == "Supply Objects") {
                                        					subfolderId = subfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        
                                        		let supplyObjectsJson = Things[odataconnectorthing].getContentsFromSubFolder({
                                        			ContainerId: libraryID,
                                        			FolderId: cabinetID,
                                        			SubFolderId1: folderId,
                                        			SubFolderId2: subfolderId
                                        		});
                                        
                                        		for (let k = 0; k < supplyObjectsJson.value.length; k++) {
                                        			let obj = supplyObjectsJson.value[k];
                                        			let objectType;
                                        			let objectClass = "";
                                        			let supplyActor = "";
                                        			let country = "";
                                        			let material_sub_type = "";
                                        			let status = "";
                                        			let classificationAttributes = obj.CVMClassification.ClassificationAttributes;
                                        			for (let c = 0; c < classificationAttributes.length; c++) {
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDObjectType") {
                                        					objectType = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDObjectClass") {
                                        					objectClass = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDLegalName") {
                                        					supplyActor = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDCountry") {
                                        					country = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDMaterialSubtype") {
                                        					material_sub_type = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDStatus") {
                                        					status = classificationAttributes[c].Value;
                                        				}
                                        			}
                                        			if (status == "Active" && objectClass == object_type) {
                                        				let newEntry = new Object();
                                        				newEntry.supply_object_id = obj.Number;
                                        				newEntry.supply_object_oid = obj.ID;
                                        				newEntry.object_type = objectType;
                                        				newEntry.material_sub_type = material_sub_type;
                                        				newEntry.type = objectClass;
                                        				let icon = "";
                                        				if (newEntry.object_type == "IKEA Part") {
                                        					icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:7px;\" src='/Thingworx/MediaEntities/IK.PartIcon.Media'\" title = \"Object type : " + newEntry.type + "   Supply actor : " + supplyActor + "   Country : " + country + "\"/>";
                                        				} else if (newEntry.object_type == "Material") {
                                        					icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:7px;\" src='/Thingworx/MediaEntities/IK.MaterialIcon.Media'\" title = \"Object type : " + newEntry.type + "   Supply actor : " + supplyActor + "   Country : " + country + "\"/>";
                                        				} else if (newEntry.object_type == "Appearance") {
                                        					icon = "<img style=\"cursor: pointer; vertical-align:middle; height:24px; width:24px; padding-left:7px;\" src='/Thingworx/MediaEntities/IK.AppearanceIcon.Media'\" title = \"Object type : " + newEntry.type + "   Supply actor : " + supplyActor + "   Country : " + country + "\"/>";
                                        				}
                                        				newEntry.display_name = obj.Number + "  -  " + obj.Name + icon;
                                        				newEntry.name = obj.Name;
                                        				newEntry.action = "https://cvmdev.plus.ikeadt.com/PLUS/wtcore/images/part.gif";
                                        				result.AddRow(newEntry);
                                        
                                        			}
                                        		}
                                        	}
                                        
                                        	let localInfoTable = result;
                                        	let sort = {
                                        		name: "supply_object_id",
                                        		ascending: true
                                        	};
                                        	localInfoTable.Sort(sort);
                                        	result = localInfoTable;
                                        
                                        	logger.info(FN + "Supply objects fetched for [" + project_name + "].");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="resetStructure">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " resetStructure -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredSupplyPartsDataShape"
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateSupplyObjectType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateSupplyObjectType -> ";
                                        
                                        try {
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	//updating IKEA object type in supply object
                                        	let checkoutJson = Things[odataconnectorthing].checkoutPart({
                                        		ID: supplyObjectId
                                        	});
                                        	let checkoutId = checkoutJson.ID;
                                        	let updateTypeJson;
                                        	if (supplyObjectType == "Material" && materialSubType) {
                                        		updateTypeJson = {
                                        			"@odata.type": "#PTC.ProdMgmt.CVMObject",
                                        			"CVMClassification": {
                                        				"ClfNodeInternalName": "GDSupplyObject",
                                        				"ClassificationAttributes": [{
                                        					"InternalName": "com.ikea.GDObjectType",
                                        					"Value": supplyObjectType
                                        				}, {
                                        					"InternalName": "com.ikea.GDMaterialSubtype",
                                        					"Value": materialSubType
                                        				}]
                                        			}
                                        		};
                                        	} else {
                                        		updateTypeJson = {
                                        			"@odata.type": "#PTC.ProdMgmt.CVMObject",
                                        			"CVMClassification": {
                                        				"ClfNodeInternalName": "GDSupplyObject",
                                        				"ClassificationAttributes": [{
                                        					"InternalName": "com.ikea.GDObjectType",
                                        					"Value": supplyObjectType
                                        				}]
                                        			}
                                        		};
                                        	}
                                        
                                        	let updateJson = Things[odataconnectorthing].updatePart({
                                        		Part: updateTypeJson,
                                        		ID: checkoutId,
                                        	});
                                        	let checkInResult = Things[odataconnectorthing].checkInPart({
                                        		ID: checkoutId
                                        	});
                                        
                                        	if (checkInResult) {
                                        		result = checkInResult.ID;
                                        	}
                                        	logger.info(FN + "Supply object  is updated with IKEA object type.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
