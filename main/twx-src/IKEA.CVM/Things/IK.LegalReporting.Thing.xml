<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="IK.LegalReporting.Thing"
         projectName="IKEA.CVM"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="addDataToSearchTable">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="articleName"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="articleNumber"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.MarketType.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="marketValue"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegIssuer.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="regulationIssuer"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegName.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="regulationName"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="reportStatus"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="searchDate"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchName"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplierNameOrNumber"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="userName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="deleteSavedSearchRow">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="NUMBER"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="editSavedSearchRow">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingSavedSearch.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="NUMBER"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportEUTRLaceyReportToExcel">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="eutrLaceyData"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.EUTRLaceyGenerationPartLevel.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="generated_data"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForLegalReporting"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isForPDF"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isLacey"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="/CVM/Reports/Templates/Template_EUTRLacey_Excel.xlsx"
                             baseType="STRING"
                             description=""
                             name="templatePathAndName"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportEUTRLaceyReportToPDF">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="eutrLaceyData"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForLegalReporting"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isLacey"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="fetchAllDataFromSearchTable">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingSavedSearch.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="fetchFiveRowsFromSearchTable">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingSavedSearch.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterSavedSearches">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingSavedSearch.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="savedSearches"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="generateEUTRLaceyData">
                        <ResultType
                         aspect.dataShape="IK.EUTRLaceyGeneration.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForLegalReporting"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="generateEUTRLaceyWebUI">
                        <ResultType
                         aspect.dataShape="IK.ReportGeneration.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="article_name"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="article_number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="article_oid"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.EUTRLaceyGenerationPartLevel.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="generated_data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForLegalReporting"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="state"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="structure"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="valid_from_to"
                             ordinal="7"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDataForActionPopup">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingActions.Datashape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForLegalReporting"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDataForSearchResults">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingSearchResultsGrid.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="articleNumber"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="existingResults"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="&lt;div&gt;&#xA;&lt;table id=&quot;header&quot; style=&quot;width: 100%;&quot;&gt;&#xA;&lt;tr&gt;&#xA;&lt;th style=&quot;text-align : right; width : 12%; padding-right:10px&quot;&gt;Article number&lt;/th&gt;&#xA;&lt;th style=&quot;text-align : left; width : 28%; padding-right:10px&quot;&gt;Article name&lt;/th&gt;&#xA;&lt;th style=&quot;text-align : right; width : 12%; padding-right:10px&quot;&gt;Supplier number&lt;/th&gt;&#xA;&lt;th style=&quot;text-align : left; width : 28%; padding-right:10px&quot;&gt;Supplier name&lt;/th&gt;&#xA;&lt;th style=&quot;text-align : left; width : 10%; padding-right:10px&quot;&gt;Complete&lt;/th&gt;&#xA;&lt;th style=&quot;text-align : left; width : 10%; padding-right:10px&quot;&gt;Incomplete/ Missing&lt;/th&gt;&#xA;&lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;&lt;/div&gt;"
                             baseType="HTML"
                             description=""
                             name="headerHTML"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="keepSearchResults"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supplierNumber"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getMarketType">
                        <ResultType
                         aspect.dataShape="IK.MarketTypeMaster.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isEdit"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.MarketType.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedItem"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getOutputFormat">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRegulationIssuer">
                        <ResultType
                         aspect.dataShape="IK.RegIssuerMaster.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isEdit"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.MarketType.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="Market"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegIssuer.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedItem"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRegulationName">
                        <ResultType
                         aspect.dataShape="IK.RegNameMaster.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isEdit"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegIssuer.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="RegulationIssuer"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegName.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedItem"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getReportName">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getReportStatus">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="populateSavedSearchData">
                        <ResultType
                         aspect.dataShape="IK.LegalReportingSavedSearch.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="NUMBER"
                             description=""
                             name="id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="resetMarket">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="resetRegIssuer">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="resetRegName">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="validatePopulateCompleted">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.LegalReportingSavedSearch.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="isEdit"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.MarketType.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="market"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegIssuer.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="regulationIssuer"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.RegName.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="regulationName"
                             ordinal="4"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="addDataToSearchTable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " addDataToSearchTable -> ";
                                        let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        
                                        try {
                                        	let date = new Date().getTime();
                                        	let marketEntry = "";
                                        	if (marketValue && marketValue.getRowCount() > 0) {
                                        		for (let i = 0; i < marketValue.getRowCount(); i++) {
                                        			marketEntry += marketValue.rows[i].Market;
                                        			if (i < marketValue.getRowCount() - 1) {
                                        				marketEntry += ",";
                                        			}
                                        		}
                                        	}
                                        
                                        	let regulationIssuerEntry = "";
                                        	if (regulationIssuer && regulationIssuer.getRowCount() > 0) {
                                        		for (let i = 0; i < regulationIssuer.getRowCount(); i++) {
                                        			regulationIssuerEntry += regulationIssuer.rows[i].RegulationIssuer;
                                        			if (i < regulationIssuer.getRowCount() - 1) {
                                        				regulationIssuerEntry += ",";
                                        			}
                                        		}
                                        	}
                                        
                                        	let regulationNameEntry = "";
                                        	if (regulationName && regulationName.getRowCount() > 0) {
                                        		for (let i = 0; i < regulationName.getRowCount(); i++) {
                                        			regulationNameEntry += regulationName.rows[i].RegulationName;
                                        			if (i < regulationName.getRowCount() - 1) {
                                        				regulationNameEntry += ",";
                                        			}
                                        		}
                                        	}
                                        
                                        	let reportStatusEntry = "";
                                        	if (reportStatus && reportStatus.getRowCount() > 0) {
                                        		for (let i = 0; i < reportStatus.getRowCount(); i++) {
                                        			reportStatusEntry += reportStatus.rows[i].item;
                                        			if (i < reportStatus.getRowCount() - 1) {
                                        				reportStatusEntry += ",";
                                        			}
                                        		}
                                        	}
                                        
                                        	let rows = Things[databaseConnector].fetchAllDetailsFromSaveSearch({
                                        		username: userName,
                                        		limit: 15
                                        	});
                                        
                                        	let count = rows.getRowCount();
                                        	let oldValue;
                                        	let tableValue;
                                        	let row;
                                        	if (count >= 15) {
                                        		tableValue = Things[databaseConnector].fetchTheOldestSavedSearch({
                                        			username: userName
                                        		});
                                        		oldValue = tableValue.ID;
                                        		deletedValue = Things[databaseConnector].deleteSavedSearch({
                                        			id: oldValue
                                        		});
                                        		row = Things[databaseConnector].addSaveSearchValues({
                                        			searchName: searchName,
                                        			userName: userName,
                                        			market: marketEntry,
                                        			regulationIssuer: regulationIssuerEntry,
                                        			regulationName: regulationNameEntry,
                                        			articleNumber: articleNumber,
                                        			articleName: articleName,
                                        			supplierNameOrNumber: supplierNameOrNumber,
                                        			searchDate: searchDate,
                                        			createdTimestamp: date,
                                        			reportStatus: reportStatusEntry,
                                        			usage: "Legal Reporting"
                                        
                                        		});
                                        		result = true;
                                        	} else {
                                        		row = Things[databaseConnector].addSaveSearchValues({
                                        			searchName: searchName,
                                        			userName: userName,
                                        			market: marketEntry,
                                        			regulationIssuer: regulationIssuerEntry,
                                        			regulationName: regulationNameEntry,
                                        			articleNumber: articleNumber,
                                        			articleName: articleName,
                                        			supplierNameOrNumber: supplierNameOrNumber,
                                        			searchDate: searchDate,
                                        			createdTimestamp: date,
                                        			reportStatus: reportStatusEntry,
                                        			usage: "Legal Reporting"
                                        
                                        		});
                                        	}
                                        
                                        	if (row > 0) {
                                        		result = true;
                                        
                                        	} else {
                                        		result = false;
                                        	}
                                        	logger.info(FN + "executed successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="deleteSavedSearchRow">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " deleteSavedSearchRow -> ";
                                        try {
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	Things[databaseConnector].deleteSavedSearch({
                                        		id: id
                                        	});
                                        	logger.info(FN + "executed successfully for [" + id + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="editSavedSearchRow">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " editSavedSearchRow -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingSavedSearch.DataShape"
                                        });
                                        let marketTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.MarketType.DataShape"
                                        });
                                        let regulationIssuerTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegIssuer.DataShape"
                                        });
                                        let regulationNameTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegName.DataShape"
                                        });
                                        let reportStatusTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let row = Things[databaseConnector].fetchDetailsFromSaveSearch({
                                        		id: id
                                        	});
                                        
                                        	let marketArray = row.MARKET.split(",");
                                        	for (let i = 0; i < marketArray.length; i++) {
                                        		marketTable.AddRow({
                                        			Market: marketArray[i]
                                        		});
                                        	}
                                        
                                        	let regulationIssuerArray = row.REGULATION_ISSUER.split(",");
                                        	for (i = 0; i < regulationIssuerArray.length; i++) {
                                        		regulationIssuerTable.AddRow({
                                        			RegulationIssuer: regulationIssuerArray[i]
                                        		});
                                        	}
                                        
                                        	let regulationNameArray = row.REGULATION_NAME.split(",");
                                        	for (i = 0; i < regulationNameArray.length; i++) {
                                        		regulationNameTable.AddRow({
                                        			RegulationName: regulationNameArray[i]
                                        		});
                                        	}
                                        
                                        	let reportStatusArray = row.REPORT_STATUS.split(",");
                                        	for (i = 0; i < reportStatusArray.length; i++) {
                                        		reportStatusTable.AddRow({
                                        			item: reportStatusArray[i]
                                        		});
                                        	}
                                        
                                        	result.AddRow({
                                        		id: row.ID, // NUMBER
                                        		searchName: row.SEARCH_NAME_CRITERIA, // STRING
                                        		userName: row.USERNAME, // STRING
                                        		market: row.MARKET, // STRING
                                        		regulationIssuer: row.REGULATION_ISSUER, // STRING
                                        		regulationName: row.REGULATION_NAME, // STRING
                                        		articleNumber: row.ARTICLE_NUMBER, // STRING
                                        		articleName: row.ARTICLE_NAME, // STRING
                                        		supplierNameOrNumber: row.SUPPLIER_NAME_OR_NUMBER,
                                        		searchDate: row.SEARCH_DATE, // DATETIME
                                        		reportStatus: row.REPORT_STATUS,
                                        		created_timestamp: row.CREATED_TIMESTAMP, // DATETIME
                                        		usage: row.USAGE, // STRING
                                        		marketMultiSelect: marketTable,
                                        		regulationIssuerMultiSelect: regulationIssuerTable,
                                        		regulationNameMultiSelect: regulationNameTable,
                                        		reportStatusMultiSelect: reportStatusTable,
                                        		editAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IK.Media.Skapa.Pencil'/>",
                                        		deleteAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin'/>"
                                        
                                        	});
                                        	logger.info(FN + "[" + id + "]row edited successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportEUTRLaceyReportToExcel">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportEUTRLaceyReportToExcel -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	let input = inputForLegalReporting.split("#_#");
                                        	let article_number = input[0];
                                        	let project_number = input[1];
                                        	if (isLacey) {
                                        		for (let i = 0; i < eutrLaceyData.generated_data.rows.length; i++) {
                                        			let params = {
                                        				t: eutrLaceyData.generated_data.rows[i].plant_data /* INFOTABLE */ ,
                                        				columns: "genus,species,country" /* STRING */
                                        			};
                                        			// result: INFOTABLE
                                        			eutrLaceyData.generated_data.rows[i].plant_data = Resources["InfoTableFunctions"].Distinct(params);
                                        		}
                                        	}
                                        
                                        	let sdf = "MM-dd-yyyy_HH-mm-ss(ZZZ)";
                                        	let dateValue = new Date();
                                        	let formattedDate = dateFormat(dateValue, sdf);
                                        
                                        	let plantReports = {};
                                        	const issueDate = new Date().toLocaleDateString();
                                        	let excelFileName = "EUTR-Origin_Lacey_" + article_number + "_" + username + "_" + formattedDate + ".xlsx";
                                        	if (isLacey) {
                                        		excelFileName = "Lacey_" + article_number + "_" + username + "_" + formattedDate + ".xlsx";
                                        	} else if (isForPDF && (!isLacey)) {
                                        		excelFileName = "EUTR-Origin_" + article_number + "_" + username + "_" + formattedDate + ".xlsx";
                                        	}
                                        
                                        	let fullPath = "/CVM/Reports/EUTR/";
                                        	if (isLacey) {
                                        		fullPath = "/CVM/Reports/Lacey/";
                                        	}
                                        
                                        	let resultExcel = Things["IK.EUTRLaceyExcelGeneration.Thing"].ExportInfotableToExcel({
                                        		sheetName: "Overview" /* STRING {"defaultValue":"Worksheet"} */ ,
                                        		createGrouping: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        		columnGroupingName: undefined /* STRING {"defaultValue":"hierarchy"} */ ,
                                        		templateRepository: "CustomFileRepoistory" /* THINGNAME */ ,
                                        		//inputInfoTable: excelData /* INFOTABLE */ ,
                                        		inputInfoTable: eutrLaceyData /* INFOTABLE */ ,
                                        		isForPDF: isForPDF /* BOOLEAN {"defaultValue":false} */ ,
                                        		isForLacey: isLacey /* BOOLEAN {"defaultValue":false} */ ,
                                        		excelRepository: "CustomFileRepoistory" /* THINGNAME */ ,
                                        		mappingColumnsNames: undefined /* STRING */ ,
                                        		templatePathAndName: templatePathAndName /* STRING {"defaultValue":"/template.xlsx"} */ ,
                                        		excelFileName: fullPath + excelFileName /* STRING {"defaultValue":"/excel.xlsx"} */ ,
                                        		initialRowHeaderAndData: 2 /* INTEGER {"defaultValue":2} */
                                        	});
                                        
                                        	result = Things["CustomFileRepoistory"].GetFileListingWithLinks({
                                        		path: fullPath /* STRING */ ,
                                        		nameMask: excelFileName /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully. File [" + excelFileName + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportEUTRLaceyReportToPDF">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportEUTRLaceyReportToPDF -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	let input = inputForLegalReporting.split("#_#");
                                        	let article_number = input[0];
                                        	let project_number = input[1];
                                        	const repo = "CustomFileRepoistory";
                                        	if (isLacey) {
                                        		templatePathAndName = "/CVM/Reports/Templates/Template_Lacey_PDF.xlsx";
                                        	} else {
                                        		templatePathAndName = "/CVM/Reports/Templates/Template_EUTR_PDF.xlsx";
                                        	}
                                        	let res = me.exportEUTRLaceyReportToExcel({
                                        		inputForLegalReporting: inputForLegalReporting,
                                        		username: username /* STRING {"defaultValue":"l-twx-u-itseelm"} */ ,
                                        		isForPDF: true /* BOOLEAN {"defaultValue":false} */ ,
                                        		templatePathAndName: templatePathAndName /* STRING {"defaultValue":"/CVM/Reports/EUTR/TemplateEUTR_v1.xlsx"} */ ,
                                        		isLacey: isLacey /* BOOLEAN {"defaultValue":false} */ ,
                                        		generated_data: undefined /* INFOTABLE {"dataShape":"IK.EUTRLaceyGenerationPartLevel.DataShape"} */ ,
                                        		eutrLaceyData: eutrLaceyData /* INFOTABLE */
                                        	});
                                        
                                        	let pdfFileNameAndPath = res[0].path.substring(0, res[0].path.lastIndexOf(".")) + ".pdf";
                                        	let path = pdfFileNameAndPath.substring(0, pdfFileNameAndPath.lastIndexOf("/") + 1);
                                        	let pdfFileName = pdfFileNameAndPath.substring(path.length);
                                        
                                        
                                        	let resultConvert = Things["IK.AEMUtility.Thing"].convertToPDF({
                                        		outputPathAndName: pdfFileNameAndPath /* STRING */ ,
                                        		fileRepositoryName: repo /* STRING */ ,
                                        		filePathAndName: res[0].path /* STRING */ ,
                                        		outputRepository: repo /* STRING */
                                        	});
                                        	// deleting generated excel file
                                        	Things[repo].DeleteFile({
                                        		path: res[0].path /* STRING */
                                        	});
                                        	result = Things[repo].GetFileListingWithLinks({
                                        		path: path /* STRING */ ,
                                        		nameMask: pdfFileName /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully. File [" + pdfFileName + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="fetchAllDataFromSearchTable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " fetchAllDataFromSearchTable -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingSavedSearch.DataShape"
                                        });
                                        
                                        try {
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let row = Things[databaseConnector].fetchAllDetailsFromSaveSearch({
                                        		username: username,
                                        		limit: 15
                                        	});
                                        
                                        	for (let i = 0; i < row.getRowCount(); i++) {
                                        		result.AddRow({
                                        			id: row[i].ID, // NUMBER
                                        			searchName: row[i].SEARCH_NAME_CRITERIA, // STRING 
                                        			searchDate: row[i].SEARCH_DATE, // DATETIME
                                        			action: "<img style=\"cursor: pointer; padding-right:10px; \" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IK.Media.Skapa.Pencil' onclick=\"legalReportingSavedSearch('root_mashupcontainer-17_navigationfunction-228-popup_ptcsbutton-29','" + row[i].ID + "')\" /><img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"legalReportingSavedSearch('root_mashupcontainer-17_navigationfunction-228-popup_ptcsbutton-30','" + row[i].ID + "')\" />"
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully. username [" + username + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="fetchFiveRowsFromSearchTable">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " fetchFiveRowsFromSearchTable -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingSavedSearch.DataShape"
                                        });
                                        
                                        try {
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let row = Things[databaseConnector].fetchAllDetailsFromSaveSearch({
                                        		username: username,
                                        		limit: 5
                                        	});
                                        	for (let i = 0; i < row.getRowCount(); i++) {
                                        		result.AddRow({
                                        			id: row[i].ID, // NUMBER
                                        			searchName: row[i].SEARCH_NAME_CRITERIA, // STRING
                                        			action: "<img style=\"cursor: pointer; padding-right:10px;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IK.Media.Skapa.Pencil' onclick=\"legalReportingSavedSearch('root_mashupcontainer-17_ptcsbutton-180','" + row[i].ID + "')\" /><img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"legalReportingSavedSearch('root_mashupcontainer-17_ptcsbutton-177','" + row[i].ID + "')\" />"
                                        		});
                                        
                                        	}
                                        	logger.info(FN + "executed successfully. username [" + username + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterSavedSearches">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterSavedSearches -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingSavedSearch.DataShape"
                                        });
                                        
                                        try {
                                        	if (savedSearches && savedSearches.getRowCount() > 0) {
                                        
                                        		if (searchText) {
                                        			let filters = [{
                                        				"type": "LIKE",
                                        				"fieldName": "searchName",
                                        				"value": "%" + searchText + "%"
                                        			}];
                                        
                                        			let query = {
                                        				"filters": {
                                        					"filters": filters,
                                        					"type": "OR"
                                        				}
                                        			};
                                        			params = {
                                        				t: savedSearches /* INFOTABLE */ ,
                                        				query: query /* QUERY */
                                        			};
                                        
                                        			// result: INFOTABLE
                                        			result = Resources["InfoTableFunctions"].Query(params);
                                        			logger.info(FN + "Search Successful" + "for search text [" + searchText + "].");
                                        		} else {
                                        			result = savedSearches;
                                        			logger.info(FN + "Save searches loaded successfully.");
                                        		}
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="generateEUTRLaceyData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " generateEUTRLaceyData -> ";
                                        let generatedData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.EUTRLaceyGenerationPartLevel.DataShape"
                                        });
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.EUTRLaceyGeneration.DataShape"
                                        });
                                        
                                        let reportingObjFilter = "";
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        let project_number = "";
                                        try {
                                        	let input = inputForLegalReporting.split("#_#");
                                        	let article_number = input[0];
                                        	let supplier_number = input[1];
                                        	let supplier_name = input[2];
                                        	project_number = input[3];
                                        	let delegatedIds = Things[dataBaseThing].getDelegatedIdByDelegatorId({
                                        		delegator_id: project_number
                                        	});
                                        	let supplierFilter = "SupplierDetails eq '" + project_number + "'";
                                        	if (delegatedIds.rows.length > 0) {
                                        		supplierFilter = "( SupplierDetails eq '" + project_number + "' or ";
                                        		for (let i = 0; i < delegatedIds.rows.length; i++) {
                                        			let value = delegatedIds[i];
                                        			supplierFilter += "SupplierDetails eq '" + value.DELEGATED_ID + "'";
                                        			if (i < delegatedIds.rows.length - 1) {
                                        				supplierFilter += " or ";
                                        			}
                                        		}
                                        		supplierFilter += ")";
                                        	}
                                        	let articleJson = Things[odataconnectorthing].getParts({
                                        		$filter: "Number eq '" + article_number + "'",
                                        		$select: "Name"
                                        	});
                                        	let article_name;
                                        	let article_oid;
                                        	if (articleJson.value != undefined && articleJson.value.length > 0) {
                                        		let part = articleJson.value[0];
                                        		article_name = articleJson.value[0].Name;
                                        		article_oid = part.ID;
                                        	}
                                        	const expandPart = "Part($select=ID,ObjectType;$expand=ConfigurableRevisionLinkUp($expand=Parent($select=Number)))";
                                        	const selectComponents = "PartId,PartName,PartNumber,PVTreeId,PVParentTreeId";
                                        	const exp = expandPart + ",Components($select=" + selectComponents + ";$expand=" + expandPart + ";$levels=5)";
                                        
                                        	// result: JSON
                                        	let structure = Things[odataconnectorthing].getPartStructure({
                                        		$expand: exp /* STRING {"dataShape":""} */ ,
                                        		ID: article_oid /* STRING [Required] {"dataShape":""} */ ,
                                        		NavigationCriteria: {} /* STRING {"dataShape":""} */ ,
                                        		$select: selectComponents /* STRING {"dataShape":""} */
                                        	});
                                        	if (structure) {
                                        		//fillDataRecursively(structure);
                                        		let hierarchy = "";
                                        		fillDataRecursively(structure, hierarchy);
                                        	}
                                        	if (reportingObjFilter && reportingObjFilter.length > 0) {
                                        		let json = Things[odataconnectorthing].getReportingObjects({
                                        			//$filter: reportingObjFilter.slice(0, -4) + " and " + supplierFilter +" and (VerificationStatus eq 'Verified')" /* STRING {"dataShape":""} */ ,
                                        			$filter: "(" + reportingObjFilter.slice(0, -4) + ") and " + supplierFilter,
                                        			$select: "Number,ComponentID,SupplyObjectID,ReportingObjectClassification"
                                        		});
                                        		let values = json.value;
                                        		for (let k = 0; k < values.length; k++) {
                                        			let value = values[k];
                                        			if (value && value.ReportingObjectClassification) {
                                        				let partLevelData = new Object();
                                        				partLevelData.part_number = value.ComponentID;
                                        				partLevelData.supply_object_number = value.SupplyObjectID;
                                        				let partJson = Things[odataconnectorthing].getParts({
                                        					$filter: "Number eq '" + value.ComponentID + "'",
                                        					$select: "Name,ObjectType"
                                        				});
                                        				partLevelData.part_name = partJson.value[0].Name;
                                        				partLevelData.object_type = partJson.value[0].ObjectType;
                                        				partLevelData.supplier_details = project_number;
                                        				//partLevelData.supplier_details = value.SupplierDetails; // Supplier details specific to reporting object
                                        				partLevelData.material_amount_per_article = "0";
                                        				partLevelData.material_amount_per_article_unit = "g";
                                        				let attribute = value.ReportingObjectClassification.ClassificationAttributes;
                                        				let plantBasedData = [];
                                        
                                        				for (let c = 0; c < attribute.length; c++) {
                                        					if (attribute[c].InternalName == "com.ikea.GDPlantReportAttributes") {
                                        						plantBasedData.push(attribute[c].Value);
                                        					} else if (attribute[c].InternalName == "com.ikea.GDRecyclePercentage") {
                                        						partLevelData.percent_recycled = attribute[c].Value;
                                        					}
                                        				}
                                        
                                        				let plantReportData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        					infoTableName: "InfoTable",
                                        					dataShapeName: "IK.PlantReportData.DataShape"
                                        				});
                                        				if (plantBasedData) {
                                        					for (let i = 0; i < plantBasedData.length; i++) {
                                        						let rowValues = plantBasedData[i].split("|");
                                        						let plantData = new Object();
                                        						plantData.commonName = rowValues[0];
                                        						plantData.genus = rowValues[1];
                                        						plantData.species = rowValues[2];
                                        						plantData.country = rowValues[3];
                                        						plantData.region = rowValues[4];
                                        						plantData.subRegion = rowValues[5];
                                        						plantData.complianceStatus = rowValues[7];
                                        						plantReportData.AddRow(plantData);
                                        					}
                                        				}
                                        
                                        				let params = {
                                        					t: plantReportData /* INFOTABLE */ ,
                                        					columns: "commonName,genus,species,country,region,subRegion,complianceStatus" /* STRING */
                                        				};
                                        				// result: INFOTABLE
                                        				partLevelData.plant_data = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        				generatedData.AddRow(partLevelData);
                                        			}
                                        		}
                                        	}
                                        	let resultEntry = new Object();
                                        	resultEntry.article_number = article_number;
                                        	resultEntry.article_name = article_name;
                                        	resultEntry.article_oid = article_oid;
                                        	resultEntry.structure = structure;
                                        	resultEntry.generated_data = generatedData;
                                        	resultEntry.issue_date = new Date().toLocaleDateString();
                                        	resultEntry.company_name_and_address = "IKEA Supply AG, Grüssenweg 15, 4133 Pratteln, Switzerland, Tel: +41 (0) 58 853 66 27";
                                        	resultEntry.supplier_FSC_certified = "XXX";
                                        	resultEntry.valid_from_to = "XXX to XXX";
                                        	//let proj_number = project_number.substring(project_number.indexOf('(') + 1, project_number.indexOf(')'));
                                        	resultEntry.supplier_number = supplier_number;
                                        	result.AddRow(resultEntry);
                                        	logger.info(FN + "executed successfully. [" + inputForLegalReporting + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function fillDataRecursively(jsonInput, hierarchy) {
                                        	const jsonPart = jsonInput.Part;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + jsonInput.PartNumber : jsonInput.PartNumber;
                                        	let partNumber = jsonInput.PartNumber;
                                        	const innerComponents = jsonInput.Components;
                                        	let configurableLink = jsonPart.ConfigurableRevisionLinkUp;
                                        	for (let i = 0; i < configurableLink.length; i++) {
                                        		let linkObj = configurableLink[i];
                                        		let link = Things[dataBaseThing].getSupplyBOMAssociationByHierarchyAndSupplyObject({
                                        			hierarchy: hierarchy,
                                        			supply_object_number: linkObj.Parent.Number,
                                        			supplier_number: project_number
                                        		});
                                        		if (link && link.getRowCount() > 0) {
                                        			let supplyObjectID = linkObj.Parent.Number;
                                        			reportingObjFilter = reportingObjFilter + "(ComponentID eq '" + partNumber + "' and SupplyObjectID eq '" + supplyObjectID + "' and VerificationMethodID eq 'Not_Defined' and VerificationStatus eq 'Verified') or "
                                        		}
                                        	}
                                        	for (let c = 0; innerComponents !== undefined && c < innerComponents.length; c++) {
                                        		fillDataRecursively(innerComponents[c], hierarchy);
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="generateEUTRLaceyWebUI">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " generateEUTRLaceyWebUI -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ReportGeneration.DataShape"
                                        });
                                        let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        let project_number = "";
                                        try {
                                        	let input = inputForLegalReporting.split("#_#");
                                        	let supplier_number = input[1];
                                        	let project_name = input[2];
                                        	project_number = input[3];
                                        	let htmlHeader = "<html><head><style type='text/css'> #reporting tbody{} #reporting td{word-wrap: break-word !important; vertical-align:top !important; width:10% !important; padding-top:12px !important;padding-left:10px; font-size:12px !important;text-align:left !important;font-weight:bold !important; } #reporting_table th{text-align:left !important;padding-bottom:10px;font-weight:800 !important; padding-left:20px !important;} #reporting td,#reporting_table td {font-weight: normal !important; padding-left : 20px !important;} </style></head> <body>";
                                        	let header = htmlHeader + "<div style=\"background-color:#dedede ;padding-bottom :5px !important; border-radius:5px\"><table id=\"reporting\"><tr><td><b>Article Number : </b>" + article_number + "</td><td><b>Article Name : </b>" + article_name + "</td></tr><tr><td><b>Supplier Number : </b>" + supplier_number + "</td><td> <b>Supplier Name: </b>" + project_name + "</td></tr><tr><td> <b>Supplier FSC Certified:</b> XXX</td><td> <b>Issue Date : </b>" + new Date().toLocaleDateString() + "</td><td> <b>Report Valid From/To : </b> " + valid_from_to + " </td></tr></table></div></body></html>";
                                        	let headerEntry = new Object();
                                        	headerEntry.parentId = "header"; // STRING       
                                        	headerEntry.hasChildren = false; // BOOLEAN    
                                        	headerEntry.html_data = header;
                                        	headerEntry.id = "title"; // STRING
                                        	result.AddRow(headerEntry);
                                        	if (state == "partStructure") {
                                        		let rootOid = article_oid;
                                        		let rootNumber = article_number;
                                        		if (structure) {
                                        			let hierarchy = "";
                                        			fillDataRecursively(structure, rootNumber, hierarchy);
                                        		}
                                        	} else if (state == "materialConsolidated") {
                                        		let html = "<html><head><style type='text/css'> #reporting th{text-align:left !important;font-weight:bold !important; } #reporting_table th{text-align:left !important;padding-bottom:10px;font-weight:800 !important; padding-left:20px !important;} #reporting td,#reporting_table td {font-weight: normal !important; padding-left : 20px !important;} </style></head> <body>";
                                        
                                        		//    var title = html + "<h3>EUTR Origin Report</h3>";
                                        		for (let k = 0; k < generated_data.rows.length; k++) {
                                        			let tableHeader = "";
                                        			let value = generated_data.rows[k];
                                        			if (value) {
                                        				let newEntry = new Object();
                                        				newEntry.id = value.part_number;
                                        				newEntry.hasChildren = true;
                                        				newEntry.html_data = "<b>" + value.object_type + " Number : </b>" + value.part_number + " &nbsp&nbsp<b>" + value.object_type + " Name : </b>" + value.part_name;
                                        				result.AddRow(newEntry);
                                        				let tableHead = html + "<div style=\"display: inline-block;\"><table id=\"reporting_table\"><tr><td style=\"padding-bottom:10px;\"><b>% Recycled : </b>" + value.percent_recycled + "&nbsp;</td><td style=\"padding-bottom:10px;\"><b>" + value.material_amount_per_article_unit + " per article : </b>" + value.material_amount_per_article + " &nbsp;</td></tr></table><table id=\"reporting_table\"><tr><th>Common Name</th><th>Genus</th><th>Species</th><th>Country</th><th>Region</th><th>Sub-Region</th><th>Compliance Status</th></tr>";
                                        				let plantDatas = value.plant_data;
                                        				if (plantDatas.rows.length > 0) {
                                        					for (let j = 0; j < plantDatas.rows.length; j++) {
                                        						let rowValue = plantDatas.rows[j];
                                        						if (rowValue) {
                                        							tableHead = tableHead + "<tr><td>" + rowValue.commonName + "</td><td>" + rowValue.genus + "</td><td>" + rowValue.species + "</td><td>" + rowValue.country + "</td><td>" + rowValue.region + "</td><td>" + rowValue.subRegion + "</td><td>" + rowValue.complianceStatus + "</td></tr>";
                                        						}
                                        					}
                                        				}
                                        				tableHead = tableHead + "</div></table></br><hr size=\"2\" width=\"100%\" color=\"black\"></br>";
                                        				let newEntry1 = new Object();
                                        				newEntry1.Id = value.part_number + "_child";
                                        				newEntry1.html_data = html + tableHead + "</body></html>";
                                        				newEntry1.hasChildren = false;
                                        				newEntry1.parentId = value.part_number;
                                        				result.AddRow(newEntry1);
                                        			}
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully. article[" + article_number + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function fillDataRecursively(jsonInput, rootNumber, hierarchy) {
                                        	const jsonPart = jsonInput.Part;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + jsonInput.PartNumber : jsonInput.PartNumber;
                                        	const innerComponents = jsonInput.Components;
                                        	let configurableLink = jsonPart.ConfigurableRevisionLinkUp;
                                        	if (article_number != jsonInput.PartNumber) {
                                        		let newEntry = new Object();
                                        		newEntry.parentId = jsonInput.PVParentTreeId; // STRING       
                                        		newEntry.hasChildren = innerComponents !== undefined && innerComponents.length > 0; // BOOLEAN    
                                        		newEntry.html_data = "<b>" + jsonPart.ObjectType + " Number : </b>" + jsonInput.PartNumber + " &nbsp&nbsp<b>" + jsonPart.ObjectType + " Name : </b>" + jsonInput.PartName; // STRING
                                        		newEntry.id = jsonInput.PVTreeId; // STRING		
                                        
                                        		for (let i = 0; i < configurableLink.length; i++) {
                                        			let linkObj = configurableLink[i];
                                        			let link = Things[dataBaseThing].getSupplyBOMAssociationByHierarchyAndSupplyObject({
                                        				hierarchy: hierarchy,
                                        				supply_object_number: linkObj.Parent.Number,
                                        				supplier_number: project_number
                                        			});
                                        			if (link && link.getRowCount() > 0) {
                                        				let hasreports = hasReportingObjects(jsonInput.PartNumber, rootNumber, jsonInput.PVTreeId, linkObj);
                                        				if (hasreports) {
                                        					newEntry.hasChildren = true;
                                        				}
                                        			}
                                        		}
                                        		result.AddRow(newEntry);
                                        	}
                                        
                                        	for (let c = 0; innerComponents !== undefined && c < innerComponents.length; c++) {
                                        		fillDataRecursively(innerComponents[c], rootNumber, hierarchy);
                                        	}
                                        }
                                        
                                        function hasReportingObjects(partNumber, rootNumber, treeId, configurableLink) {
                                        
                                        	let supplyObjectID = configurableLink.Parent.Number;
                                        	let row = generated_data.Find({
                                        		part_number: partNumber,
                                        		supply_object_number: supplyObjectID
                                        	});
                                        	if (row) {
                                        		let html = "<html><head><style type='text/css'> #reporting th{text-align:left !important;font-weight:bold !important; } #reporting_table th{text-align:left !important;padding-bottom:10px;font-weight:800 !important; padding-left:20px !important;} #reporting td,#reporting_table td {font-weight: normal !important; padding-left : 20px !important;} </style></head> <body>";
                                        		let tableHead = html + "<div style=\"display: inline-block;\"><table id=\"reporting_table\"><tr><td style=\"padding-bottom:10px;\"><b>% Recycled : </b>" + row.percent_recycled + " &nbsp;</td><td style=\"padding-bottom:10px;\"><b>" + row.material_amount_per_article_unit + " per article : </b>" + row.material_amount_per_article + " &nbsp;</td></tr></table><table id=\"reporting_table\"><tr><th>Common Name</th><th>Genus</th><th>Species</th><th>Country</th><th>Region</th><th>Sub-Region</th><th>Compliance Status</th></tr>";
                                        		let plantDatas = row.plant_data;
                                        		if (plantDatas.rows.length > 0) {
                                        			for (let j = 0; j < plantDatas.length; j++) {
                                        				let rowValue = plantDatas.rows[j];
                                        				if (rowValue) {
                                        					tableHead = tableHead + "<tr><td>" + rowValue.commonName + "</td><td>" + rowValue.genus + "</td><td>" + rowValue.species + "</td><td>" + rowValue.country + "</td><td>" + rowValue.region + "</td><td>" + rowValue.subRegion + "</td><td>" + rowValue.complianceStatus + "</td></tr>";
                                        				}
                                        			}
                                        		}
                                        		tableHead = tableHead + "</div></table></br><hr size=\"2\" width=\"100%\" color=\"black\"></br>";
                                        		let newEntry1 = new Object();
                                        		let uid = generateGUID();
                                        		newEntry1.id = partNumber + "_child_" + uid;
                                        		newEntry1.html_data = html + tableHead + "</body></html>";
                                        		newEntry1.hasChildren = false;
                                        		newEntry1.parentId = treeId;
                                        		result.AddRow(newEntry1);
                                        		return true;
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDataForActionPopup">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getDataForActionPopup -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingActions.Datashape"
                                        });
                                        
                                        try {
                                        	let input = inputForLegalReporting.split("#_#");
                                        	let article_number = input[0];
                                        	let supplier_number = input[1];
                                        	let supplier_name = input[2];
                                        	let project_number = input[3];
                                        	result.AddRow({
                                        		regulation_name: "Lacey Act",
                                        		report_type: "Lacey",
                                        		quick_action: "<a  style=\"cursor: pointer; padding-right:10px; \" onclick=\"legalReportingNavigation('root_mashupcontainer-17_navigationfunction-235-popup_ptcsbutton-21','" + article_number + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + project_number + "')\"/><b>.pdf</b></a><a  style=\"cursor: pointer; padding-right:10px; \" onclick=\"legalReportingNavigation('root_mashupcontainer-17_navigationfunction-235-popup_ptcsbutton-26','" + article_number + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + project_number + "')\"/><b>.xls</b></a><a  style=\"cursor: pointer;\" onclick=\"legalReportingNavigation('root_mashupcontainer-17_navigationfunction-235-popup_ptcsbutton-27','" + article_number + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + project_number + "')\"><b>.web</b></a>"
                                        	});
                                        
                                        	result.AddRow({
                                        		regulation_name: "European Timber Regulation",
                                        		report_type: "EUTR Origin",
                                        		quick_action: "<a  style=\"cursor: pointer; padding-right:10px; \" onclick=\"legalReportingNavigation('root_mashupcontainer-17_navigationfunction-235-popup_ptcsbutton-25','" + article_number + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + project_number + "')\"/><b>.pdf</b></a><a  style=\"cursor: pointer; padding-right:10px; \" onclick=\"legalReportingNavigation('root_mashupcontainer-17_navigationfunction-235-popup_ptcsbutton-26','" + article_number + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + project_number + "')\"/><b>.xls</b></a><a  style=\"cursor: pointer;\" onclick=\"legalReportingNavigation('root_mashupcontainer-17_navigationfunction-235-popup_ptcsbutton-27','" + article_number + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + project_number + "')\"><b>.web</b></a>"
                                        	});
                                        	logger.info(FN + "service executed");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDataForSearchResults">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getGridDataForSearchResults -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingSearchResultsGrid.DataShape"
                                        });
                                        
                                        try {
                                        	if (articleNumber && articleNumber.length > 0 && supplierNumber && supplierNumber.length > 0) {
                                        		let supplier_number = supplierNumber.substring(supplierNumber.indexOf('(') + 1, supplierNumber.indexOf(')'));
                                        		let supplier_name = supplierNumber.split("(")[0];
                                        		articleNumberArray = articleNumber.split(',');
                                        		if ((!keepSearchResults || !existingResults || existingResults.getRowCount() == 0) && articleNumberArray && articleNumberArray.length > 0) {
                                        			searchResultsData(supplier_number, supplier_name);
                                        		}
                                        		if (keepSearchResults && existingResults && existingResults.getRowCount() > 0) {
                                        			result = existingResults;
                                        			searchResultsData(supplier_number, supplier_name);
                                        		}
                                        	}
                                        	logger.info(FN + "Search results fetched sucessfully. article[" + articleNumber + " ] supplier[" + supplierNumber + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function searchResultsData(supplier_number, supplier_name) {
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	for (let i = 0; i < articleNumberArray.length; i++) {
                                        		let articleJson = Things[odataconnectorthing].getParts({
                                        			$filter: "Number eq '" + articleNumberArray[i] + "'",
                                        			$select: "Name"
                                        		});
                                        		let article_name;
                                        		if (articleJson.value != undefined && articleJson.value.length > 0) {
                                        			let part = articleJson.value[0];
                                        			article_name = articleJson.value[0].Name;
                                        		}
                                        		let id = generateGUID();
                                        
                                        		result.AddRow({
                                        			isSelected: "<input type=\"checkbox\" onClick=\"selectCheckbox('2')\">",
                                        			article_name: article_name,
                                        			article_number: articleNumberArray[i],
                                        			supplier_number: supplier_number,
                                        			supplier_name: supplier_name,
                                        			action: "<img style=\"cursor: pointer; padding-right:10px; \" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"legalReportingNavigation('root_mashupcontainer-17_ptcsbutton-234','" + articleNumberArray[i] + "#_#" + supplier_number + "#_#" + supplier_name + "#_#" + supplierNumber + "')\" />",
                                        		});
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getMarketType">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getMarketType -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.MarketTypeMaster.DataShape"
                                        });
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.MarketType.DataShape"
                                        });
                                        let selected = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.MarketType.DataShape"
                                        });
                                        
                                        try {
                                        	data = Things["IK.LegalReportingMarketRegIssuerRegulationName.DataTable"].QueryDataTableEntries({
                                        		maxItems: 1000
                                        	});
                                        
                                        	let localInfoTable = data;
                                        	let sort = {
                                        		name: "Market",
                                        		ascending: true
                                        	};
                                        	localInfoTable.Sort(sort);
                                        	data = localInfoTable;
                                        	if (isEdit) {
                                        		selected = selectedItem;
                                        	}
                                        	result.AddRow({
                                        		data: data,
                                        		selectedItem: selected
                                        	});
                                        	logger.info(FN + "executed successfully. isEdit[" + isEdit + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getOutputFormat">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getOutputFormat -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let newEntry = new Object();
                                        	result.AddRow({
                                        		item: "PDF"
                                        	});
                                        	result.AddRow({
                                        		item: "Web format"
                                        	});
                                        	result.AddRow({
                                        		item: "Excel[Detailed report]"
                                        	});
                                        	result.AddRow({
                                        		item: "Excel[Item-Sup list]"
                                        	});
                                        	logger.info(FN + "Output format displayed");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRegulationIssuer">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRegulationIssuer -> ";
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegIssuer.DataShape"
                                        });
                                        let selected = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegIssuer.DataShape"
                                        });
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegIssuerMaster.DataShape"
                                        });
                                        
                                        try {
                                        	if (Market != undefined) {
                                        		Market.rows.toArray().forEach(row => {
                                        			let params = {
                                        				t1: data /* INFOTABLE */ ,
                                        				t2: row.RegulationIssuer /* INFOTABLE */
                                        			};
                                        			data = Resources["InfoTableFunctions"].Union(params);
                                        		});
                                        
                                        		let params = {
                                        			t: data /* INFOTABLE */ ,
                                        			columns: "RegulationIssuer,RegulationName" /* STRING */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		data = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        		let localInfoTable = data;
                                        		let sort = {
                                        			name: "RegulationIssuer",
                                        			ascending: true
                                        		};
                                        		localInfoTable.Sort(sort);
                                        		data = localInfoTable;
                                        		if (isEdit) {
                                        			selected = selectedItem;
                                        		}
                                        		result.AddRow({
                                        			data: data,
                                        			selectedItem: selected
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully. market[" + Market.getRowCount() + "] isEdit[" + isEdit + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRegulationName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRegulationName -> ";
                                        let data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegName.DataShape"
                                        });
                                        let selected = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegName.DataShape"
                                        });
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegNameMaster.DataShape"
                                        });
                                        
                                        try {
                                        	if (RegulationIssuer != undefined) {
                                        		RegulationIssuer.rows.toArray().forEach(row => {
                                        			let params = {
                                        				t1: data /* INFOTABLE */ ,
                                        				t2: row.RegulationName /* INFOTABLE */
                                        			};
                                        			// result: INFOTABLE
                                        			data = Resources["InfoTableFunctions"].Union(params);
                                        		});
                                        
                                        		let params = {
                                        			t: data /* INFOTABLE */ ,
                                        			columns: "RegulationName" /* STRING */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		data = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        		let localInfoTable = data;
                                        		let sort = {
                                        			name: "RegulationName",
                                        			ascending: true
                                        		};
                                        		localInfoTable.Sort(sort);
                                        		data = localInfoTable;
                                        		if (isEdit) {
                                        			selected = selectedItem;
                                        		}
                                        		result.AddRow({
                                        			data: data,
                                        			selectedItem: selected
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully. RegulationIssuer[" + RegulationIssuer.getRowCount() + "] isEdit[" + isEdit + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getReportName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getReportName -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        try {
                                        	result.AddRow({
                                        		item: "Lacey"
                                        	});
                                        	result.AddRow({
                                        		item: "EUTR Origin"
                                        	});
                                        	result.AddRow({
                                        		item: "EUTR Audit"
                                        	});
                                        	result.AddRow({
                                        		item: "Botanical names"
                                        	});
                                        	result.AddRow({
                                        		item: "List of materials"
                                        	});
                                        	logger.info(FN + "executed successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getReportStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getReportStatus -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let newEntry = new Object();
                                        	result.AddRow({
                                        		item: "Complete"
                                        	});
                                        	result.AddRow({
                                        		item: "incomplete"
                                        	});
                                        	result.AddRow({
                                        		item: "Missing"
                                        	});
                                        	logger.info(FN + "executed successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="populateSavedSearchData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " populateSavedSearchData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.LegalReportingSavedSearch.DataShape"
                                        });
                                        let marketTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.MarketType.DataShape"
                                        });
                                        let regulationIssuerTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegIssuer.DataShape"
                                        });
                                        let regulationNameTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RegName.DataShape"
                                        });
                                        let reportStatusTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let data = Things[databaseConnector].fetchDetailsFromSaveSearch({
                                        		id: id
                                        	});
                                        
                                        	let marketArray = data.MARKET ? data.MARKET.split(",") : [];
                                        	for (let i = 0; i < marketArray.length; i++) {
                                        		marketTable.AddRow({
                                        			Market: marketArray[i]
                                        		});
                                        	}
                                        
                                        	let regulationIssuerArray = data.REGULATION_ISSUER ? data.REGULATION_ISSUER.split(",") : [];
                                        	for (let i = 0; i < regulationIssuerArray.length; i++) {
                                        		regulationIssuerTable.AddRow({
                                        			RegulationIssuer: regulationIssuerArray[i]
                                        		});
                                        	}
                                        
                                        	let regulationNameArray = data.REGULATION_NAME ? data.REGULATION_NAME.split(",") : [];
                                        	for (let i = 0; i < regulationNameArray.length; i++) {
                                        		regulationNameTable.AddRow({
                                        			RegulationName: regulationNameArray[i]
                                        		});
                                        	}
                                        
                                        	let reportStatusArray = data.REPORT_STATUS ? data.REPORT_STATUS.split(",") : [];
                                        	for (let i = 0; i < reportStatusArray.length; i++) {
                                        		reportStatusTable.AddRow({
                                        			item: reportStatusArray[i]
                                        		});
                                        	}
                                        
                                        
                                        
                                        	result.AddRow({
                                        		id: data.ID, // NUMBER
                                        		searchName: data.SEARCH_NAME_CRITERIA, // STRING
                                        		userName: data.USERNAME, // STRING
                                        		market: data.MARKET, // STRING
                                        		regulationIssuer: data.REGULATION_ISSUER, // STRING
                                        		regulationName: data.REGULATION_NAME, // STRING
                                        		articleNumber: data.ARTICLE_NUMBER, // STRING
                                        		articleName: data.ARTICLE_NAME, // STRING
                                        		supplierNameOrNumber: data.SUPPLIER_NAME_OR_NUMBER,
                                        		searchDate: data.SEARCH_DATE, // DATETIME
                                        		reportStatus: data.REPORT_STATUS,
                                        		created_timestamp: data.CREATED_TIMESTAMP, // DATETIME
                                        		usage: data.USAGE, // STRING
                                        		marketMultiSelect: marketTable,
                                        		regulationIssuerMultiSelect: regulationIssuerTable,
                                        		regulationNameMultiSelect: regulationNameTable,
                                        		reportStatusMultiSelect: reportStatusTable
                                        	});
                                        	logger.info(FN + "executed successfully. id[" + id + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="resetMarket">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.MarketType.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "IK.MarketType.DataShape"
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="resetRegIssuer">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.RegIssuer.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "IK.RegIssuer.DataShape"
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="resetRegName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.RegName.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "IK.RegName.DataShape"
                                        });
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="validatePopulateCompleted">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " validatePopulateCompleted -> ";
                                        
                                        try {
                                        	if (isEdit) {
                                        		let marketCount = market ? market.getRowCount() : 0;
                                        		let regIssuerCount = regulationIssuer ? regulationIssuer.getRowCount() : 0;
                                        		let regNameCount = regulationName ? regulationName.getRowCount() : 0;
                                        		if (marketCount == data.marketMultiSelect.getRowCount() && regIssuerCount == data.regulationIssuerMultiSelect.getRowCount() && regNameCount == data.regulationNameMultiSelect.getRowCount()) {
                                        			result = "Populate completed";
                                        		}
                                        		logger.info(FN + "service executed");
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
