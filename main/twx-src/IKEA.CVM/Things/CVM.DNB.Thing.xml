<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="CVM.DNB.Thing"
         projectName="IKEA.CVM"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables>
                <ConfigurationTable
                 dataShapeName=""
                 description=""
                 isMultiRow="false"
                 name="connectionSettings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.isPrimaryKey="true"
                             baseType="STRING"
                             description=""
                             name="apiBaseUrl"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isPrimaryKey="false"
                             baseType="STRING"
                             description=""
                             name="encodedAuthorizationString"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isPrimaryKey="false"
                             baseType="STRING"
                             description=""
                             name="token"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isPrimaryKey="false"
                             baseType="DATETIME"
                             description=""
                             name="tokenExpirationDate"
                             ordinal="4"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <apiBaseUrl></apiBaseUrl>
                            <encodedAuthorizationString>
                            <![CDATA[
                            MmIxY2I0YWI2ZDIzNGJmMjhhZGIzZDZmYmI1N2JkMzE0NGZjOTQyNWU1MjM0MjBjODIwZDRjOWE0NjU1N2FhNTo5MTU1YjU0NzU2NWQ0YzhlYjU2ZDcwNjE1NDdhZmJjOTBkYzE4YjFjNGU1YjRiYjE5YWE2OGEyYzdiNWU2ZWYz
                            ]]>
                            </encodedAuthorizationString>
                            <token>
                            <![CDATA[
                            179837V0K630Ux92ojOA36lccE7d
                            ]]>
                            </token>
                            <tokenExpirationDate>2024-02-20T07:06:13.433Z</tokenExpirationDate>
                        </Row>
                    </Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="companyCriteriaSearchAllParameters">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="1"
                             baseType="INTEGER"
                             description=""
                             name="page_number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="50"
                             baseType="INTEGER"
                             description=""
                             name="page_size"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="primary_name"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="companyTypeheadSearch">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchTerm"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="companyCriteriaSearchAllParameters">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // put api call in function so we can easily redo it if needed
                                        function callApi(url, headers, content) {
                                            me.CheckToken();
                                        
                                            let response = Resources["ContentLoaderFunctions"].PostJSON({
                                                headers: headers /* JSON */,
                                                url: url /* STRING */,
                                                content: content /* JSON */
                                            });
                                            
                                            return me.ProcessResponse({"response": response});
                                        }
                                        // need to encaspulate api json result else TWX slightly mess up with outputing it
                                        let result = {"result":{}};
                                        
                                        let url = "https://plus.dnb.com/v1/search/criteria";
                                        
                                        let headers = {
                                            "Authorization": "Bearer " + me.GetToken(),
                                            "Content-Type": "application/json"
                                        };
                                        
                                        let content = {
                                            "primaryName": primary_name,
                                            "pageNumber":page_number,
                                            "pageSize":page_size
                                            };
                                        
                                        let response = callApi(url, headers, content);
                                        
                                        // processing response for errors, most specific one is token expired to redo it
                                        if(response.redo) {
                                            response = callApi(url, headers, content);
                                        }
                                        
                                        result.result = response.result;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="companyTypeheadSearch">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // put api call in function so we can easily redo it if needed
                                        function callApi(url, headers) {
                                            me.CheckToken();
                                            
                                            let response = Resources["ContentLoaderFunctions"].GetJSON({
                                                headers: headers /* JSON */,
                                                url: url /* STRING */,
                                            });
                                            
                                            return me.ProcessResponse({"response": response});
                                        }
                                        
                                        // need to encaspulate api json result else TWX slightly mess up with outputing it
                                        let result = {"result":{}};
                                        
                                        // Test with seatch param = Gorman
                                        let url = "https://plus.dnb.com/v1/search/typeahead?searchTerm="+searchTerm+"&countryISOAlpha2Code=US";
                                        
                                        let headers = {
                                            "Authorization": "Bearer " + me.GetToken(),
                                            "Content-Type": "application/json"
                                        };
                                        
                                        let response = callApi(url, headers);
                                        
                                        // processing response for errors, most specific one is token expired to redo it
                                        if(response.redo) {
                                            response = callApi(url, headers);
                                        }
                                        
                                        result.result = response.result;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes>
                <ImplementedShape
                 name="CVM.DNB.ThingShape"
                 type="ThingShape"></ImplementedShape>
            </ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
