<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="IK.ComplianceDashboard.Thing"
         projectName="IKEA.CVM"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataForArticles">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tableHeader"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataForMaterials">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tableHeader"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataForParts">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tableHeader"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataForSubsuppliers">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tableHeader"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataForSupplyObjects">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tableHeader"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataForVerifications">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="tableHeader"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="exportDataToExcel">
                        <ResultType
                         aspect.dataShape="FileSystemFileWithLinks"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="fileName"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterArticles">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardCountItemsArticle.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboardCountItemsArticle.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="neverVerified"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="reVerification"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterMaterials">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardCountItemsMaterial.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboardCountItemsMaterial.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="neverVerified"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="reVerification"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterParts">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardCountItemsPart.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboardCountItemsPart.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="neverVerified"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="reVerification"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterSubSuppliers">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardSubsuppliersCount.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboardSubsuppliersCount.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="neverVerified"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="reVerification"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterSupplyObjects">
                        <ResultType
                         aspect.dataShape="CVM.ComplianceDashboardSupplyObjectsCount.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="CVM.ComplianceDashboardSupplyObjectsCount.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="neverVerified"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="reverified"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="filterVerifications">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardVerificationCount.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="neverVerified"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="reVerification"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getArticleCountDetails">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardCountItemsArticle.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="bomStructures"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="filterItem"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_ids"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getChartData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDasboardChartData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="grid_data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDataForDashboard">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboard.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDataForDashboard_v2">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboard.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDefaultSelection">
                        <ResultType
                         aspect.dataShape="CVM.RequirementListNavigation.DataShape"
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="InputForDashboard"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="selectedObject"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="selectedObjects"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getItemsCountForGridData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="bomStructures"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="state"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getMaterialCountDetails">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardCountItemsMaterial.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="bomStructures"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="filterItem"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_ids"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getNewItemsGridData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getOnHoldItemsGridData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getPartCountDetails">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardCountItemsPart.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="bomStructures"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="filterItem"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_ids"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRawDataForDashboard">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardRawData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="KETER ITALIA SPA"
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="KETER ITALIA SPA(15346)"
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRawDataForDashboardNew">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardRawData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="KETER ITALIA SPA"
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="KETER ITALIA SPA(15346)"
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRawDataForNewItems">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="10294528,10294529"
                             baseType="STRING"
                             description=""
                             name="article_ids"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.defaultValue="JIANGMEN  LI HUA INDUSTRY CO LTD(15540)"
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSavedSearch">
                        <ResultType
                         aspect.dataShape="IK.SavedSeach.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSubsuppliersCountDetails">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardSubsuppliersCount.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="bomStructures"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_ids"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSubSuppliersGridData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSupplyObjectsCountDetails">
                        <ResultType
                         aspect.dataShape="CVM.ComplianceDashboardSupplyObjectsCount.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             aspect.defaultValue="{&quot;rows&quot;:[{&quot;id_rvs&quot;:&quot;47019&quot;,&quot;id_article&quot;:&quot;10294404&quot;,&quot;supplyActor&quot;:&quot;sa1&quot;,&quot;supply_object_name&quot;:&quot;sn1&quot;,&quot;id_supply_object&quot;:&quot;so1&quot;,&quot;order&quot;:1},{&quot;id_rvs&quot;:&quot;47025&quot;,&quot;id_article&quot;:&quot;10294405&quot;,&quot;supplyActor&quot;:&quot;sa2&quot;,&quot;supply_object_name&quot;:&quot;sn2&quot;,&quot;id_supply_object&quot;:&quot;so1&quot;,&quot;order&quot;:2}],&quot;dataShape&quot;:{&quot;fieldDefinitions&quot;:{&quot;days_left&quot;:{&quot;name&quot;:&quot;days_left&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;NUMBER&quot;,&quot;ordinal&quot;:12},&quot;object_type&quot;:{&quot;name&quot;:&quot;object_type&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:8},&quot;deadlineDate&quot;:{&quot;name&quot;:&quot;deadlineDate&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;DATETIME&quot;,&quot;ordinal&quot;:15},&quot;verification_type&quot;:{&quot;name&quot;:&quot;verification_type&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:10},&quot;type&quot;:{&quot;name&quot;:&quot;type&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:11},&quot;is_verified&quot;:{&quot;name&quot;:&quot;is_verified&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;BOOLEAN&quot;,&quot;ordinal&quot;:5},&quot;id_rvs&quot;:{&quot;name&quot;:&quot;id_rvs&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:2},&quot;id_article&quot;:{&quot;name&quot;:&quot;id_article&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:1},&quot;child_number&quot;:{&quot;name&quot;:&quot;child_number&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:9},&quot;is_delegated&quot;:{&quot;name&quot;:&quot;is_delegated&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;BOOLEAN&quot;,&quot;ordinal&quot;:6},&quot;id_rvs_verified&quot;:{&quot;name&quot;:&quot;id_rvs_verified&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:3},&quot;supplyActor&quot;:{&quot;name&quot;:&quot;supplyActor&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:16},&quot;requirement_title&quot;:{&quot;name&quot;:&quot;requirement_title&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:17},&quot;supply_object_name&quot;:{&quot;name&quot;:&quot;supply_object_name&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:18},&quot;sub_supplier&quot;:{&quot;name&quot;:&quot;sub_supplier&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:7},&quot;id_supply_object&quot;:{&quot;name&quot;:&quot;id_supply_object&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:13},&quot;reporting_object&quot;:{&quot;name&quot;:&quot;reporting_object&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;BOOLEAN&quot;,&quot;ordinal&quot;:4},&quot;order&quot;:{&quot;name&quot;:&quot;order&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:false},&quot;description&quot;:&quot;&quot;,&quot;baseType&quot;:&quot;INTEGER&quot;,&quot;ordinal&quot;:14}}}}"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             aspect.defaultValue="{&quot;rows&quot;:[{&quot;item&quot;:&quot;so1&quot;},{&quot;item&quot;:&quot;so2&quot;}],&quot;dataShape&quot;:{&quot;fieldDefinitions&quot;:{&quot;item&quot;:{&quot;name&quot;:&quot;item&quot;,&quot;aspects&quot;:{&quot;isPrimaryKey&quot;:true},&quot;description&quot;:&quot;Item&quot;,&quot;baseType&quot;:&quot;STRING&quot;,&quot;ordinal&quot;:0}}}}"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_ids"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSupplyObjectsGridData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getVerificationCountDetails">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardVerificationCount.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="bomStructures"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="description"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="filterItem"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="requirements"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_ids"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getVerificationCountGridData">
                        <ResultType
                         aspect.dataShape="IK.ComplianceDashboardData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="article"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboard.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="material"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="part"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="tier1"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="tier2plus"
                             ordinal="6"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="parseInfotableToArticleString">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.ComplianceDashboardCountItemsArticle.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="input"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataForArticles">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataForArticles -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	tableHeader = tableHeader.includes("<") ? tableHeader.replace("<", "less than ") : tableHeader.includes(">") ? tableHeader.replace(">", "greater than ") : tableHeader;
                                        	tableHeader = tableHeader.includes("-") ? tableHeader.replace("- ", "").split(" ").join("_") : tableHeader.split(" ").join("_");
                                        	var params = {
                                        		infoTableName: "ITName" /* STRING */
                                        	};
                                        	// result: INFOTABLE
                                        	var info = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        	//Add a new field to the InfoTable:
                                        	info.AddField({
                                        		name: "Article number",
                                        		baseType: "STRING",
                                        		ordinal: 1
                                        	});
                                        	info.AddField({
                                        		name: "Article name",
                                        		baseType: "STRING",
                                        		ordinal: 2
                                        	});
                                        	info.AddField({
                                        		name: "Supplier number",
                                        		baseType: "STRING",
                                        		ordinal: 3
                                        	});
                                        	info.AddField({
                                        		name: "Materials",
                                        		baseType: "STRING",
                                        		ordinal: 4
                                        	});
                                        	info.AddField({
                                        		name: "Parts",
                                        		baseType: "STRING",
                                        		ordinal: 5
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >90 days",
                                        		baseType: "STRING",
                                        		ordinal: 6
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >30 days",
                                        		baseType: "STRING",
                                        		ordinal: 7
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline <30 days",
                                        		baseType: "STRING",
                                        		ordinal: 8
                                        	});
                                        	info.AddField({
                                        		name: "Verifications (Overdue)",
                                        		baseType: "STRING",
                                        		ordinal: 9
                                        	});
                                        	info.AddField({
                                        		name: "Type of verification",
                                        		baseType: "STRING",
                                        		ordinal: 10
                                        	});
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let newEntry = new Object();
                                        		newEntry["Article number"] = row.article_number;
                                        		newEntry["Article name"] = row.article_name;
                                        		newEntry["Supplier number"] = row.supplier_number;
                                        		newEntry["Materials"] = row.materials.includes("<") ? row.materials.substring(row.materials.indexOf(">") + 1, row.materials.lastIndexOf("<")) : row.materials;
                                        		newEntry["Parts"] = row.parts.includes("<") ? row.parts.substring(row.parts.indexOf(">") + 1, row.parts.lastIndexOf("<")) : row.parts;
                                        		newEntry["Verification deadline >90 days"] = row.expires_greater_than_90.includes("<") ? row.expires_greater_than_90.substring(row.expires_greater_than_90.indexOf("\">") + 2, row.expires_greater_than_90.lastIndexOf("<")) : row.expires_greater_than_90;
                                        		newEntry["Verification deadline >30 days"] = row.expires_within_30_90.includes("<") ? row.expires_within_30_90.substring(row.expires_within_30_90.indexOf(">") + 1, row.expires_within_30_90.lastIndexOf("<")) : row.expires_within_30_90;
                                        		newEntry["Verification deadline <30 days"] = row.expires_less_than_30.includes("<") ? row.expires_less_than_30.substring(row.expires_less_than_30.indexOf(">") + 1, row.expires_less_than_30.lastIndexOf("<")) : row.expires_less_than_30;
                                        		newEntry["Verifications (Overdue)"] = row.expired.includes("<") ? row.expired.substring(row.expired.indexOf(">") + 1, row.expired.lastIndexOf("<")) : row.expired;
                                        		newEntry["Type of verification"] = row.reverification ? "Reverification" : "Never verified";
                                        		info.AddRow(newEntry);
                                        	}
                                        	result = me.exportDataToExcel({
                                        		data: info /* INFOTABLE */ ,
                                        		fileName: tableHeader /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully filename[" + tableHeader + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataForMaterials">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataForMaterials -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	tableHeader = tableHeader.includes("<") ? tableHeader.replace("<", "less than ") : tableHeader.includes(">") ? tableHeader.replace(">", "greater than ") : tableHeader;
                                        	tableHeader = tableHeader.includes("-") ? tableHeader.replace("- ", "").split(" ").join("_") : tableHeader.split(" ").join("_");
                                        	var params = {
                                        		infoTableName: "ITName" /* STRING */
                                        	};
                                        	// result: INFOTABLE
                                        	var info = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        	//Add a new field to the InfoTable:
                                        	info.AddField({
                                        		name: "Material ID",
                                        		baseType: "STRING",
                                        		ordinal: 1
                                        	});
                                        	info.AddField({
                                        		name: "Material name",
                                        		baseType: "STRING",
                                        		ordinal: 2
                                        	});
                                        	info.AddField({
                                        		name: "Sub supplier",
                                        		baseType: "STRING",
                                        		ordinal: 3
                                        	});
                                        	info.AddField({
                                        		name: "Parts",
                                        		baseType: "STRING",
                                        		ordinal: 4
                                        	});
                                        	info.AddField({
                                        		name: "Articles",
                                        		baseType: "STRING",
                                        		ordinal: 5
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >90 days",
                                        		baseType: "STRING",
                                        		ordinal: 6
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >30 days",
                                        		baseType: "STRING",
                                        		ordinal: 7
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline <30 days",
                                        		baseType: "STRING",
                                        		ordinal: 8
                                        	});
                                        	info.AddField({
                                        		name: "Verifications (Overdue)",
                                        		baseType: "STRING",
                                        		ordinal: 9
                                        	});
                                        	info.AddField({
                                        		name: "Type of verification",
                                        		baseType: "STRING",
                                        		ordinal: 10
                                        	});
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let newEntry = new Object();
                                        		newEntry["Material ID"] = row.material_id;
                                        		newEntry["Material name"] = row.material_name;
                                        		newEntry["Sub supplier"] = row.sub_supplier;
                                        		newEntry["Parts"] = row.parts.includes("<") ? row.parts.substring(row.parts.indexOf(">") + 1, row.parts.lastIndexOf("<")) : row.parts;
                                        		newEntry["Articles"] = row.articles.includes("<") ? row.articles.substring(row.articles.indexOf(">") + 1, row.articles.lastIndexOf("<")) : row.articles;
                                        		newEntry["Verification deadline >90 days"] = row.expires_greater_than_90.includes("<") ? row.expires_greater_than_90.substring(row.expires_greater_than_90.indexOf("\">") + 2, row.expires_greater_than_90.lastIndexOf("<")) : row.expires_greater_than_90;
                                        		newEntry["Verification deadline >30 days"] = row.expires_within_30_90.includes("<") ? row.expires_within_30_90.substring(row.expires_within_30_90.indexOf(">") + 1, row.expires_within_30_90.lastIndexOf("<")) : row.expires_within_30_90;
                                        		newEntry["Verification deadline <30 days"] = row.expires_less_than_30.includes("<") ? row.expires_less_than_30.substring(row.expires_less_than_30.indexOf(">") + 1, row.expires_less_than_30.lastIndexOf("<")) : row.expires_less_than_30;
                                        		newEntry["Verifications (Overdue)"] = row.expired.includes("<") ? row.expired.substring(row.expired.indexOf(">") + 1, row.expired.lastIndexOf("<")) : row.expired;
                                        		newEntry["Type of verification"] = row.reverification ? "Reverification" : "Never verified";
                                        		info.AddRow(newEntry);
                                        	}
                                        	result = me.exportDataToExcel({
                                        		data: info /* INFOTABLE */ ,
                                        		fileName: tableHeader /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully filename[" + tableHeader + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataForParts">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataForParts -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	tableHeader = tableHeader.includes("<") ? tableHeader.replace("<", "less than ") : tableHeader.includes(">") ? tableHeader.replace(">", "greater than ") : tableHeader;
                                        	tableHeader = tableHeader.includes("-") ? tableHeader.replace("- ", "").split(" ").join("_") : tableHeader.split(" ").join("_");
                                        	var params = {
                                        		infoTableName: "ITName" /* STRING */
                                        	};
                                        	// result: INFOTABLE
                                        	var info = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        	//Add a new field to the InfoTable:
                                        	info.AddField({
                                        		name: "Part ID",
                                        		baseType: "STRING",
                                        		ordinal: 1
                                        	});
                                        	info.AddField({
                                        		name: "Part name",
                                        		baseType: "STRING",
                                        		ordinal: 2
                                        	});
                                        	info.AddField({
                                        		name: "Sub supplier",
                                        		baseType: "STRING",
                                        		ordinal: 3
                                        	});
                                        	info.AddField({
                                        		name: "Materials",
                                        		baseType: "STRING",
                                        		ordinal: 4
                                        	});
                                        	info.AddField({
                                        		name: "Articles",
                                        		baseType: "STRING",
                                        		ordinal: 5
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >90 days",
                                        		baseType: "STRING",
                                        		ordinal: 6
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >30 days",
                                        		baseType: "STRING",
                                        		ordinal: 7
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline <30 days",
                                        		baseType: "STRING",
                                        		ordinal: 8
                                        	});
                                        	info.AddField({
                                        		name: "Verifications (Overdue)",
                                        		baseType: "STRING",
                                        		ordinal: 9
                                        	});
                                        	info.AddField({
                                        		name: "Type of verification",
                                        		baseType: "STRING",
                                        		ordinal: 10
                                        	});
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let newEntry = new Object();
                                        		newEntry["Part ID"] = row.part_id;
                                        		newEntry["Part name"] = row.part_name;
                                        		newEntry["Sub supplier"] = row.sub_supplier;
                                        		newEntry["Materials"] = row.materials.includes("<") ? row.materials.substring(row.materials.indexOf(">") + 1, row.materials.lastIndexOf("<")) : row.materials;
                                        		newEntry["Articles"] = row.articles.includes("<") ? row.articles.substring(row.articles.indexOf(">") + 1, row.articles.lastIndexOf("<")) : row.articles;
                                        		newEntry["Verification deadline >90 days"] = row.expires_greater_than_90.includes("<") ? row.expires_greater_than_90.substring(row.expires_greater_than_90.indexOf("\">") + 2, row.expires_greater_than_90.lastIndexOf("<")) : row.expires_greater_than_90;
                                        		newEntry["Verification deadline >30 days"] = row.expires_within_30_90.includes("<") ? row.expires_within_30_90.substring(row.expires_within_30_90.indexOf(">") + 1, row.expires_within_30_90.lastIndexOf("<")) : row.expires_within_30_90;
                                        		newEntry["Verification deadline <30 days"] = row.expires_less_than_30.includes("<") ? row.expires_less_than_30.substring(row.expires_less_than_30.indexOf(">") + 1, row.expires_less_than_30.lastIndexOf("<")) : row.expires_less_than_30;
                                        		newEntry["Verifications (Overdue)"] = row.expired.includes("<") ? row.expired.substring(row.expired.indexOf(">") + 1, row.expired.lastIndexOf("<")) : row.expired;
                                        		newEntry["Type of verification"] = row.reverification ? "Reverification" : "Never verified";
                                        		info.AddRow(newEntry);
                                        	}
                                        	result = me.exportDataToExcel({
                                        		data: info /* INFOTABLE */ ,
                                        		fileName: tableHeader /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully filename[" + tableHeader + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataForSubsuppliers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataForSubsuppliers -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	tableHeader = tableHeader.includes("<") ? tableHeader.slice(0, tableHeader.indexOf("<")) + "less than " + tableHeader.slice(tableHeader.indexOf("<") + 1) : tableHeader.includes(">") ? tableHeader.slice(0, tableHeader.indexOf(">")) + "greater than " + tableHeader.slice(tableHeader.indexOf(">") + 1) : tableHeader;
                                        	tableHeader = tableHeader.includes("-") ? tableHeader.replace("- ", "").split(" ").join("_") : tableHeader.split(" ").join("_");
                                        	var params = {
                                        		infoTableName: "ITName" /* STRING */
                                        	};
                                        	// result: INFOTABLE
                                        	var info = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        	//Add a new field to the InfoTable:
                                        	info.AddField({
                                        		name: "Sub-supplier ID",
                                        		baseType: "STRING",
                                        		ordinal: 1
                                        	});
                                        	info.AddField({
                                        		name: "Sub-supplier name",
                                        		baseType: "STRING",
                                        		ordinal: 2
                                        	});
                                        	info.AddField({
                                        		name: "Tier number",
                                        		baseType: "STRING",
                                        		ordinal: 3
                                        	});
                                        	info.AddField({
                                        		name: "Articles",
                                        		baseType: "STRING",
                                        		ordinal: 4
                                        	});
                                        	info.AddField({
                                        		name: "Parts",
                                        		baseType: "STRING",
                                        		ordinal: 5
                                        	});
                                        	info.AddField({
                                        		name: "Materials",
                                        		baseType: "STRING",
                                        		ordinal: 6
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >90 days",
                                        		baseType: "STRING",
                                        		ordinal: 7
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >30 days",
                                        		baseType: "STRING",
                                        		ordinal: 8
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline <30 days",
                                        		baseType: "STRING",
                                        		ordinal: 9
                                        	});
                                        	info.AddField({
                                        		name: "Verifications (Overdue)",
                                        		baseType: "STRING",
                                        		ordinal: 10
                                        	});
                                        	info.AddField({
                                        		name: "Type of verification",
                                        		baseType: "STRING",
                                        		ordinal: 11
                                        	});
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let newEntry = new Object();
                                        		newEntry["Sub-supplier ID"] = row.subsupplier_id;
                                        		newEntry["Sub-supplier name"] = row.subsupplier_name;
                                        		newEntry["Tier number"] = row.tier_number;
                                        		newEntry["Articles"] = row.articles.includes("<") ? row.articles.substring(row.articles.indexOf(">") + 1, row.articles.lastIndexOf("<")) : row.articles;
                                        		newEntry["Parts"] = row.parts.includes("<") ? row.parts.substring(row.parts.indexOf(">") + 1, row.parts.lastIndexOf("<")) : row.parts;
                                        		newEntry["Materials"] = row.materials.includes("<") ? row.materials.substring(row.materials.indexOf(">") + 1, row.materials.lastIndexOf("<")) : row.materials;
                                        		newEntry["Verification deadline >90 days"] = row.expires_greater_than_90.includes("<") ? row.expires_greater_than_90.substring(row.expires_greater_than_90.indexOf("\">") + 2, row.expires_greater_than_90.lastIndexOf("<")) : row.expires_greater_than_90;
                                        		newEntry["Verification deadline >30 days"] = row.expires_within_30_90.includes("<") ? row.expires_within_30_90.substring(row.expires_within_30_90.indexOf(">") + 1, row.expires_within_30_90.lastIndexOf("<")) : row.expires_within_30_90;
                                        		newEntry["Verification deadline <30 days"] = row.expires_less_than_30.includes("<") ? row.expires_less_than_30.substring(row.expires_less_than_30.indexOf(">") + 1, row.expires_less_than_30.lastIndexOf("<")) : row.expires_less_than_30;
                                        		newEntry["Verifications (Overdue)"] = row.expired.includes("<") ? row.expired.substring(row.expired.indexOf(">") + 1, row.expired.lastIndexOf("<")) : row.expired;
                                        		newEntry["Type of verification"] = row.reverification ? "Reverification" : "Never verified";
                                        		info.AddRow(newEntry);
                                        	}
                                        	result = me.exportDataToExcel({
                                        		data: info /* INFOTABLE */ ,
                                        		fileName: tableHeader /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully filename[" + tableHeader + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataForSupplyObjects">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataForSupplyObjects -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	tableHeader = tableHeader.includes("<") ? tableHeader.replace("<", "less than ") : tableHeader.includes(">") ? tableHeader.replace(">", "greater than ") : tableHeader;
                                        	tableHeader = tableHeader.includes("-") ? tableHeader.replace("- ", "").split(" ").join("_") : tableHeader.split(" ").join("_");
                                        	var params = {
                                        		infoTableName: "ITName" /* STRING */
                                        	};
                                        	// result: INFOTABLE
                                        	var info = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        	//Add a new field to the InfoTable:
                                        	info.AddField({
                                        		name: "Supply object ID",
                                        		baseType: "STRING",
                                        		ordinal: 1
                                        	});
                                        	info.AddField({
                                        		name: "Supply object name",
                                        		baseType: "STRING",
                                        		ordinal: 2
                                        	});
                                        	info.AddField({
                                        		name: "Supply actor name",
                                        		baseType: "STRING",
                                        		ordinal: 3
                                        	});
                                        	info.AddField({
                                        		name: "Articles connected",
                                        		baseType: "STRING",
                                        		ordinal: 4
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >90 days",
                                        		baseType: "STRING",
                                        		ordinal: 5
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline >30 days",
                                        		baseType: "STRING",
                                        		ordinal: 6
                                        	});
                                        	info.AddField({
                                        		name: "Verification deadline <30 days",
                                        		baseType: "STRING",
                                        		ordinal: 7
                                        	});
                                        	info.AddField({
                                        		name: "Verifications(Overdue)",
                                        		baseType: "STRING",
                                        		ordinal: 8
                                        	});
                                        	info.AddField({
                                        		name: "Type of verification",
                                        		baseType: "STRING",
                                        		ordinal: 9
                                        	});
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let newEntry = new Object();
                                        		newEntry["Supply object ID"] = row.supply_object_id;
                                        		newEntry["Supply object name"] = row.supply_object_name;
                                        		newEntry["Supply actor name"] = row.supply_actor_name;
                                        		newEntry["Articles connected"] = row.articles.includes("<") ?row.articles.substring(row.articles.indexOf(">") + 1, row.articles.lastIndexOf("<")) : row.articles;
                                        		newEntry["Verification deadline >90 days"] = row.expires_greater_than_90.includes("<") ? row.expires_greater_than_90.substring(row.expires_greater_than_90.indexOf("\">") + 2, row.expires_greater_than_90.lastIndexOf("<")) : row.expires_greater_than_90;
                                        		newEntry["Verification deadline >30 days"] = row.expires_within_30_90.includes("<") ?row.expires_within_30_90.substring(row.expires_within_30_90.indexOf(">") + 1, row.expires_within_30_90.lastIndexOf("<")) : row.expires_within_30_90;
                                        		newEntry["Verification deadline <30 days"] = row.expires_less_than_30.includes("<") ?row.expires_less_than_30.substring(row.expires_less_than_30.indexOf(">") + 1, row.expires_less_than_30.lastIndexOf("<")) : row.expires_less_than_30;
                                        		newEntry["Verifications(Overdue)"] = row.expired.includes("<") ?row.expired.substring(row.expired.indexOf(">") + 1, row.expired.lastIndexOf("<")) : row.expired;
                                        		newEntry["Type of verification"] = row.reverification ? "Reverification" : "Never verified";
                                        		info.AddRow(newEntry);
                                        	}
                                        	result = me.exportDataToExcel({
                                        		data: info /* INFOTABLE */ ,
                                        		fileName: tableHeader /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully filename[" + tableHeader + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataForVerifications">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataForVerifications -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	tableHeader = tableHeader.includes("<") ? tableHeader.replace("<", "less than ") : tableHeader.includes(">") ? tableHeader.replace(">", "greater than ") : tableHeader;
                                        	tableHeader = tableHeader.includes("-") ? tableHeader.replace("- ", "").split(" ").join("_") : tableHeader.split(" ").join("_");
                                        	var params = {
                                        		infoTableName: "ITName" /* STRING */
                                        	};
                                        	// result: INFOTABLE
                                        	var info = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        	//Add a new field to the InfoTable:
                                        	info.AddField({
                                        		name: "Verification ID",
                                        		baseType: "STRING",
                                        		ordinal: 1
                                        	});
                                        	info.AddField({
                                        		name: "Verification name",
                                        		baseType: "STRING",
                                        		ordinal: 2
                                        	});
                                        	info.AddField({
                                        		name: "Status",
                                        		baseType: "STRING",
                                        		ordinal: 3
                                        	});
                                        	info.AddField({
                                        		name: "Verifications datatype",
                                        		baseType: "STRING",
                                        		ordinal: 4
                                        	});
                                        	info.AddField({
                                        		name: "Verifications deadline",
                                        		baseType: "STRING",
                                        		ordinal: 5
                                        	});
                                        	info.AddField({
                                        		name: "Materials",
                                        		baseType: "STRING",
                                        		ordinal: 6
                                        	});
                                        	info.AddField({
                                        		name: "Parts",
                                        		baseType: "STRING",
                                        		ordinal: 7
                                        	});
                                        	info.AddField({
                                        		name: "Articles",
                                        		baseType: "STRING",
                                        		ordinal: 8
                                        	});
                                        	info.AddField({
                                        		name: "Type of verification",
                                        		baseType: "STRING",
                                        		ordinal: 9
                                        	});
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let newEntry = new Object();
                                        		newEntry["Verification ID"] = row.verification_id;
                                        		newEntry["Verification name"] = row.verification_name;
                                        		newEntry["Status"] = row.status.slice(row.status.indexOf(">") + 2);
                                        		newEntry["Verifications datatype"] = row.verification_datatype;
                                        		newEntry["Verifications deadline"] = row.verification_deadline;
                                        		newEntry["Materials"] = row.materials.includes("<") ? row.materials.substring(row.materials.indexOf(">") + 1, row.materials.lastIndexOf("<")) : row.materials;
                                        		newEntry["Parts"] = row.parts.includes("<") ? row.parts.substring(row.parts.indexOf(">") + 1, row.parts.lastIndexOf("<")) : row.parts;
                                        		newEntry["Articles"] = row.articles.includes("<") ? row.articles.substring(row.articles.indexOf(">") + 1, row.articles.lastIndexOf("<")) : row.articles;
                                        		newEntry["Type of verification"] = row.reverification ? "Reverification" : "Never verified";
                                        		info.AddRow(newEntry);
                                        	}
                                        	result = me.exportDataToExcel({
                                        		data: info /* INFOTABLE */ ,
                                        		fileName: tableHeader /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully filename[" + tableHeader + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="exportDataToExcel">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " exportDataToExcel -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "FileSystemFileWithLinks"
                                        });
                                        
                                        try {
                                        	let sdf = "MM-dd-yyyy_HH-mm-ss(ZZZ)";
                                        	let dateValue = new Date();
                                        	let formattedDate = dateFormat(dateValue, sdf);
                                        	let username = Resources["CurrentSessionInfo"].GetCurrentUser();
                                        	let fullFileName = fileName + "_" + username + "_" + formattedDate + ".xlsx";
                                        
                                        	let pathAndFileName = "/CVM/Dashboard/" + fullFileName;
                                        	let excelPathAndFileName = Things["IK.ExcelGeneration.Thing"].ExportInfotableToExcel({
                                        		repository: "CustomFileRepoistory" /* THINGNAME */ ,
                                        		pathAndFileName: pathAndFileName /* STRING */ ,
                                        		sheetName: "Data" /* STRING */ ,
                                        		data: data /* INFOTABLE */
                                        	});
                                        
                                        	result = Things["CustomFileRepoistory"].GetFileListingWithLinks({
                                        		path: "/CVM/Dashboard/" /* STRING */ ,
                                        		nameMask: fullFileName /* STRING */
                                        	});
                                        	logger.info(FN + "executed successfully. Filename [" + fileName + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterArticles">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterArticles -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsArticle.DataShape"
                                        });
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsArticle.DataShape"
                                        });
                                        
                                        try {
                                        	if ((neverVerified && !reVerification) || (reVerification && !neverVerified)) {
                                        		let verificationQuery;
                                        		if (reVerification) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": true
                                        				}
                                        			};
                                        		} else if (neverVerified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": false
                                        				}
                                        			};
                                        		}
                                        		let params1 = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: verificationQuery /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		info = Resources["InfoTableFunctions"].Query(params1);
                                        
                                        	} else if (neverVerified && reVerification) {
                                        		info = data;
                                        	}
                                        
                                        	if (searchText) {
                                        		let filter = [{
                                        			"type": "LIKE",
                                        			"fieldName": "article_number",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "article_name",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "supplier_number",
                                        			"value": "%" + searchText + "%"
                                        		}];
                                        		let query = {
                                        			"filters": {
                                        				"filters": filter,
                                        				"type": "OR"
                                        			}
                                        		};
                                        
                                        		let params = {
                                        			t: info /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        	} else {
                                        		result = info;
                                        	}
                                        	logger.info(FN + "executed for search text [" + searchText + "] never verified [" + neverVerified + "] reverification [" + reVerification + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterMaterials">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterMaterials -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsMaterial.DataShape"
                                        });
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsMaterial.DataShape"
                                        });
                                        
                                        try {
                                        	if ((neverVerified && !reVerification) || (reVerification && !neverVerified)) {
                                        		let verificationQuery;
                                        		if (reVerification) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": true
                                        				}
                                        			};
                                        		} else if (neverVerified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": false
                                        				}
                                        			};
                                        		}
                                        		let params1 = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: verificationQuery /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		info = Resources["InfoTableFunctions"].Query(params1);
                                        	} else if (neverVerified && reVerification) {
                                        		info = data;
                                        	}
                                        
                                        	if (searchText) {
                                        		let filter = [{
                                        			"type": "LIKE",
                                        			"fieldName": "material_id",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "material_name",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "sub_supplier",
                                        			"value": "%" + searchText + "%"
                                        		}];
                                        		let query = {
                                        			"filters": {
                                        				"filters": filter,
                                        				"type": "OR"
                                        			}
                                        		};
                                        
                                        		let params = {
                                        			t: info /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        	} else {
                                        		result = info;
                                        	}
                                        	logger.info(FN + "executed for search text [" + searchText + "] never verified [" + neverVerified + "] reverification [" + reVerification + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterParts">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterParts -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsPart.DataShape"
                                        });
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsPart.DataShape"
                                        });
                                        
                                        try {
                                        	if ((neverVerified && !reVerification) || (reVerification && !neverVerified)) {
                                        		let verificationQuery;
                                        		if (reVerification) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": true
                                        				}
                                        			};
                                        		} else if (neverVerified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": false
                                        				}
                                        			};
                                        		}
                                        		let params1 = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: verificationQuery /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		info = Resources["InfoTableFunctions"].Query(params1);
                                        	} else if (neverVerified && reVerification) {
                                        		info = data;
                                        	}
                                        
                                        	if (searchText) {
                                        		let filter = [{
                                        			"type": "LIKE",
                                        			"fieldName": "part_id",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "part_name",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "sub_supplier",
                                        			"value": "%" + searchText + "%"
                                        		}];
                                        		let query = {
                                        			"filters": {
                                        				"filters": filter,
                                        				"type": "OR"
                                        			}
                                        		};
                                        
                                        		let params = {
                                        			t: info /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        	} else {
                                        		result = info;
                                        	}
                                        	logger.info(FN + "executed for search text [" + searchText + "] never verified [" + neverVerified + "] reverification [" + reVerification + "]");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterSubSuppliers">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterSubSuppliers -> ";
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.ComplianceDashboardSubsuppliersCount.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardSubsuppliersCount.DataShape"
                                        });
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardSubsuppliersCount.DataShape"
                                        });
                                        try {
                                        	if ((neverVerified && !reVerification) || (reVerification && !neverVerified)) {
                                        		let verificationQuery;
                                        		if (reVerification) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": true
                                        				}
                                        			};
                                        		} else if (neverVerified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": false
                                        				}
                                        			};
                                        		}
                                        		let params1 = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: verificationQuery /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		info = Resources["InfoTableFunctions"].Query(params1);
                                        	} else if (neverVerified && reVerification) {
                                        		info = data;
                                        	}
                                        
                                        	if (searchText) {
                                        		let filter = [{
                                        			"type": "LIKE",
                                        			"fieldName": "subsupplier_id",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "subsupplier_name",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "tier_number",
                                        			"value": "%" + searchText + "%"
                                        		}];
                                        		let query = {
                                        			"filters": {
                                        				"filters": filter,
                                        				"type": "OR"
                                        			}
                                        		};
                                        
                                        		let params = {
                                        			t: info /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        	} else {
                                        		result = info;
                                        	}
                                        	logger.info(FN + "executed for search text [" + searchText + "] never verified [" + neverVerified + "] reverification [" + reVerification + "]");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterSupplyObjects">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterSupplyObjects -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "CVM.ComplianceDashboardSupplyObjectsCount.DataShape"
                                        });
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "CVM.ComplianceDashboardSupplyObjectsCount.DataShape"
                                        });
                                        
                                        try {
                                        	if ((neverVerified && !reverified) || (reverified && !neverVerified)) {
                                        		let verificationQuery;
                                        		if (reverified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": true
                                        				}
                                        			};
                                        		} else if (neverVerified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": false
                                        				}
                                        			};
                                        		}
                                        		let params1 = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: verificationQuery /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		info = Resources["InfoTableFunctions"].Query(params1);
                                        	} else if (neverVerified && reverified) {
                                        		info = data;
                                        	}
                                        
                                        	if (searchText) {
                                        		let filter = [{
                                        			"type": "LIKE",
                                        			"fieldName": "supply_object_id",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "supply_object_name",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "supply_actor_name",
                                        			"value": "%" + searchText + "%"
                                        		}];
                                        		let query = {
                                        			"filters": {
                                        				"filters": filter,
                                        				"type": "OR"
                                        			}
                                        		};
                                        
                                        		let params = {
                                        			t: info /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        	} else {
                                        		result = info;
                                        	}
                                        	logger.info(FN + "executed for search text [" + searchText + "] never verified [" + neverVerified + "] reverification [" + reverified + "]");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="filterVerifications">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " filterVerifications -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardVerificationCount.DataShape"
                                        });
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardVerificationCount.DataShape"
                                        });
                                        
                                        try {
                                        	if ((neverVerified && !reVerification) || (reVerification && !neverVerified)) {
                                        		let verificationQuery;
                                        		if (reVerification) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": true
                                        				}
                                        			};
                                        		} else if (neverVerified) {
                                        			verificationQuery = {
                                        				"filters": {
                                        					"type": "EQ",
                                        					"fieldName": "reverification",
                                        					"value": false
                                        				}
                                        			};
                                        		}
                                        		let params1 = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: verificationQuery /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		info = Resources["InfoTableFunctions"].Query(params1);
                                        	} else if (neverVerified && reVerification) {
                                        		info = data;
                                        	}
                                        
                                        	if (searchText) {
                                        		let filter = [{
                                        			"type": "LIKE",
                                        			"fieldName": "verification_id",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "verification_name",
                                        			"value": "%" + searchText + "%"
                                        		}, {
                                        			"type": "LIKE",
                                        			"fieldName": "verification_datatype",
                                        			"value": "%" + searchText + "%"
                                        		}];
                                        		let query = {
                                        			"filters": {
                                        				"filters": filter,
                                        				"type": "OR"
                                        			}
                                        		};
                                        
                                        		let params = {
                                        			t: info /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        	} else {
                                        		result = info;
                                        	}
                                        	logger.info(FN + "executed for search text [" + searchText + "] never verified [" + neverVerified + "] reverification [" + reVerification + "]");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getArticleCountDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getArticleCountDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsArticle.DataShape"
                                        });
                                        let ids = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let databaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        try {
                                        	let boms = JSON.parse(bomStructures).boms;
                                        	let filterInPopups = false;
                                        	let partToRequirement = {};
                                        	if (filterItem) {
                                        		let input = filterItem.split("#_#");
                                        		filterInPopups = true;
                                        		if (input[1] == "Verification") {
                                        			let id_rvs = input[0];
                                        			let articles = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.id_rvs == id_rvs) {
                                        					let articlesIds = reqRow.id_article.split(",");
                                        					for (let j = 0; j < articlesIds.length; j++) {
                                        						if (!articles.includes(articlesIds[j])) {
                                        							articles.push(articlesIds[j]);
                                        							ids.AddRow({
                                        								item: articlesIds[j]
                                        							});
                                        						}
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Subsuppliers") {
                                        			let sub_supplier = input[0];
                                        			let articles = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.sub_supplier == sub_supplier) {
                                        					let articlesIds = reqRow.id_article.split(",");
                                        					for (let j = 0; j < articlesIds.length; j++) {
                                        						if (!articles.includes(articlesIds[j])) {
                                        							articles.push(articlesIds[j]);
                                        							ids.AddRow({
                                        								item: articlesIds[j]
                                        							});
                                        						}
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Materials") {
                                        			let material_id = input[0];
                                        			let articles = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.child_number == material_id) {
                                        					let articlesIds = reqRow.id_article.split(",");
                                        					for (let j = 0; j < articlesIds.length; j++) {
                                        						if (!articles.includes(articlesIds[j])) {
                                        							articles.push(articlesIds[j]);
                                        							ids.AddRow({
                                        								item: articlesIds[j]
                                        							});
                                        						}
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Parts") {
                                        			let part_number = input[0];
                                        			let articles = [];
                                        			let materialIdsForPart = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				let articlesIds = reqRow.id_article.split(",");
                                        				for (let j = 0; j < articlesIds.length; j++) {
                                        					let id_article = articlesIds[j];
                                        					if (reqRow.object_type == "Material") {
                                        						materialIdsForPart.push(id_article + reqRow.child_number);
                                        					}
                                        					if (reqRow.child_number == part_number) {
                                        						if (!articles.includes(id_article)) {
                                        							articles.push(id_article);
                                        							ids.AddRow({
                                        								item: id_article
                                        							});
                                        						}
                                        					}
                                        				}
                                        			}
                                        			for (let article in boms) {
                                        				let bom = boms[article];
                                        				getArticleIdFromBom(article, bom, part_number, articles, materialIdsForPart);
                                        			}
                                        		}
                                        		selected_ids = ids;
                                        	} else {
                                        		for (let i = 0; i < requirements.getRowCount(); i++) {
                                        			let reqRow = requirements.rows[i];
                                        			getPartToRequirements(reqRow, partToRequirement);
                                        		}
                                        	}
                                        	if (selected_ids !== undefined) {
                                        		let reqListButtonId = (filterInPopups ? "root_mashupcontainer-17_navigationfunction-242-popup_ptcsbutton-12" : "root_mashupcontainer-17_mashupcontainer-235_ptcsbutton-12");
                                        		for (let i = 0; i < selected_ids.getRowCount(); i++) {
                                        			let id = selected_ids.rows[i].item; // id article
                                        			for (let article in boms) {
                                        				let bom = boms[article];
                                        				if (bom.Number === id) {
                                        					let bomReqInformation = {
                                        						materials: 0,
                                        						parts: 0,
                                        						expires_greater_than_90: 0,
                                        						expires_within_30_90: 0,
                                        						expires_less_than_30: 0,
                                        						expired: 0,
                                        						verified: 0
                                        					};
                                        					let alreadyAddedPartsInCalculation = [];
                                        					let alreadyAddedMaterialsInCalculation = [];
                                        					let checkArticlePart = [];
                                        					searchPartInBOMRequirementAndReorganize(bom.Number, bom, id, bomReqInformation, partToRequirement, alreadyAddedPartsInCalculation, alreadyAddedMaterialsInCalculation, "", checkArticlePart);
                                        					if (bomReqInformation.partIsFound) {
                                        						let suffix = (filterInPopups) ? "" : "</a>";
                                        						let materials = (filterInPopups || bomReqInformation.materials === 0) ? bomReqInformation.materials + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-241', id + "#_#Articles", false, "", "Material count for article #" + id) + bomReqInformation.materials + suffix;
                                        						let parts = (filterInPopups || bomReqInformation.parts === 0) ? bomReqInformation.parts + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-240', id + "#_#Articles", false, "", "Part count for article #" + id) + bomReqInformation.parts + suffix;
                                        						let expires_greater_than_90 = (filterInPopups || bomReqInformation.expires_greater_than_90 === 0) ? bomReqInformation.expires_greater_than_90 + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-247', id + "#_#Articles", true, 'Expires >90 days', "Verifications count for article #" + id) + bomReqInformation.expires_greater_than_90 + suffix;
                                        						let expires_within_30_90 = (filterInPopups || bomReqInformation.expires_within_30_90 === 0) ? bomReqInformation.expires_within_30_90 + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-247', id + "#_#Articles", true, 'Expires within 30-90 days', "Verifications count for article #" + id) + bomReqInformation.expires_within_30_90 + suffix;
                                        						let expires_less_than_30 = (filterInPopups || bomReqInformation.expires_less_than_30 === 0) ? bomReqInformation.expires_less_than_30 + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-247', id + "#_#Articles", true, 'Expires <30 days', "Verifications count for article #" + id) + bomReqInformation.expires_less_than_30 + suffix;
                                        						let expired = (filterInPopups || bomReqInformation.expired === 0) ? bomReqInformation.expired + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-247', id + "#_#Articles", true, 'Expired', "Verifications count for article #" + id) + bomReqInformation.expired + suffix;
                                        						let reverification = (bomReqInformation.expires_greater_than_90 + bomReqInformation.expires_within_30_90 + bomReqInformation.expires_less_than_30 + bomReqInformation.expired) == bomReqInformation.verified ? true : false;
                                        						result.AddRow({
                                        							article_number: bom.Number,
                                        							article_name: bom.Name,
                                        							supplier_number: "----",
                                        							materials: materials,
                                        							parts: parts,
                                        							expires_greater_than_90: expires_greater_than_90,
                                        							expires_within_30_90: expires_within_30_90,
                                        							expires_less_than_30: expires_less_than_30,
                                        							expired: expired,
                                        							reverification: reverification,
                                        							requirement_list: "<img style=\"cursor: pointer;\" height=\"25px !important\" width=\"25px !important\" src='/Thingworx/MediaEntities/IK.DocumentPencilIcon.Media' onclick=\"dashboardRequirementListNavigation('" + reqListButtonId + "','" + id + "')\"/>"
                                        						});
                                        					}
                                        				}
                                        			}
                                        
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully. Filter-item[" + filterItem + "] and Selected Ids count[" + selected_ids.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function getPartToRequirements(req, partToRequirement) {
                                        	let info = partToRequirement[req.id_supply_object + req.child_number];
                                        	if (info === undefined) {
                                        		info = {
                                        			expires_greater_than_90: 0,
                                        			expires_within_30_90: 0,
                                        			expires_less_than_30: 0,
                                        			expired: 0,
                                        			verified: 0
                                        		};
                                        	}
                                        	if (req.type === "Expires >90 days") {
                                        		info.expires_greater_than_90 = info.expires_greater_than_90 + 1;
                                        	} else if (req.type === "Expires within 30-90 days") {
                                        		info.expires_within_30_90 = info.expires_within_30_90 + 1;
                                        	} else if (req.type === "Expires <30 days") {
                                        		info.expires_less_than_30 = info.expires_less_than_30 + 1;
                                        	} else if (req.type === "Expired") {
                                        		info.expired = info.expired + 1;
                                        	}
                                        	if (req.reporting_object) {
                                        		info.verified = info.verified + 1;
                                        	}
                                        	partToRequirement[req.id_supply_object + req.child_number] = info;
                                        }
                                        
                                        function getPrefix(buttonId, articleId, isVerification, stateParameter, popupTitle) {
                                        	let resultt = "";
                                        	let functionToInvoke = "dashboardNavigation('" + buttonId + "','" + articleId + "','" + popupTitle + "')";
                                        	if (isVerification)
                                        		functionToInvoke = "dashboardVerificationNavigation('" + buttonId + "','" + articleId + "','" + stateParameter + "','" + popupTitle + "')";
                                        
                                        	resultt = "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"" + functionToInvoke + "\">";
                                        
                                        	return resultt;
                                        }
                                        // TODO: in case of materials, it's important to collect also the parent parts added
                                        function searchPartInBOMRequirementAndReorganize(idArticle, bom, partToSearch, results, partToRequirement, alreadyAddedPartsInCalculation, alreadyAddedMaterialsInCalculation, parentPart, checkArticlePart, hierarchy) {
                                        	let partNumber = bom.Number;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + partNumber : partNumber;
                                        	if (partNumber && partNumber === partToSearch) {
                                        		results.partIsFound = true;
                                        	}
                                        	let partLink = Things[databaseThing].getSupplyBOMAssocaitionByHierarchy({
                                        		hierarchy: hierarchy,
                                        		supplier_number: project_number
                                        	});
                                        	if (partLink && partLink.getRowCount() > 0) {
                                        		let supplyPartNumber = partLink.rows[0].SUPPLY_OBJECT_NUMBER;
                                        		// requirement is found on material or part
                                        		if (partToRequirement[supplyPartNumber + partNumber]) {
                                        			let objType = bom.ObjectType;
                                        			let parts = results.parts;
                                        			let materials = results.materials;
                                        			let partToCheck = partNumber;
                                        			let req = partToRequirement[supplyPartNumber + partNumber];
                                        			// requirement is not yet added as material result
                                        			if (objType === "Material") {
                                        				partToCheck = parentPart;
                                        				if (alreadyAddedMaterialsInCalculation[idArticle + partNumber] === undefined) {
                                        					materials++;
                                        					alreadyAddedMaterialsInCalculation[idArticle + partNumber] = true;
                                        				}
                                        			}
                                        			if (alreadyAddedPartsInCalculation[idArticle + partToCheck] === undefined) {
                                        				alreadyAddedPartsInCalculation[idArticle + partToCheck] = true;
                                        				parts++;
                                        			}
                                        			if (!checkArticlePart.includes(supplyPartNumber + partNumber)) {
                                        				checkArticlePart.push(supplyPartNumber + partNumber);
                                        				results.expires_greater_than_90 = results.expires_greater_than_90 + req.expires_greater_than_90;
                                        				results.expires_within_30_90 = results.expires_within_30_90 + req.expires_within_30_90;
                                        				results.expires_less_than_30 = results.expires_less_than_30 + req.expires_less_than_30;
                                        				results.expired = results.expired + req.expired;
                                        				results.verified = results.verified + req.verified;
                                        			}
                                        			results.materials = materials;
                                        			results.parts = parts;
                                        		}
                                        	}
                                        	let components = bom.Components;
                                        	if (components && components.length > 0) {
                                        		for (let c = 0; c < components.length; c++) {
                                        			let subBOM = components[c];
                                        			searchPartInBOMRequirementAndReorganize(idArticle, subBOM, partToSearch, results, partToRequirement, alreadyAddedPartsInCalculation, alreadyAddedMaterialsInCalculation, partNumber, checkArticlePart, hierarchy);
                                        		}
                                        	}
                                        }
                                        
                                        function getArticleIdFromBom(article, bom, part_number, articles, materialIdsForPart) {
                                        	let partNumber = bom.Number;
                                        	if (partNumber == part_number) {
                                        		let components = bom.Components;
                                        		if (components && components.length > 0) {
                                        			for (let c = 0; c < components.length; c++) {
                                        				let subBOM = components[c];
                                        				let childNumber = subBOM.Number;
                                        				if (materialIdsForPart.indexOf(article + childNumber) != -1) {
                                        					if (!articles.includes(article)) {
                                        						articles.push(article);
                                        						ids.AddRow({
                                        							item: article
                                        						});
                                        					}
                                        				}
                                        			}
                                        		}
                                        	} else {
                                        		let components = bom.Components;
                                        		if (components && components.length > 0) {
                                        			for (let c = 0; c < components.length; c++) {
                                        				let subBOM = components[c];
                                        				getArticleIdFromBom(article, subBOM, part_number, articles, materialIdsForPart);
                                        			}
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getChartData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getChartData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDasboardChartData.DataShape"
                                        });
                                        try {
                                        	if (grid_data && grid_data.getRowCount() > 0) {
                                        		let newEntry = new Object();
                                        		let count = 0;
                                        		let countIT = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "IK.KeyValuePair.DataShape"
                                        		});
                                        		for (let i = 0; i < grid_data.getRowCount(); i++) {
                                        			let row = grid_data.rows[i];
                                        			let countValue = row.count;
                                        			count += countValue;
                                        			if (countValue > 0) {
                                        				countIT.AddRow({
                                        					key: countValue,
                                        					value: row.description
                                        				});
                                        			}
                                        		}
                                        		if (count == 0) {
                                        			countIT.AddRow({
                                        				key: 1,
                                        				value: "No data"
                                        			});
                                        		}
                                        		newEntry.chart_title = count == 0 ? "No data" : grid_data.rows[0].chart_label;
                                        
                                        		newEntry.chart_subtitle = "" + count;
                                        		newEntry.chart_data = countIT;
                                        		result.AddRow(newEntry);
                                        	}
                                        	logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDataForDashboard">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getDataForDashboard -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboard.DataShape"
                                        });
                                        const SELECT_REPORTING_OBJECT_FIELDS = "VerificationResult";
                                        
                                        try {
                                        	let c = 0;
                                        	if (project_number && project_name) {
                                        		let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		const filter = "ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "')";
                                        		const select = "Number";
                                        		let classificationjson1 = Things[odataconnectorthing].getClassificationObjects({
                                        			$filter: filter /* STRING {"dataShape":""} */ ,
                                        			$select: select /* STRING {"dataShape":""} */ ,
                                        			ClfNodeId: "SupplyPartsTagging"
                                        		});
                                        		let classificationjson3 = Things[odataconnectorthing].getClassificationObjects({
                                        			$filter: filter /* STRING {"dataShape":""} */ ,
                                        			$select: select /* STRING {"dataShape":""} */ ,
                                        			ClfNodeId: "GDMaterialSupplyPart"
                                        		});
                                        		let values = classificationjson1.value;
                                        		for (let j = 0; j < classificationjson3.value.length; j++) {
                                        			values.push(classificationjson3.value[j]);
                                        		}
                                        
                                        		if (values !== undefined && values.length !== 0) {
                                        			let filterParts = "";
                                        			for (let i = 0; i < values.length; i++) {
                                        				var value = values[i];
                                        				filterParts += "Number eq '" + value.Number + "'";
                                        				if (i < values.length - 1) {
                                        					filterParts += " or ";
                                        				}
                                        			}
                                        			// result: JSON
                                        			let ikeapartsWithConfigurableJson = Things[odataconnectorthing].getParts({
                                        				$skip: undefined /* INTEGER {"dataShape":""} */ ,
                                        				$top: undefined /* INTEGER {"dataShape":""} */ ,
                                        				$filter: filterParts /* STRING {"dataShape":""} */ ,
                                        				$expand: "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name,ObjectType;$expand=Traces($select=Uri)))" /* STRING {"dataShape":""} */ ,
                                        				$select: "Name,ObjectType,ConfigurableRevisionLinkDown"
                                        			});
                                        
                                        			let requirementsToFetch = []; // keeps all the requirement IDs for all the parts
                                        			let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        				infoTableName: "InfoTable",
                                        				dataShapeName: "GenericStringList"
                                        			});
                                        
                                        			/**
                                        			First block
                                        			
                                        			Loop all the parts, collect all distinct requirements
                                        			
                                        			**/
                                        
                                        			let partsList = {};
                                        			let ikeaParts = ikeapartsWithConfigurableJson.value;
                                        			ikeaParts.forEach(ikeapart => {
                                        				const ikeapartjson = ikeapart.ConfigurableRevisionLinkDown;
                                        				if (ikeapartjson && ikeapartjson.length > 0) {
                                        					for (let n = 0; n < ikeapartjson.length; n++) {
                                        						let ikeapartvalue = ikeapartjson[n];
                                        						var id_article = ikeapartvalue["com.ikea.GDArticleID"];
                                        						let childNumber = ikeapartvalue.Child.Number;
                                        						let object_type = ikeapartvalue.Child.ObjectType;
                                        						var tracesjson = ikeapartvalue.Child.Traces;
                                        						if (tracesjson && tracesjson.length > 0) {
                                        							let reqForPart = [];
                                        							for (let k = 0; k < tracesjson.length; k++) {
                                        								let tracesvalue = tracesjson[k];
                                        								let uri = tracesvalue.Uri;
                                        								let reqId = uri.split("=")[1];
                                        								if (requirementsToFetch.indexOf(reqId) === -1) {
                                        									requirementsToFetch.push(reqId);
                                        									reqToFetchInfoTable.AddRow({
                                        										item: reqId
                                        									});
                                        								}
                                        
                                        								reqForPart.push(reqId);
                                        							}
                                        							partsList[childNumber] = {};
                                        							partsList[childNumber].childObjectType = ikeapartvalue.Child.ObjectType;
                                        							partsList[childNumber].childNumber = ikeapartvalue.Child.Number;
                                        							partsList[childNumber].requirements = reqForPart;
                                        							partsList[childNumber].GDArticleID = id_article;
                                        						}
                                        					}
                                        				}
                                        			});
                                        
                                        			const reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        			// result: INFOTABLE dataShape: "PTC.ALM.ILM.Resource.wrv&sConnectorThingIntegrityRequirementDataShape"
                                        			let requirementsData;
                                        			if (reqToFetchInfoTable.getRowCount() > 0) {
                                        				requirementsData = reqResourceProviderThing.getObjectsByIds({
                                        					ids: reqToFetchInfoTable /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        				});
                                        			}
                                        			/**
                                        			Second block
                                        			
                                        			Loop all the parts, loop all requirements and collect all the verifications to collect
                                        			
                                        			**/
                                        			let distinctVerificationToFetch = [];
                                        			let distinctVerificationToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        				infoTableName: "InfoTable",
                                        				dataShapeName: "GenericStringList"
                                        			});
                                        			let dataToFillWithVerificationTests = [];
                                        			let aggregatedVerificationObjectFetched = {};
                                        
                                        			for (let ikeapartNumber in partsList) {
                                        				//ikeapart = partsList[o];
                                        				let ikeapart = partsList[ikeapartNumber];
                                        				let id_article = ikeapart.GDArticleID;
                                        				let childObjectType = ikeapart.childObjectType;
                                        				let childNumber = ikeapart.childNumber;
                                        				let requirements = ikeapart['requirements'];
                                        				for (let s = 0; s < requirements.length; s++) {
                                        					let sp = Resources["InfoTableFunctions"].EQFilter({
                                        						fieldName: "ID" /* STRING */ ,
                                        						isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        						t: requirementsData /* INFOTABLE */ ,
                                        						value: requirements[s] /* STRING */
                                        					});
                                        
                                        					var verifiedBy = sp.VerifiedBy;
                                        					var reportingObjJson;
                                        					if (verifiedBy && verifiedBy.getRowCount() > 0) {
                                        						for (let v = 0; v < verifiedBy.rows.length; v++) {
                                        							var newEntry = {};
                                        							newEntry.id_article = id_article;
                                        							newEntry.id_rvs = sp.ID;
                                        							newEntry.verification_type = sp.VerificationDataformat && sp.VerificationDataformat.getRowCount() > 0 ? sp.VerificationDataformat.rows[v].get("Verification Data format") : "";
                                        							newEntry.is_verified = false;
                                        							newEntry.id_rvs_verified = verifiedBy.rows[v].ID;
                                        							newEntry.child_number = childNumber;
                                        							newEntry.object_type = childObjectType;
                                        							if (distinctVerificationToFetch.indexOf(newEntry.id_rvs_verified) === -1) {
                                        								distinctVerificationToFetch.push(newEntry.id_rvs_verified);
                                        								distinctVerificationToFetchInfoTable.AddRow({
                                        									item: newEntry.id_rvs_verified
                                        								});
                                        							}
                                        							dataToFillWithVerificationTests.push({
                                        								entry: newEntry
                                        							});
                                        						}
                                        					} else {
                                        						let newEntry = {};
                                        						newEntry.id_article = id_article;
                                        						newEntry.child_number = childNumber;
                                        						newEntry.id_rvs = sp.ID;
                                        						newEntry.verification_type = "No Verification Type Defined";
                                        						newEntry.is_delegated = false;
                                        						newEntry.reporting_object = false;
                                        						newEntry.is_verified = false;
                                        						newEntry.object_type = childObjectType;
                                        						let verificationObj = Things[dataBaseThing].getAggregatedVerificationObject({
                                        							id_supplier: project_number,
                                        							id_article: id_article,
                                        							id_part: newEntry.child_number,
                                        							id_rvs: newEntry.id_rvs,
                                        							id_rvs_verified: "Not_Defined"
                                        						});
                                        						let filterReportingObjJson;
                                        						let key_aggreg;
                                        						if (verificationObj && verificationObj.getRowCount()) {
                                        							newEntry.is_delegated = true;
                                        							newEntry.sub_supplier = verificationObj.rows[0].DELEGATED_ID;
                                        							newEntry.is_verified = verificationObj.rows[0].IS_VERIFIED;
                                        							newEntry.reporting_object = verificationObj.rows[0].HAS_FEEDBACK;
                                        						} else {
                                        							filterReportingObjJson = "ArticleID eq '" + id_article + "' and ComponentID eq '" + childNumber + "' and VerificationID eq '" + sp.ID + "' and SupplierDetails eq '" + project_number + "'";
                                        							key_aggreg = id_article + "_" + childNumber + "_" + sp.ID + "_" + project_number;
                                        							reportingObjJson = Things[odataconnectorthing].getReportingObjects({
                                        								$filter: filterReportingObjJson,
                                        								$select: SELECT_REPORTING_OBJECT_FIELDS
                                        							});
                                        							if (reportingObjJson == undefined || reportingObjJson.value == undefined || reportingObjJson.value.length == 0) {
                                        								newEntry.reporting_object = false;
                                        								newEntry.is_verified = false;
                                        							}
                                        							if (reportingObjJson !== undefined && reportingObjJson.value !== undefined && reportingObjJson.value.length != 0) {
                                        								newEntry.reporting_object = true;
                                        								let reportingObjValues = reportingObjJson.value;
                                        								let reportingObj = reportingObjValues[0];
                                        								newEntry.is_verified = reportingObj.VerificationResult ? true : false;
                                        							}
                                        
                                        						}
                                        
                                        						result.AddRow(newEntry);
                                        					}
                                        				}
                                        			}
                                        
                                        
                                        			const testResourceProviderThing = Things[Things["IK.CVM.Configuration"].getTestResourceProvider()];
                                        			// result: INFOTABLE dataShape: "PTC.ALM.ILM.Resource.wrv&sConnectorThingIntegrityTestDataShape"
                                        			let verifiedTests;
                                        			if (distinctVerificationToFetchInfoTable.getRowCount() > 0) {
                                        				verifiedTests = testResourceProviderThing.getObjectsByIds({
                                        					ids: distinctVerificationToFetchInfoTable /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        				});
                                        			}
                                        			let reportingObjectsToFetch = {};
                                        			let filterReportingObjJson = "";
                                        			let dataToFillWithVerificationResults = [];
                                        			let test = false;
                                        			for (let tempEntry in dataToFillWithVerificationTests) {
                                        				let newEntry = dataToFillWithVerificationTests[tempEntry].entry;
                                        				let reqID = newEntry.id_rvs;
                                        				let id_article = newEntry.id_article;
                                        
                                        				let tests = Resources["InfoTableFunctions"].EQFilter({
                                        					fieldName: "ID" /* STRING */ ,
                                        					isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        					t: verifiedTests /* INFOTABLE */ ,
                                        					value: newEntry.id_rvs_verified /* STRING */
                                        				});
                                        				let verificationObj = Things[dataBaseThing].getAggregatedVerificationObject({
                                        					id_supplier: project_number,
                                        					id_article: id_article,
                                        					id_part: newEntry.child_number,
                                        					id_rvs: newEntry.id_rvs,
                                        					id_rvs_verified: newEntry.id_rvs_verified
                                        				});
                                        				let verificationMethodId;
                                        				let supplierDetails;
                                        				verificationMethodId = tests.rows[0].ID;
                                        				if (verificationObj && verificationObj.getRowCount()) {
                                        					supplierDetails = verificationObj.rows[0].DELEGATED_ID;
                                        					newEntry.is_delegated = true;
                                        					newEntry.sub_supplier = verificationObj.rows[0].DELEGATED_ID;
                                        					newEntry.is_verified = verificationObj.rows[0].IS_VERIFIED;
                                        					newEntry.reporting_object = verificationObj.rows[0].HAS_FEEDBACK;
                                        					result.AddRow(newEntry);
                                        				} else {
                                        					test = true;
                                        					newEntry.is_delegated = false;
                                        					supplierDetails = project_number;
                                        					filterReportingObjJson += "(ArticleID eq '" + id_article + "' and ComponentID eq '" + newEntry.child_number + "' and VerificationID eq '" + reqID + "' and VerificationMethodID eq '" + verificationMethodId + "' and SupplierDetails eq '" + supplierDetails + "') or ";
                                        					dataToFillWithVerificationResults.push({
                                        						entry: newEntry,
                                        						ComponentID: newEntry.child_number,
                                        						reqID: reqID,
                                        						verificationMethodId: verificationMethodId,
                                        						supplierDetails: supplierDetails,
                                        						tests: tests
                                        					});
                                        				}
                                        
                                        			}
                                        			if (test) {
                                        				filterReportingObjJson = filterReportingObjJson.substring(0, filterReportingObjJson.length - " or ".length);
                                        				if (filterReportingObjJson) {
                                        					reportingObjJson = Things[odataconnectorthing].getReportingObjects({
                                        						$filter: filterReportingObjJson,
                                        						$select: SELECT_REPORTING_OBJECT_FIELDS + ",ComponentID,VerificationID,VerificationMethodID,SupplierDetails"
                                        					});
                                        				}
                                        			}
                                        
                                        			for (let tempObj in dataToFillWithVerificationResults) {
                                        				let newEntry = dataToFillWithVerificationResults[tempObj].entry;
                                        				let componentId = dataToFillWithVerificationResults[tempObj].ComponentID
                                        				let reqId = dataToFillWithVerificationResults[tempObj].reqID
                                        				let verifMethdId = dataToFillWithVerificationResults[tempObj].verificationMethodId
                                        				let supplierDet = dataToFillWithVerificationResults[tempObj].supplierDetails;
                                        				let tests = dataToFillWithVerificationResults[tempObj].tests;
                                        				let reportingObj = reportingObjJson.value.filter(function(item) {
                                        					return (item.ComponentID == componentId && item.VerificationID == reqId && item.VerificationMethodID == verifMethdId && item.SupplierDetails == supplierDet);
                                        				})
                                        
                                        				if (!reportingObj || reportingObj.length == 0) {
                                        					newEntry.reporting_object = false;
                                        					newEntry.is_verified = false;
                                        				}
                                        				if (reportingObj && reportingObj.length !== 0) {
                                        					newEntry.reporting_object = true;
                                        					newEntry.is_verified = reportingObj[0].VerificationResult ? true : false;
                                        				}
                                        				result.AddRow(newEntry);
                                        			}
                                        
                                        		}
                                        	}
                                        	logger.info(FN + "executed for [" + project_number + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDataForDashboard_v2">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getDataForDashboard_v2 -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboard.DataShape"
                                        });
                                        
                                        try {
                                        	let date = new Date();
                                        	if (requirements) {
                                        		requirements.rows.toArray().forEach(req => {
                                        			let deadLineDate = req.deadlineDate;
                                        			if (deadLineDate) {
                                        				let time_difference = deadLineDate.getTime() - date.getTime();
                                        				//calculate days difference by dividing total milliseconds in a day  
                                        				let noOfDays = time_difference / (1000 * 60 * 60 * 24);
                                        				let status = getStatus(req.reporting_object, noOfDays);
                                        				req.days_left = noOfDays;
                                        				req.type = status.status;
                                        				req.order = status.order;
                                        			}
                                        			result.AddRow(req);
                                        		});
                                        
                                        		let localInfoTable = result;
                                        		let sort = {
                                        			name: "order",
                                        			ascending: true
                                        		};
                                        		localInfoTable.Sort(sort);
                                        		result = localInfoTable;
                                        	}
                                        	logger.info(FN + " executed successfully. Requirements count [" + requirements.getRowCount() + "]");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function getStatus(reportingObject, noOfDays) {
                                        	if (noOfDays < 0) {
                                        		return {
                                        			status: "Expired",
                                        			order: 1
                                        		};
                                        	} else if (noOfDays < 30) {
                                        		return {
                                        			status: "Expires <30 days",
                                        			order: 2
                                        		};
                                        	} else if (noOfDays > 30 && noOfDays < 90) {
                                        		return {
                                        			status: "Expires within 30-90 days",
                                        			order: 3
                                        		};
                                        	} else if (noOfDays > 90) {
                                        		return {
                                        			status: "Expires >90 days",
                                        			order: 4
                                        		};
                                        	} else {
                                        		return {
                                        			status: "Default",
                                        			order: 5
                                        		};
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDefaultSelection">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + "getDefaultSelection -> ";
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.ComplianceDashboardCountItemsArticle.DataShape)
                                        let values = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        });
                                        
                                        try {
                                        	if (view == "Article" || view == "Part" || view == "Material" || view == "Requirements") {
                                        		let selectedId = selectedObject;
                                        		let selectedView = view;
                                        		let selectedValues = "";
                                        		if (selectedView == "Requirements") {
                                        			if (InputForDashboard && InputForDashboard.length > 0) {
                                        				let value = InputForDashboard.split("#_#");
                                        				selectedId = value[0];
                                        				let viewName = value[1];
                                        				if (viewName == "Articles") {
                                        					selectedView = "Article";
                                        				} else if (viewName == "Parts") {
                                        					selectedView = "Part";
                                        				} else if (viewName == "Materials") {
                                        					selectedView = "Material";
                                        				}
                                        			}
                                        		}
                                        
                                        		if (selectedId && selectedId.length > 0) {
                                        			selectedValues = "#_#" + selectedId;
                                        		} else {
                                        			let field = "";
                                        			if (selectedView == "Article") {
                                        				field = "article_number";
                                        			} else if (selectedView == "Part") {
                                        				field = "part_id";
                                        			} else if (selectedView == "Material") {
                                        				field = "material_id";
                                        			}
                                        			for (let i = 0; i < selectedObjects.getRowCount(); i++) {
                                        				let row = selectedObjects.rows[i];
                                        				selectedValues = selectedValues + "#_#" + row[field];
                                        			}
                                        		}
                                        
                                        		let params = {
                                        			name: "InputForReqListNavigation" /* STRING */ ,
                                        			value: true /* BOOLEAN */
                                        		};
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionBooleanValue(params);
                                        
                                        		let params1 = {
                                        			name: "InputForReqListViewSelection" /* STRING */ ,
                                        			value: selectedView /* STRING */
                                        		};
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionStringValue(params1);
                                        
                                        		let params2 = {
                                        			name: "InputForReqListValueSelection" /* STRING */ ,
                                        			value: selectedValues /* INFOTABLE */
                                        		};
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionStringValue(params2);
                                        	}
                                        	logger.debug("before requirements view " + selectedObject + " " + InputForDashboard);
                                        	if (view == "Requirements" && InputForDashboard && InputForDashboard.length > 0 && selectedObject && selectedObject.length > 0) {
                                        		logger.debug("inside requirements view " + selectedObject + " " + InputForDashboard);
                                        		let params = {
                                        			name: "InputForReqListColumnSelection" /* STRING */ ,
                                        			value: true /* BOOLEAN */
                                        		};
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionBooleanValue(params);
                                        		let params1 = {
                                        			name: "InputForReqListFilterSelection" /* STRING */ ,
                                        			value: selectedObject /* STRING */
                                        		};
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionStringValue(params1);
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line:" + err.lineNumber + " " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getItemsCountForGridData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getItemsCountForGridData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardData.DataShape"
                                        });
                                        let selected_ids_expired = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_lessthan_30 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_within_30_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_greaterthan_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        const databaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        
                                        try {
                                        	let materialArticlesToParts = {};
                                        	if (bomStructures !== undefined) {
                                        		let boms = JSON.parse(bomStructures).boms;
                                        		for (let article in boms) {
                                        			let bom = boms[article];
                                        			searchPartInBOMAndReorganize(bom.Number, bom, materialArticlesToParts, "", "");
                                        		}
                                        		let article_expired = [];
                                        		let article_lessthan_30 = [];
                                        		let article_within_30_90 = [];
                                        		let article_greaterthan_90 = [];
                                        
                                        		let part_expired = [];
                                        		let part_lessthan_30 = [];
                                        		let part_within_30_90 = [];
                                        		let part_greaterthan_90 = [];
                                        
                                        		let material_expired = [];
                                        		let material_lessthan_30 = [];
                                        		let material_within_30_90 = [];
                                        		let material_greaterthan_90 = [];
                                        
                                        		let expired_articles = [];
                                        		let lessthan_30_articles = [];
                                        		let within_30_90_articles = [];
                                        		let greaterthan_90_articles = [];
                                        
                                        		for (let i = 0; i < requirements.getRowCount(); i++) {
                                        			let row = requirements.rows[i];
                                        			let objectType = row.object_type;
                                        			let articles = row.id_article.split(",");
                                        			let childNumber = row.child_number;
                                        			let type = row.type;
                                        			for (let a = 0; a < articles.length; a++) {
                                        				let idArticle = articles[a];
                                        				if (state == "Article") {
                                        					if (type == "Expired") {
                                        						if (!article_expired.includes(idArticle)) {
                                        							article_expired.push(idArticle);
                                        							selected_ids_expired.AddRow({
                                        								item: idArticle
                                        							});
                                        						}
                                        					} else if (type == "Expires <30 days") {
                                        						if (!article_lessthan_30.includes(idArticle) && !article_expired.includes(idArticle)) {
                                        							article_lessthan_30.push(idArticle);
                                        							selected_ids_lessthan_30.AddRow({
                                        								item: idArticle
                                        							});
                                        						}
                                        					} else if (type == "Expires within 30-90 days") {
                                        						if (!article_within_30_90.includes(idArticle) && !article_lessthan_30.includes(idArticle) && !article_expired.includes(idArticle)) {
                                        							article_within_30_90.push(idArticle);
                                        							selected_ids_within_30_90.AddRow({
                                        								item: idArticle
                                        							});
                                        						}
                                        					} else if (type === "Expires >90 days") {
                                        						if (!article_greaterthan_90.includes(idArticle) && !article_lessthan_30.includes(idArticle) && !article_expired.includes(idArticle) && !article_within_30_90.includes(idArticle)) {
                                        							article_greaterthan_90.push(idArticle);
                                        							selected_ids_greaterthan_90.AddRow({
                                        								item: idArticle
                                        							});
                                        						}
                                        					}
                                        				} else if (state == "Part") {
                                        					if (objectType === "IKEA Part") {
                                        						if (idArticle != childNumber && type == "Expired") {
                                        							if (!part_expired.includes(childNumber)) {
                                        								part_expired.push(childNumber);
                                        								selected_ids_expired.AddRow({
                                        									item: childNumber
                                        								});
                                        							}
                                        							if (!expired_articles.includes(idArticle)) {
                                        								expired_articles.push(idArticle);
                                        							}
                                        						} else if (idArticle != childNumber && type == "Expires <30 days") {
                                        							if (!part_lessthan_30.includes(childNumber) && !part_expired.includes(childNumber)) {
                                        								part_lessthan_30.push(childNumber);
                                        								selected_ids_lessthan_30.AddRow({
                                        									item: childNumber
                                        								});
                                        							}
                                        							if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle)) {
                                        								lessthan_30_articles.push(idArticle);
                                        							}
                                        						} else if (idArticle != childNumber && type == "Expires within 30-90 days") {
                                        							if (!part_within_30_90.includes(childNumber) && !part_lessthan_30.includes(childNumber) && !part_expired.includes(childNumber)) {
                                        								part_within_30_90.push(childNumber);
                                        								selected_ids_within_30_90.AddRow({
                                        									item: childNumber
                                        								});
                                        							}
                                        							if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle) && !within_30_90_articles.includes(idArticle)) {
                                        								within_30_90_articles.push(idArticle);
                                        							}
                                        						} else if (idArticle != childNumber && type === "Expires >90 days") {
                                        							if (!part_greaterthan_90.includes(childNumber) && !part_within_30_90.includes(childNumber) && !part_lessthan_30.includes(childNumber) && !part_expired.includes(childNumber)) {
                                        								part_greaterthan_90.push(childNumber);
                                        								selected_ids_greaterthan_90.AddRow({
                                        									item: childNumber
                                        								});
                                        							}
                                        							if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle) && !within_30_90_articles.includes(idArticle) && !greaterthan_90_articles.includes(idArticle)) {
                                        								greaterthan_90_articles.push(idArticle);
                                        							}
                                        						}
                                        					} else if (objectType === "Material") {
                                        						let parents = materialArticlesToParts[idArticle + childNumber];
                                        						if (parents && parents.length > 0) {
                                        							if (idArticle != childNumber && type == "Expired") {
                                        								for (let index in parents) {
                                        									let parent = parents[index];
                                        									if (!part_expired.includes(parent)) {
                                        										part_expired.push(parent);
                                        										selected_ids_expired.AddRow({
                                        											item: parent
                                        										});
                                        									}
                                        								}
                                        								if (!expired_articles.includes(idArticle)) {
                                        									expired_articles.push(idArticle);
                                        								}
                                        
                                        							} else if (idArticle != childNumber && type == "Expires <30 days") {
                                        								for (let index in parents) {
                                        									let parent = parents[index];
                                        									if (!part_lessthan_30.includes(parent) && !part_expired.includes(parent)) {
                                        										part_lessthan_30.push(parent);
                                        										selected_ids_lessthan_30.AddRow({
                                        											item: parent
                                        										});
                                        									}
                                        								}
                                        								if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle)) {
                                        									lessthan_30_articles.push(idArticle);
                                        								}
                                        							} else if (idArticle != childNumber && type == "Expires within 30-90 days") {
                                        								for (let index in parents) {
                                        									let parent = parents[index];
                                        									if (!part_within_30_90.includes(parent) && !part_lessthan_30.includes(parent) && !part_expired.includes(parent)) {
                                        										part_within_30_90.push(parent);
                                        										selected_ids_within_30_90.AddRow({
                                        											item: parent
                                        										});
                                        									}
                                        								}
                                        								if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle) && !within_30_90_articles.includes(idArticle)) {
                                        									within_30_90_articles.push(idArticle);
                                        								}
                                        							} else if (idArticle != childNumber && type === "Expires >90 days") {
                                        								for (let index in parents) {
                                        									let parent = parents[index];
                                        									if (!part_greaterthan_90.includes(parent) && !part_within_30_90.includes(parent) && !part_lessthan_30.includes(parent) && !part_expired.includes(parent)) {
                                        										part_greaterthan_90.push(parent);
                                        										selected_ids_greaterthan_90.AddRow({
                                        											item: parent
                                        										});
                                        									}
                                        								}
                                        								if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle) && !within_30_90_articles.includes(idArticle) && !greaterthan_90_articles.includes(idArticle)) {
                                        									greaterthan_90_articles.push(idArticle);
                                        								}
                                        							}
                                        						}
                                        					}
                                        				} else if (state == "Material") {
                                        					if (objectType == "Material" && type == "Expired") {
                                        						if (!material_expired.includes(childNumber)) {
                                        							material_expired.push(childNumber);
                                        							selected_ids_expired.AddRow({
                                        								item: childNumber
                                        							});
                                        						}
                                        						if (!expired_articles.includes(idArticle)) {
                                        							expired_articles.push(idArticle);
                                        						}
                                        					} else if (objectType == "Material" && type == "Expires <30 days") {
                                        						if (!material_lessthan_30.includes(childNumber) && !material_expired.includes(childNumber)) {
                                        							material_lessthan_30.push(childNumber);
                                        							selected_ids_lessthan_30.AddRow({
                                        								item: childNumber
                                        							});
                                        						}
                                        						if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle)) {
                                        							lessthan_30_articles.push(idArticle);
                                        						}
                                        					} else if (objectType == "Material" && type == "Expires within 30-90 days") {
                                        						if (!material_within_30_90.includes(childNumber) && !material_lessthan_30.includes(childNumber) && !material_expired.includes(childNumber)) {
                                        							material_within_30_90.push(childNumber);
                                        							selected_ids_within_30_90.AddRow({
                                        								item: childNumber
                                        							});
                                        						}
                                        						if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle) && !within_30_90_articles.includes(idArticle)) {
                                        							within_30_90_articles.push(idArticle);
                                        						}
                                        					} else if (objectType == "Material" && type === "Expires >90 days") {
                                        						if (!material_greaterthan_90.includes(childNumber) && !material_within_30_90.includes(childNumber) && !material_lessthan_30.includes(childNumber) && !material_expired.includes(childNumber)) {
                                        							material_greaterthan_90.push(childNumber);
                                        							selected_ids_greaterthan_90.AddRow({
                                        								item: childNumber
                                        							});
                                        						}
                                        						if (!lessthan_30_articles.includes(idArticle) && !expired_articles.includes(idArticle) && !within_30_90_articles.includes(idArticle) && !greaterthan_90_articles.includes(idArticle)) {
                                        							greaterthan_90_articles.push(idArticle);
                                        						}
                                        					}
                                        				}
                                        			}
                                        
                                        		}
                                        
                                        		if (state == "Article") {
                                        			let label = "All Articles";
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + article_expired.length + " Articles</b><br/>With verifications expired</p>",
                                        				count: article_expired.length,
                                        				description: "With verifications expired",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        				style: "IK.SD.Expired",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsArticles.Mashup",
                                        				selected_ids: selected_ids_expired,
                                        				title: "Article count - expired verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + article_lessthan_30.length + " Articles</b><br/>With verifications expiring <30 days</p>",
                                        				count: article_lessthan_30.length,
                                        				description: "With verifications expiring <30 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        				style: "IK.SD.ExpiresLessThan30Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsArticles.Mashup",
                                        				selected_ids: selected_ids_lessthan_30,
                                        				title: "Article count - expiring <30 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + article_within_30_90.length + " Articles</b><br/>With verifications expiring within 30-90 days</p>",
                                        				count: article_within_30_90.length,
                                        				description: "With verifications expiring within 30-90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        				style: "IK.SD.ExpiresWithin30To90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsArticles.Mashup",
                                        				selected_ids: selected_ids_within_30_90,
                                        				title: "Article count - expiring within 30-90 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + article_greaterthan_90.length + " Articles</b><br/>With verifications expiring >90 days</p>",
                                        				count: article_greaterthan_90.length,
                                        				description: "With verifications expiring >90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        				style: "IK.SD.ExpiresGreaterThan90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsArticles.Mashup",
                                        				selected_ids: selected_ids_greaterthan_90,
                                        				title: "Article count - expiring >90 days verifications"
                                        			});
                                        		} else if (state == "Part") {
                                        			let label = "All Parts";
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + part_expired.length + " Parts </b>(" + expired_articles.length + " articles)<br/>With verifications expired</p>",
                                        				count: part_expired.length,
                                        				description: "With verifications expired",
                                        				icon: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        				style: "IK.SD.Expired",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsParts.Mashup",
                                        				selected_ids: selected_ids_expired,
                                        				title: "Part count - expired verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + part_lessthan_30.length + " Parts </b>(" + lessthan_30_articles.length + " articles)<br/>With verifications expiring <30 days</p>",
                                        				count: part_lessthan_30.length,
                                        				description: "With verifications expiring <30 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        				style: "IK.SD.ExpiresLessThan30Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsParts.Mashup",
                                        				selected_ids: selected_ids_lessthan_30,
                                        				title: "Part count - expiring <30 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b style=\"cursor: pointer;\">" + part_within_30_90.length + " Parts </b>(" + within_30_90_articles.length + " articles)<br/>With verifications expiring within 30-90 days</p>",
                                        				count: part_within_30_90.length,
                                        				description: "With verifications expiring within 30-90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        				style: "IK.SD.ExpiresWithin30To90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsParts.Mashup",
                                        				selected_ids: selected_ids_within_30_90,
                                        				title: "Part count - expiring within 30-90 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + part_greaterthan_90.length + " Parts </b>(" + greaterthan_90_articles.length + " articles)<br/>With verifications expiring >90 days</p>",
                                        				count: part_greaterthan_90.length,
                                        				description: "With verifications expiring >90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        				style: "IK.SD.ExpiresGreaterThan90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsParts.Mashup",
                                        				selected_ids: selected_ids_greaterthan_90,
                                        				title: "Part count - expiring >90 days verifications"
                                        			});
                                        		} else if (state == "Material") {
                                        			let label = "All Materials";
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + material_expired.length + " Materials </b>(" + expired_articles.length + " articles)<br/>With verifications expired</p>",
                                        				count: material_expired.length,
                                        				description: "With verifications expired",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        				style: "IK.SD.Expired",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsMaterials.Mashup",
                                        				selected_ids: selected_ids_expired,
                                        				title: "Material count - expired verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + material_lessthan_30.length + " Materials </b>(" + lessthan_30_articles.length + " articles)<br/>With verifications expiring <30 days</p>",
                                        				count: material_lessthan_30.length,
                                        				description: "With verifications expiring <30 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        				style: "IK.SD.ExpiresLessThan30Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsMaterials.Mashup",
                                        				selected_ids: selected_ids_lessthan_30,
                                        				title: "Material count - expiring <30 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + material_within_30_90.length + " Materials </b>(" + within_30_90_articles.length + " articles)<br/>With verifications expiring within 30-90 days</p>",
                                        				count: material_within_30_90.length,
                                        				description: "With verifications expiring within 30-90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        				style: "IK.SD.ExpiresWithin30To90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsMaterials.Mashup",
                                        				selected_ids: selected_ids_within_30_90,
                                        				title: "Material count - expiring within 30-90 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b style=\"cursor: pointer;\">" + material_greaterthan_90.length + " Materials </b>(" + greaterthan_90_articles.length + " articles)<br/>With verifications expiring >90 days</p>",
                                        				count: material_greaterthan_90.length,
                                        				description: "With verifications expiring >90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        				style: "IK.SD.ExpiresGreaterThan90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsMaterials.Mashup",
                                        				selected_ids: selected_ids_greaterthan_90,
                                        				title: "Material count - expiring >90 days verifications"
                                        			});
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully. State[" + state + "] and Requirements count[" + requirements.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        /**
                                        Fills the materialArticlesToParts object array with:
                                        idArticle + materialArticle = [parent part numbers];
                                        **/
                                        function searchPartInBOMAndReorganize(idArticle, bom, materialArticlesToParts, parentNumber, hierarchy) {
                                        	let objectType = bom.ObjectType;
                                        	let partNumber = bom.Number;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + partNumber : partNumber;
                                        	if (objectType === "Material") {
                                        		let partLink = Things[databaseThing].getSupplyBOMAssocaitionByHierarchy({
                                        			hierarchy: hierarchy,
                                        			supplier_number: project_number
                                        		});
                                        		if (partLink && partLink.getRowCount() > 0) {
                                        			let item = materialArticlesToParts[idArticle + partNumber];
                                        			if (item === undefined) {
                                        				item = [];
                                        			}
                                        			if (item.indexOf(parentNumber) < 0) {
                                        				item.push(parentNumber);
                                        			}
                                        			materialArticlesToParts[idArticle + partNumber] = item;
                                        		}
                                        	}
                                        	let components = bom.Components;
                                        	if (components && components.length > 0) {
                                        		for (let c = 0; c < components.length; c++) {
                                        			let subBOM = components[c];
                                        			searchPartInBOMAndReorganize(idArticle, subBOM, materialArticlesToParts, partNumber, hierarchy);
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getMaterialCountDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getMaterialCountDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsMaterial.DataShape"
                                        });
                                        let databaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        try {
                                        	let filterInPopups = false;
                                        	let materialArticlesToParts = {};
                                        	let partNumberToName = {};
                                        	let boms = JSON.parse(bomStructures).boms;
                                        	for (let article in boms) {
                                        		let bom = boms[article];
                                        		searchPartInBOMAndReorganize(bom.Number, bom, materialArticlesToParts, "", partNumberToName, "");
                                        	}
                                        
                                        	if (filterItem) {
                                        		filterInPopups = true;
                                        		let input = filterItem.split("#_#");
                                        		// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(GenericStringList)
                                        		let ids = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		if (input[1] == "Verification") {
                                        			let id_rvs = input[0];
                                        			let materials = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				if (reqRow.id_rvs == id_rvs) {
                                        					if (reqRow.object_type == "Material" && !materials.includes(reqRow.child_number)) {
                                        						ids.AddRow({
                                        							item: reqRow.child_number
                                        						});
                                        						materials.push(reqRow.child_number);
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Subsuppliers") {
                                        			let sub_supplier = input[0];
                                        			let materials = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				if (reqRow.sub_supplier == sub_supplier) {
                                        					if (reqRow.object_type == "Material" && !materials.includes(reqRow.child_number)) {
                                        						ids.AddRow({
                                        							item: reqRow.child_number
                                        						});
                                        						materials.push(reqRow.child_number);
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Articles") {
                                        			let articleId = input[0];
                                        			let materials = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				if (reqRow.id_article.split(",").indexOf(articleId) != -1 && reqRow.object_type == "Material" && !materials.includes(reqRow.child_number)) {
                                        					ids.AddRow({
                                        						item: reqRow.child_number
                                        					});
                                        					materials.push(reqRow.child_number);
                                        				}
                                        			}
                                        		} else if (input[1] == "Parts") {
                                        			let partId = input[0];
                                        			let materials = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				if (reqRow.object_type == "Material" && !materials.includes(reqRow.child_number)) {
                                        					let parents = materialArticlesToParts[reqRow.child_number];
                                        					if (parents.indexOf(partId) != -1) {
                                        						ids.AddRow({
                                        							item: reqRow.child_number
                                        						});
                                        						materials.push(reqRow.child_number);
                                        					}
                                        				}
                                        			}
                                        		}
                                        		selected_ids = ids;
                                        	}
                                        
                                        	// First loop, reorganizing material and part so that based on the part number, we can get the number of materials involved
                                        	let partToOthers = {};
                                        	requirements.rows.toArray().forEach(row => {
                                        		let objectType = row.object_type;
                                        		let verificationStatus = row.type;
                                        		let partId = row.child_number;
                                        		let articleIds = row.id_article.split(",");
                                        		if (objectType === "Material") {
                                        			let single = partToOthers[partId];
                                        			if (single === undefined) {
                                        				single = {
                                        					parts: [],
                                        					articles: [],
                                        					expired: 0,
                                        					expires_less_than_30: 0,
                                        					expires_within_30_90: 0,
                                        					expires_greater_than_90: 0,
                                        					sub_supplier: "",
                                        					verified: 0
                                        				};
                                        			}
                                        			for (let a = 0; a < articleIds.length; a++) {
                                        				if (single.articles.indexOf(articleIds[a]) === -1) {
                                        					single.articles.push(articleIds[a]);
                                        				}
                                        			}
                                        
                                        			if (verificationStatus === "Expired") {
                                        				single.expired++;
                                        			} else if (verificationStatus === "Expires <30 days") {
                                        				single.expires_less_than_30++;
                                        			} else if (verificationStatus === "Expires within 30-90 days") {
                                        				single.expires_within_30_90++;
                                        			} else if (verificationStatus === "Expires >90 days") {
                                        				single.expires_greater_than_90++;
                                        			}
                                        			if (row.reporting_object) {
                                        				single.verified++;
                                        			}
                                        			single.supplyActor = row.supplyActor;
                                        			let parents = materialArticlesToParts[partId];
                                        			if (parents && parents.length) {
                                        				parents.forEach(parent => {
                                        					if (single.parts.indexOf(parent) === -1) {
                                        						single.parts.push(parent);
                                        					}
                                        				});
                                        			}
                                        			partToOthers[partId] = single;
                                        		}
                                        	});
                                        	let reqListButtonId = (filterInPopups ? "root_mashupcontainer-17_navigationfunction-244-popup_ptcsbutton-12" : "root_mashupcontainer-17_mashupcontainer-235_ptcsbutton-12");
                                        
                                        	for (let i = 0; i < selected_ids.getRowCount(); i++) {
                                        		let partNumber = selected_ids.rows[i].item;
                                        		let partCounts = partToOthers[partNumber];
                                        		if (partCounts === undefined) {
                                        			partCounts = {
                                        				articles: [],
                                        				parts: []
                                        			};
                                        		}
                                        
                                        		let parts = (filterInPopups || partCounts.parts.length === 0) ? partCounts.parts.length + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-240','" + partNumber + "#_#Materials','Part count for material #" + partNumber + "')\">" + partCounts.parts.length + "</a>";
                                        		let art = (filterInPopups || partCounts.articles.length === 0) ? partCounts.articles.length + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-239','" + partNumber + "#_#Materials','Article count for material #" + partNumber + "')\">" + partCounts.articles.length + "</a>";
                                        		let expires_greater_than_90 = (filterInPopups || partCounts.expires_greater_than_90 == 0) ? partCounts.expires_greater_than_90 + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Materials','Expires >90 days','Verifications count for material #" + partNumber + "')\">" + partCounts.expires_greater_than_90 + "</a>";
                                        		let expires_within_30_90 = (filterInPopups || partCounts.expires_within_30_90 == 0) ? partCounts.expires_within_30_90 + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Materials','Expires within 30-90 days','Verifications count for material #" + partNumber + "')\">" + partCounts.expires_within_30_90 + "</a>";
                                        		let expires_less_than_30 = (filterInPopups || partCounts.expires_less_than_30 == 0) ? partCounts.expires_less_than_30 + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Materials','Expires <30 days','Verifications count for material #" + partNumber + "')\">" + partCounts.expires_less_than_30 + "</a>";
                                        		let expired = (filterInPopups || partCounts.expired == 0) ? partCounts.expired + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Materials','Expired','Verifications count for material #" + partNumber + "')\">" + partCounts.expired + "</a>";
                                        		let reverification = (partCounts.expires_greater_than_90 + partCounts.expires_within_30_90 + partCounts.expires_less_than_30 + partCounts.expired) == partCounts.verified ? true : false;
                                        		result.AddRow({
                                        			material_id: partNumber,
                                        			material_name: partNumberToName[partNumber],
                                        			sub_supplier: partCounts.supplyActor,
                                        			parts: parts,
                                        			articles: art,
                                        			expires_greater_than_90: expires_greater_than_90,
                                        			expires_within_30_90: expires_within_30_90,
                                        			expires_less_than_30: expires_less_than_30,
                                        			expired: expired,
                                        			reverification: reverification,
                                        			requirement_list: "<img style=\"cursor: pointer;\" height=\"25px !important\" width=\"25px !important\" src='/Thingworx/MediaEntities/IK.DocumentPencilIcon.Media' onclick=\"dashboardRequirementListNavigation('" + reqListButtonId + "','"+partNumber+"')\"/>"
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully. Filter-item[" + filterItem + "] and Selected Ids count[" + selected_ids.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        
                                        
                                        /**
                                        Fills the materialArticlesToParts object array with:
                                        idArticle + materialArticle = [parent part numbers];
                                        **/
                                        function searchPartInBOMAndReorganize(idArticle, bom, materialArticlesToParts, parentNumber, partNumberToName, hierarchy) {
                                        	let objectType = bom.ObjectType;
                                        	let partNumber = bom.Number;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + partNumber : partNumber;
                                        	partNumberToName[partNumber] = bom.Name;
                                        	if (objectType === "Material") {
                                        		let partLink = Things[databaseThing].getSupplyBOMAssocaitionByHierarchy({
                                        			hierarchy: hierarchy,
                                        			supplier_number: project_number
                                        		});
                                        		if (partLink && partLink.getRowCount() > 0) {
                                        			let item = materialArticlesToParts[partNumber];
                                        			if (item === undefined) {
                                        				item = [];
                                        			}
                                        			if (item.indexOf(parentNumber) < 0) {
                                        				item.push(parentNumber);
                                        			}
                                        			materialArticlesToParts[partNumber] = item;
                                        		}
                                        	}
                                        	let components = bom.Components;
                                        	if (components && components.length > 0) {
                                        		for (let c = 0; c < components.length; c++) {
                                        			let subBOM = components[c];
                                        			searchPartInBOMAndReorganize(idArticle, subBOM, materialArticlesToParts, partNumber, partNumberToName, hierarchy);
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getNewItemsGridData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getNewItemsGridData -> ";
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.ComplianceDashboardData.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardData.DataShape"
                                        });
                                        try
                                        {
                                            let label = "All Articles";
                                            result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b> XX Articles</b><br/>With missing connections</p>",
                                        				description: "",
                                                        count:0,
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        				style: "IK.SD.Expired",
                                        				chart_label: label,
                                        				mashupName: "",
                                        				title: ""
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>XX Articles</b><br/>With missing verifications</p>",
                                        				description: "",
                                                        count:0,
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        				style: "IK.SD.ExpiresLessThan30Days",
                                        				chart_label: label,
                                        				mashupName: "",
                                        				title: ""
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b> XX Articles</b><br/>With completed verifications </p>",
                                        				description: "",
                                                        count:0,
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        				style: "IK.SD.ExpiresGreaterThan90Days",
                                        				chart_label: label,
                                        				mashupName: "",
                                        				title: ""
                                        			});
                                        		       
                                        }
                                        catch (err)
                                        {
                                            logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getOnHoldItemsGridData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getOnHoldItemsGridData -> ";
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.ComplianceDashboardData.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardData.DataShape"
                                        });
                                        try{
                                            let label = "All Articles";
                                            result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>XX Articles</b><br/>With verifications expired</p>",
                                                        count:0,
                                        				description: "With verifications expired",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        				style: "IK.SD.Expired",
                                        				chart_label: label,
                                        				mashupName: "",
                                        				title: ""
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>XX Articles</b><br/>With verifications expiring <30 days</p>",
                                                        count:0,
                                        				description: "",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        				style: "IK.SD.ExpiresLessThan30Days",
                                        				chart_label: label,
                                        				mashupName: "",
                                        				title: ""
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>XX Articles</b><br/>With verifications expiring within 30-90 days</p>",
                                                        count:0,
                                        				description: "With verifications expiring within 30-90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        				style: "IK.SD.ExpiresWithin30To90Days",
                                        				chart_label: label,
                                        				mashupName: "",
                                        				title: "Article count - expiring within 30-90 days verifications"
                                        			});
                                        			result.AddRow({
                                        				html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>XX Articles</b><br/>With verifications expiring >90 days</p>",
                                                        count:0,
                                        				description: "With verifications expiring >90 days",
                                        				icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        				style: "IK.SD.ExpiresGreaterThan90Days",
                                        				chart_label: label,
                                        				mashupName: "IK.DashboardCountItemsArticles.Mashup",
                                        				title: "Article count - expiring >90 days verifications"
                                        			});
                                        }
                                        catch (err)
                                        {
                                            logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getPartCountDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getPartCountDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardCountItemsPart.DataShape"
                                        });
                                        let databaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        
                                        try {
                                        	let materialArticlesToParts = {};
                                        	let partNumberToName = {};
                                        	let partToRequirement = {};
                                        	let filterInPopups = false;
                                        	let boms = JSON.parse(bomStructures).boms;
                                        	for (let article in boms) {
                                        		let bom = boms[article];
                                        		searchPartInBOMAndReorganize(bom.Number, bom, materialArticlesToParts, "", partNumberToName, "");
                                        	}
                                        	let ids = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "GenericStringList"
                                        	});
                                        	if (filterItem) {
                                        		filterInPopups = true;
                                        		let input = filterItem.split("#_#");
                                        		if (input[1] == "Verification") {
                                        			let id_rvs = input[0];
                                        			let parts = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.id_rvs == id_rvs) {
                                        					if (reqRow.object_type == "Material") {
                                        						let parents = materialArticlesToParts[reqRow.child_number];
                                        						if (parents && parents.length > 0) {
                                        							for (let index in parents) {
                                        								let parent = parents[index];
                                        								if (!parts.includes(parent)) {
                                        									parts.push(parent);
                                        									ids.AddRow({
                                        										item: parent
                                        									});
                                        								}
                                        							}
                                        						}
                                        					} else if (reqRow.object_type == "IKEA Part" && !parts.includes(reqRow.child_number)) {
                                        						parts.push(reqRow.child_number);
                                        						ids.AddRow({
                                        							item: reqRow.child_number
                                        						});
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Subsuppliers") {
                                        			let sub_supplier = input[0];
                                        			let parts = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.sub_supplier == sub_supplier) {
                                        					if (reqRow.object_type == "Material") {
                                        						let parents = materialArticlesToParts[reqRow.child_number];
                                        						if (parents && parents.length > 0) {
                                        							for (let index in parents) {
                                        								let parent = parents[index];
                                        								if (!parts.includes(parent)) {
                                        									parts.push(parent);
                                        									ids.AddRow({
                                        										item: parent
                                        									});
                                        								}
                                        							}
                                        						}
                                        
                                        					} else if (reqRow.object_type == "IKEA Part" && !parts.includes(reqRow.child_number)) {
                                        						parts.push(reqRow.child_number);
                                        						ids.AddRow({
                                        							item: reqRow.child_number
                                        						});
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Articles") {
                                        			let id_article = input[0];
                                        			let parts = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.id_article.split(",").indexOf(id_article) !=  -1) {
                                        					if (reqRow.object_type == "Material") {
                                        						let parents = materialArticlesToParts[reqRow.child_number];
                                        						if (parents && parents.length > 0) {
                                        							for (let index in parents) {
                                        								let parent = parents[index];
                                        								if (!parts.includes(parent)) {
                                        									parts.push(parent);
                                        									ids.AddRow({
                                        										item: parent
                                        									});
                                        								}
                                        							}
                                        						}
                                        					} else if (reqRow.object_type == "IKEA Part" && !parts.includes(reqRow.child_number)) {
                                        						parts.push(reqRow.child_number);
                                        						ids.AddRow({
                                        							item: reqRow.child_number
                                        						});
                                        					}
                                        				}
                                        			}
                                        		} else if (input[1] == "Materials") {
                                        			let material_number = input[0];
                                        			let parts = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				getPartToRequirements(reqRow, partToRequirement);
                                        				if (reqRow.child_number == material_number) {
                                        					let parents = materialArticlesToParts[reqRow.child_number];
                                        					if (parents && parents.length > 0) {
                                        						for (let index in parents) {
                                        							let parent = parents[index];
                                        							if (!parts.includes(parent)) {
                                        								parts.push(parent);
                                        								ids.AddRow({
                                        									item: parent
                                        								});
                                        							}
                                        						}
                                        					}
                                        				}
                                        			}
                                        		}
                                        		selected_ids = ids;
                                        	} else {
                                        		for (let i = 0; i < requirements.getRowCount(); i++) {
                                        			let reqRow = requirements.rows[i];
                                        			getPartToRequirements(reqRow, partToRequirement);
                                        		}
                                        	}
                                        
                                        	// First loop, reorganizing material and part so that based on the part number, we can get the number of materials involved
                                        	let partToOthers = {};
                                        	let materialPartIds = [];
                                        	requirements.rows.toArray().forEach(row => {
                                        		let objectType = row.object_type;
                                        		let verificationStatus = row.type;
                                        		let partId = row.child_number;
                                        		let articleIds = row.id_article.split(",");
                                        		let supplyObjectNumber = row.id_supply_object;
                                        		if (!materialPartIds.includes(supplyObjectNumber + partId)) {
                                        			materialPartIds.push(supplyObjectNumber + partId);
                                        			if (objectType === "Material") {
                                        				let parents = materialArticlesToParts[partId];
                                        				if (parents && parents.length) {
                                        					parents.forEach(parent => {
                                        						let single = partToOthers[parent];
                                        						if (single === undefined) {
                                        							single = {
                                        								materials: [],
                                        								articles: [],
                                        								expired: 0,
                                        								expires_less_than_30: 0,
                                        								expires_within_30_90: 0,
                                        								expires_greater_than_90: 0,
                                        								verified: 0
                                        							};
                                        						}
                                        						if (single.materials.indexOf(partId) === -1) {
                                        							single.materials.push(partId);
                                        						}
                                        						for (let a = 0; a < articleIds.length; a++) {
                                        							let articleId = articleIds[a];
                                        							if (single.articles.indexOf(articleId) === -1) {
                                        								single.articles.push(articleId);
                                        							}
                                        						}
                                        						if (verificationStatus === "Expired") {
                                        							single.expired = single.expired + partToRequirement[supplyObjectNumber + partId].expired;
                                        						} else if (verificationStatus === "Expires <30 days") {
                                        							single.expires_less_than_30 = single.expires_less_than_30 + partToRequirement[supplyObjectNumber + partId].expires_less_than_30;
                                        						} else if (verificationStatus === "Expires within 30-90 days") {
                                        							single.expires_within_30_90 = single.expires_within_30_90 + partToRequirement[supplyObjectNumber + partId].expires_within_30_90;
                                        						} else if (verificationStatus === "Expires >90 days") {
                                        							single.expires_greater_than_90 = single.expires_greater_than_90 + partToRequirement[supplyObjectNumber + partId].expires_greater_than_90;
                                        						}
                                        						single.verified = single.verified + partToRequirement[supplyObjectNumber + partId].verified;
                                        						partToOthers[parent] = single;
                                        					});
                                        				}
                                        			} else {
                                        				let single = partToOthers[partId];
                                        				if (single === undefined) {
                                        					single = {
                                        						materials: [],
                                        						articles: [],
                                        						expired: 0,
                                        						expires_less_than_30: 0,
                                        						expires_within_30_90: 0,
                                        						expires_greater_than_90: 0,
                                        						verified: 0
                                        					};
                                        				}
                                        				for (let a = 0; a < articleIds.length; a++) {
                                        					let articleId = articleIds[a];
                                        					if (single.articles.indexOf(articleId) === -1) {
                                        						single.articles.push(articleId);
                                        					}
                                        				}
                                        				if (verificationStatus === "Expired") {
                                        					single.expired = single.expired + partToRequirement[supplyObjectNumber + partId].expired;
                                        				} else if (verificationStatus === "Expires <30 days") {
                                        					single.expires_less_than_30 = single.expires_less_than_30 + partToRequirement[supplyObjectNumber + partId].expires_less_than_30;
                                        				} else if (verificationStatus === "Expires within 30-90 days") {
                                        					single.expires_within_30_90 = single.expires_within_30_90 + partToRequirement[supplyObjectNumber + partId].expires_within_30_90;
                                        				} else if (verificationStatus === "Expires >90 days") {
                                        					single.expires_greater_than_90 = single.expires_greater_than_90 + partToRequirement[supplyObjectNumber + partId].expires_greater_than_90;
                                        				}
                                        				//				if (row.reporting_object) {
                                        				single.verified = single.verified + partToRequirement[supplyObjectNumber + partId].verified;
                                        				//				}
                                        				partToOthers[partId] = single;
                                        			}
                                        		}
                                        	});
                                        	let reqListButtonId = filterInPopups ? "root_mashupcontainer-17_navigationfunction-243-popup_ptcsbutton-12" : "root_mashupcontainer-17_mashupcontainer-235_ptcsbutton-12";
                                        
                                        	for (let i = 0; i < selected_ids.getRowCount(); i++) {
                                        		let partNumber = selected_ids.rows[i].item;
                                        		let partCounts = partToOthers[partNumber];
                                        		if (partCounts === undefined) {
                                        			partCounts = {
                                        				articles: [],
                                        				materials: []
                                        			};
                                        		}
                                        		let mat = (filterInPopups || partCounts.materials.length === 0) ? partCounts.materials.length + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-241','" + partNumber + "#_#Parts','Material count for part #" + partNumber + "')\">" + partCounts.materials.length + "</a>";
                                        		let art = (filterInPopups || partCounts.articles.length === 0) ? partCounts.articles.length + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-239','" + partNumber + "#_#Parts','Article count for part #" + partNumber + "')\">" + partCounts.articles.length + "</a>";
                                        		let expires_greater_than_90 = (filterInPopups || partCounts.expires_greater_than_90 == 0) ? partCounts.expires_greater_than_90 + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Parts','Expires >90 days','Verifications count for part #" + partNumber + "')\">" + partCounts.expires_greater_than_90 + "</a>";
                                        		let expires_within_30_90 = (filterInPopups || partCounts.expires_within_30_90 == 0) ? partCounts.expires_within_30_90 + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Parts','Expires within 30-90 days','Verifications count for part #" + partNumber + "')\">" + partCounts.expires_within_30_90 + "</a>";
                                        		let expires_less_than_30 = (filterInPopups || partCounts.expires_less_than_30 == 0) ? partCounts.expires_less_than_30 + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Parts','Expires <30 days','Verifications count for part #" + partNumber + "')\">" + partCounts.expires_less_than_30 + "</a>";
                                        		let expired = (filterInPopups || partCounts.expired == 0) ? partCounts.expired + "" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + partNumber + "#_#Parts','Expired','Verifications count for part #" + partNumber + "')\">" + partCounts.expired + "</a>";
                                        		let reverification = (partCounts.expires_greater_than_90 + partCounts.expires_within_30_90 + partCounts.expires_less_than_30 + partCounts.expired) == partCounts.verified ? true : false;
                                        		result.AddRow({
                                        			part_id: partNumber,
                                        			part_name: partNumberToName[partNumber],
                                        			sub_supplier: "",
                                        			materials: mat,
                                        			articles: art,
                                        			expires_greater_than_90: expires_greater_than_90,
                                        			expires_within_30_90: expires_within_30_90,
                                        			expires_less_than_30: expires_less_than_30,
                                        			expired: expired,
                                        			reverification: reverification,
                                        			requirement_list: "<img style=\"cursor: pointer;\" height=\"25px !important\" width=\"25px !important\" src='/Thingworx/MediaEntities/IK.DocumentPencilIcon.Media' onclick=\"dashboardRequirementListNavigation('" + reqListButtonId + "','"+partNumber+"')\"/>"
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully. Filter-item[" + filterItem + "] and Selected Ids count[" + selected_ids.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        /**
                                        Fills the materialArticlesToParts object array with:
                                        idArticle + materialArticle = [parent part numbers];
                                        **/
                                        function searchPartInBOMAndReorganize(idArticle, bom, materialArticlesToParts, parentNumber, partNumberToName, hierarchy) {
                                        	let objectType = bom.ObjectType;
                                        	let partNumber = bom.Number;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + partNumber : partNumber;
                                        	partNumberToName[partNumber] = bom.Name;
                                        	if (objectType === "Material") {
                                        		let partLink = Things[databaseThing].getSupplyBOMAssocaitionByHierarchy({
                                        			hierarchy: hierarchy,
                                        			supplier_number: project_number
                                        		});
                                        		if (partLink && partLink.getRowCount() > 0) {
                                        			let item = materialArticlesToParts[partNumber];
                                        			if (item === undefined) {
                                        				item = [];
                                        			}
                                        			if (item.indexOf(parentNumber) < 0) {
                                        				item.push(parentNumber);
                                        			}
                                        			materialArticlesToParts[partNumber] = item;
                                        		}
                                        	}
                                        	let components = bom.Components;
                                        	if (components && components.length > 0) {
                                        		for (let c = 0; c < components.length; c++) {
                                        			let subBOM = components[c];
                                        			searchPartInBOMAndReorganize(idArticle, subBOM, materialArticlesToParts, partNumber, partNumberToName, hierarchy);
                                        		}
                                        	}
                                        }
                                        
                                        function getPartToRequirements(req, partToRequirement) {
                                        	let info = partToRequirement[req.id_supply_object + req.child_number];
                                        	if (info === undefined) {
                                        		info = {
                                        			expires_greater_than_90: 0,
                                        			expires_within_30_90: 0,
                                        			expires_less_than_30: 0,
                                        			expired: 0,
                                        			verified: 0
                                        		};
                                        	}
                                        	if (req.type === "Expires >90 days") {
                                        		info.expires_greater_than_90 = info.expires_greater_than_90 + 1;
                                        	} else if (req.type === "Expires within 30-90 days") {
                                        		info.expires_within_30_90 = info.expires_within_30_90 + 1;
                                        	} else if (req.type === "Expires <30 days") {
                                        		info.expires_less_than_30 = info.expires_less_than_30 + 1;
                                        	} else if (req.type === "Expired") {
                                        		info.expired = info.expired + 1;
                                        	}
                                        	if (req.reporting_object) {
                                        		info.verified = info.verified + 1;
                                        	}
                                        	partToRequirement[req.id_supply_object + req.child_number] = info;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRawDataForDashboard">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRawDataForDashboardNew -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardRawData.DataShape"
                                        });
                                        let requirements = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboard.DataShape"
                                        });
                                        
                                        
                                        const SELECT_REPORTING_OBJECT_FIELDS = "VerificationStatus";
                                        
                                        try {
                                        	let articleBOM = {};
                                        	if (project_number && project_name) {
                                        		let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let partsList = {};
                                        		let articleList = [];
                                        		let requirementsToFetch = []; // keeps all the requirement IDs for all the parts
                                        		let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		let filter = "(ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'IKEA Part')) or ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'Material'))) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good')";
                                        		let classificationjson = Things[odataconnectorthing].getClassificationObjects({
                                        			$filter: filter /* STRING {"dataShape":""} */ ,
                                        			$select: "Number" /* STRING {"dataShape":""} */ ,
                                        			ClfNodeId: "GDSupplyObject"
                                        		});
                                        		if (classificationjson && classificationjson.value.length > 0) {
                                        			let filterParts = "";
                                        			let SEP = ",";
                                        			let classificationValues = classificationjson.value;
                                        			for (let i = 0; i < classificationValues.length; i++) {
                                        				let value = classificationValues[i];
                                        				filterParts += value.Number + SEP;
                                        			}
                                        			if (filterParts.length > 0) {
                                        				filterParts = filterParts.substring(0, filterParts.length - SEP.length);
                                        			}
                                        			let supplypartsWithConfigurableJson = Things[odataconnectorthing].getPostParts({
                                        				numbers: filterParts,
                                        				$expand: "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name,ObjectType;$expand=Traces($select=Uri)))" /* STRING {"dataShape":""} */ ,
                                        				$select: "Name,ObjectType,ConfigurableRevisionLinkDown,CVMClassification,Number"
                                        			});
                                        			let supplyObjects = supplypartsWithConfigurableJson.value;
                                        			supplyObjects.forEach(supplyPart => {
                                        				let ikeapartjson = supplyPart.ConfigurableRevisionLinkDown;
                                        				let supplyObjectNumber = supplyPart.Number;
                                                        let supplyObjectName = supplyPart.Name;
                                                        let classificationAttributes = supplyPart.CVMClassification.ClassificationAttributes;
                                                        let supplyActorName;
                                                        for (let c = 0; c < classificationAttributes.length; c++) {
                                                            if (classificationAttributes[c].InternalName == "com.ikea.GDLegalName") {
                                        					supplyActorName = classificationAttributes[c].Value;
                                        				}
                                                        }
                                        				if (ikeapartjson && ikeapartjson.length > 0) {
                                        					for (let n = 0; n < ikeapartjson.length; n++) {
                                        						let ikeapartvalue = ikeapartjson[n];
                                        						let childNumber = ikeapartvalue.Child.Number;
                                        						let tracesjson = ikeapartvalue.Child.Traces;
                                        						let link = Things[dataBaseThing].getSupplyBOMAssociationByPartAndSupplyObject({
                                        							part_number: childNumber,
                                        							supply_object_number: supplyObjectNumber,
                                        							supplier_number: project_number
                                        						});
                                        						let id_article = "";
                                        						for (let a = 0; a < link.getRowCount(); a++) {
                                        							let articleNumber = link.rows[a].ARTICLE_NUMBER;
                                        							id_article = id_article + articleNumber + ",";
                                        							if (articleList.indexOf(articleNumber) < 0) {
                                        								articleList.push(articleNumber);
                                        							}
                                        						}
                                        						id_article = id_article.substring(0, id_article.length - ",".length);
                                        						if (tracesjson && tracesjson.length > 0) {
                                        							let reqForPart = [];
                                        							for (var k = 0; k < tracesjson.length; k++) {
                                        								var tracesvalue = tracesjson[k];
                                        								var uri = tracesvalue.Uri;
                                        								var reqId = uri.split("=")[1];
                                        								if (requirementsToFetch.indexOf(reqId) === -1) {
                                        									requirementsToFetch.push(reqId);
                                        									reqToFetchInfoTable.AddRow({
                                        										item: reqId.split("-")[0]
                                        									});
                                        								}
                                        								reqForPart.push(reqId);
                                        							}
                                        							partsList[childNumber + supplyObjectNumber] = {};
                                        							partsList[childNumber + supplyObjectNumber].ikeaPartObjectType = ikeapartvalue.Child.ObjectType;
                                        							partsList[childNumber + supplyObjectNumber].ikeaPartNumber = ikeapartvalue.Child.Number;
                                        							partsList[childNumber + supplyObjectNumber].requirements = reqForPart;
                                        							partsList[childNumber + supplyObjectNumber].id_article = id_article;
                                        							partsList[childNumber + supplyObjectNumber].supplyObjectNumber = supplyObjectNumber;
                                                                    partsList[childNumber + supplyObjectNumber].supplyActorName = supplyActorName;
                                                                    partsList[childNumber + supplyObjectNumber].supplyObjectName =supplyObjectName;
                                        						}
                                        					}
                                        				}
                                        			});
                                        			const reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        			let requirementsData;
                                        			let filters = [];
                                        			if (reqToFetchInfoTable.getRowCount() > 0) {
                                        				reqToFetchInfoTable.rows.toArray().forEach(row => {
                                        					filters.push({
                                        						"fieldName": "LiveItemID",
                                        						"type": "EQ",
                                        						"value": row.item
                                        					});
                                        				});
                                        
                                        				let query = {
                                        					"filters": {
                                        						"type": "OR",
                                        						"filters": filters
                                        					}
                                        				};
                                        				requirementsData = reqResourceProviderThing.getObjects({
                                        					query: query
                                        				});
                                        			}
                                        			let distinctVerificationToFetch = [];
                                        			let distinctVerificationToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        				infoTableName: "InfoTable",
                                        				dataShapeName: "GenericStringList"
                                        			});
                                        			let dataToFillWithVerificationTests = [];
                                        			let aggregatedVerificationObjectFetched = {};
                                        			if (partsList && Object.keys(partsList).length > 0) {
                                        				for (let ikeaAndSupplyPartNumber in partsList) {
                                        					let ikeaPart = partsList[ikeaAndSupplyPartNumber];
                                        					let ikeaPartObjectType = ikeaPart.ikeaPartObjectType;
                                        					let ikeaPartNumber = ikeaPart.ikeaPartNumber;
                                        					let supplyObjectNumber = ikeaPart.supplyObjectNumber;
                                                            let supplyActorName = ikeaPart.supplyActorName;
                                                            let supplyObjectName = ikeaPart.supplyObjectName;
                                        					let requirementIds = ikeaPart['requirements'];
                                        					let id_article = ikeaPart.id_article;
                                        
                                        					for (let s = 0; s < requirementIds.length; s++) {
                                        						let rvsId = requirementIds[s]
                                        						let sp;
                                        						let liveIdWithVersions = rvsId.split("-");
                                        						if (liveIdWithVersions.length == 1) {
                                        							//liveItem
                                        							sp = Resources["InfoTableFunctions"].EQFilter({
                                        								fieldName: "ID" /* STRING */ ,
                                        								isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        								t: requirementsData /* INFOTABLE */ ,
                                        								value: rvsId /* STRING */
                                        							});
                                        						} else {
                                        							//versioned item
                                        							let liveItemId = liveIdWithVersions[0];
                                        							let versionId = liveIdWithVersions[1].split(".");
                                        							let majorVersion = versionId[0];
                                        							let minorVersion = versionId[1];
                                        							let query = {
                                        								"filters": {
                                        									"filters": [{
                                        										fieldName: "LiveItemID",
                                        										value: liveItemId,
                                        										type: "EQ"
                                        									}, {
                                        										fieldName: "MajorVersionID",
                                        										value: majorVersion,
                                        										type: "EQ"
                                        									}, {
                                        										fieldName: "MinorVersionID",
                                        										value: minorVersion,
                                        										type: "EQ"
                                        									}, {
                                        										fieldName: "DocumentID",
                                        										type: "MissingValue"
                                        									}],
                                        									"type": "AND"
                                        								}
                                        							};
                                        							params = {
                                        								t: requirementsData /* INFOTABLE */ ,
                                        								query: query /* QUERY */
                                        							};
                                        							// result: INFOTABLE
                                        							sp = Resources["InfoTableFunctions"].Query(params);
                                        						}
                                        						let verifiedBy = sp.VerifiedBy;
                                        						let reportingObjJson;
                                        						if (verifiedBy && verifiedBy.getRowCount() > 0) {
                                        							if (verifiedBy && sp.VerificationDataformat && verifiedBy.getRowCount() == sp.VerificationDataformat.getRowCount()) {
                                        								for (let v = 0; v < verifiedBy.rows.length; v++) {
                                        									let uid = generateGUID();
                                        									let newEntry = {};
                                        									newEntry.uid = uid;
                                        									newEntry.unique_id = uid;
                                        									newEntry.id_article = id_article;
                                        									newEntry.id_part = ikeaPartNumber;
                                        									newEntry.id_rvs = rvsId;
                                        									newEntry.id_rvs_verified = verifiedBy.rows[v].ID;
                                        									newEntry.requirement_title = sp.RequirementTitle;
                                        									newEntry.reporting_object = false;
                                        									newEntry.is_verified = false;
                                        									newEntry.is_delegated = false;
                                        									newEntry.sub_supplier = "";
                                        									newEntry.object_type = ikeaPartObjectType;
                                        									newEntry.child_number = ikeaPartNumber;
                                        									newEntry.verification_type = sp.VerificationDataformat.rows[v].get("Verification Data format");
                                        									newEntry.id_supply_object = supplyObjectNumber;
                                                                            newEntry.supply_object_name = supplyObjectName;
                                                                            newEntry.supplyActor = supplyActorName;
                                        									let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        										requirement_id: newEntry.id_rvs,
                                        										supply_object_id: newEntry.id_supply_object
                                        									});
                                        									newEntry.deadlineDate = deadLine.rows[0].DEADLINE;
                                        
                                        									if (distinctVerificationToFetch.indexOf(newEntry.id_rvs_verified) === -1) {
                                        										distinctVerificationToFetch.push(newEntry.id_rvs_verified);
                                        										distinctVerificationToFetchInfoTable.AddRow({
                                        											item: newEntry.id_rvs_verified
                                        										});
                                        									}
                                        									dataToFillWithVerificationTests.push({
                                        										entry: newEntry
                                        									});
                                        								}
                                        							}
                                        						} else {
                                        							let uid = generateGUID();
                                        							let newEntry = {};
                                        							newEntry.uid = uid;
                                        							newEntry.unique_id = uid;
                                        							newEntry.id_article = id_article;
                                        							newEntry.id_part = ikeaPartNumber;
                                        							newEntry.id_rvs = rvsId;
                                        							newEntry.requirement_title = sp.RequirementTitle;
                                        							newEntry.reporting_object = false;
                                        							newEntry.is_verified = false;
                                        							newEntry.is_delegated = false;
                                        							newEntry.sub_supplier = "";
                                        							newEntry.object_type = ikeaPartObjectType;
                                        							newEntry.child_number = ikeaPartNumber;
                                        							newEntry.verification_type = "No Verification Type Defined";
                                        							newEntry.id_supply_object = supplyObjectNumber;
                                                                    newEntry.supplyActor = supplyActorName;
                                                                     newEntry.supply_object_name = supplyObjectName;
                                        							let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        								requirement_id: newEntry.id_rvs,
                                        								supply_object_id: newEntry.id_supply_object
                                        							});
                                        							newEntry.deadlineDate = deadLine.rows[0].DEADLINE;
                                        							let filterReportingObjJson = ["SupplyObjectID:" + supplyObjectNumber + ";ComponentID:" + ikeaPartNumber + ";RequirementID:" + sp.ID + ";VerificationMethodID:Not_Defined;SupplierDetails:" + project_number];
                                        							let p = {
                                        								"criteriaToMatch": filterReportingObjJson
                                        							};
                                        							let reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        								criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        								$select: SELECT_REPORTING_OBJECT_FIELDS
                                        							});
                                        							if (reportingObjJson !== undefined && reportingObjJson.value !== undefined && reportingObjJson.value.length > 0) {
                                        								let reportingObjValues = reportingObjJson.value;
                                        								let reportingObj = reportingObjValues[0];
                                        								if (reportingObj) {
                                        									if (reportingObj.VerificationStatus == "Verified") {
                                        										newEntry.reporting_object = true;
                                        										newEntry.is_verified = true;
                                        									}
                                        								}
                                        							}
                                        							requirements.AddRow(newEntry);
                                        						}
                                        					}
                                        				}
                                        			}
                                        
                                        			const testResourceProviderThing = Things[Things["IK.CVM.Configuration"].getTestResourceProvider()];
                                        			let verifiedTests;
                                        			if (distinctVerificationToFetchInfoTable.getRowCount() > 0) {
                                        				verifiedTests = testResourceProviderThing.getObjectsByIds({
                                        					ids: distinctVerificationToFetchInfoTable /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        				});
                                        			}
                                        			let filterReportingObjJson = [];
                                        			let dataToFillWithVerificationResults = [];
                                        			let supplierDetails = project_number;
                                        			let reportingObjJson;
                                        			for (let tempEntry in dataToFillWithVerificationTests) {
                                        				let newEntry = dataToFillWithVerificationTests[tempEntry].entry;
                                        				let reqID = newEntry.id_rvs;
                                        
                                        				let tests = Resources["InfoTableFunctions"].EQFilter({
                                        					fieldName: "ID" /* STRING */ ,
                                        					isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        					t: verifiedTests /* INFOTABLE */ ,
                                        					value: newEntry.id_rvs_verified /* STRING */
                                        				});
                                        				let test = tests.rows[0];
                                        				newEntry.id_rvs_verified = test.ID == test.LiveItemID ? test.ID : test.LiveItemID + "-" + test.MajorVersionID + "." + test.MinorVersionID;
                                        				filterReportingObjJson.push("SupplyObjectID:" + newEntry.id_supply_object + ";ComponentID:" + newEntry.id_part + ";RequirementID:" + reqID + ";VerificationMethodID:" + newEntry.id_rvs_verified + ";SupplierDetails:" + supplierDetails);
                                        				dataToFillWithVerificationResults.push({
                                        					entry: newEntry,
                                        					SupplyObjectID: newEntry.id_supply_object,
                                        					ComponentID: newEntry.id_part,
                                        					reqID: reqID,
                                        					verificationMethodId: newEntry.id_rvs_verified,
                                        					supplierDetails: supplierDetails
                                        				});
                                        			}
                                        			if (filterReportingObjJson && filterReportingObjJson.length > 0) {
                                        				let p = {
                                        					"criteriaToMatch": filterReportingObjJson
                                        				};
                                        				reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        					criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        					$expand: undefined /* STRING {"dataShape":""} */ ,
                                        					$select: SELECT_REPORTING_OBJECT_FIELDS + ",SupplyObjectID,ComponentID,RequirementID,VerificationMethodID,SupplierDetails" /* STRING {"dataShape":""} */
                                        				});
                                        			}
                                        
                                        			for (let tempObj in dataToFillWithVerificationResults) {
                                        				let newEntry = dataToFillWithVerificationResults[tempObj].entry;
                                        				let supplyObjectId = dataToFillWithVerificationResults[tempObj].SupplyObjectID;
                                        				let componentId = dataToFillWithVerificationResults[tempObj].ComponentID;
                                        				let reqId = dataToFillWithVerificationResults[tempObj].reqID;
                                        				let verifMethdId = dataToFillWithVerificationResults[tempObj].verificationMethodId;
                                        				let supplierDet = dataToFillWithVerificationResults[tempObj].supplierDetails;
                                        				let reportingObj = reportingObjJson.value.filter(function(item) {
                                        					return (item.SupplyObjectID == supplyObjectId && item.ComponentID == componentId && item.RequirementID == reqId && item.VerificationMethodID == verifMethdId && item.SupplierDetails == supplierDet);
                                        				});
                                        				if (reportingObj !== undefined && reportingObj.length > 0) {
                                        					if (reportingObj[0].VerificationStatus == "Verified") {
                                        						newEntry.reporting_object = true;
                                        						newEntry.is_verified = true;
                                        					}
                                        				}
                                        				requirements.AddRow(newEntry);
                                        			}
                                        
                                        			// retrive all article bom
                                        			let articleFilter = "";
                                        			articleList.forEach(article => {
                                        				articleFilter += article + SEP;
                                        			});
                                        			if (articleFilter.length > 0) {
                                        				// need to get the Article IDs otherwise it's not possible to retrieve the full BOM
                                        				articleFilter = articleFilter.substring(0, articleFilter.length - SEP.length);
                                        				// result: JSON
                                        				let articlesInfo = Things[odataconnectorthing].getPostParts({
                                        					$expand: undefined /* STRING {"dataShape":""} */ ,
                                        					numbers: articleFilter /* STRING [Required] {"dataShape":""} */ ,
                                        					$select: "Number,Name,ObjectType" /* STRING {"dataShape":""} */
                                        				});
                                        				if (articlesInfo.value.length > 0) {
                                        					// for each article, collecting the full BOM structure
                                        					articlesInfo.value.forEach(articleInfo => {
                                        						// result: JSON
                                        						let bom = Things[odataconnectorthing].getPartStructure({
                                        							$expand: "Components($select=PartId;$expand=Part($select=Name,Number,ObjectType);$levels=max)" /* STRING {"dataShape":""} */ ,
                                        							ID: articleInfo.ID /* STRING [Required] {"dataShape":""} */ ,
                                        							$select: "PartNumber,PartName" /* STRING {"dataShape":""} */ ,
                                        							NavigationCriteria: undefined /* STRING {"dataShape":""} */
                                        						});
                                        						articleBOM[articleInfo.Number] = {
                                        							Number: articleInfo.Number,
                                        							Name: articleInfo.Name,
                                        							ObjectType: articleInfo.ObjectType,
                                        							Components: cleanBOMData(bom).Components
                                        						};
                                        					});
                                        				}
                                        			}
                                        		}
                                        		result.AddRow({
                                        			requirements: requirements,
                                        			bomStructures: {
                                        				boms: articleBOM
                                        			}
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully for [" + project_number + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function cleanBOMData(bomData) {
                                        	let partInfo = bomData.Part;
                                        	let res = {};
                                        	if (partInfo) {
                                        		res["Name"] = partInfo.Name;
                                        		res["Number"] = partInfo.Number;
                                        		res["ObjectType"] = partInfo.ObjectType;
                                        	}
                                        	let components = bomData.Components;
                                        	if (components && components.length > 0) {
                                        		let comps = [];
                                        		for (let c = 0; c < components.length; c++) {
                                        			let comp = cleanBOMData(components[c]);
                                        			comps.push(comp);
                                        		}
                                        		res["Components"] = comps;
                                        	}
                                        	return res;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRawDataForDashboardNew">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRawDataForDashboardNew -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardRawData.DataShape"
                                        });
                                        let requirements = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboard.DataShape"
                                        });
                                        const SELECT_REPORTING_OBJECT_FIELDS = "VerificationStatus";
                                        
                                        try {
                                        	let articleBOM = {};
                                        	if (project_number && project_name) {
                                        		let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let partsList = {};
                                        		let articleList = [];
                                        		let requirementsToFetch = []; // keeps all the requirement IDs for all the parts
                                        		let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		let filter = "(ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'IKEA Part')) or ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'Material'))) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDStatus' and d/DisplayValue eq 'Active')";
                                        		let classificationjson = Things[odataconnectorthing].getClassificationObjects({
                                        			$filter: filter /* STRING {"dataShape":""} */ ,
                                        			$select: "Number" /* STRING {"dataShape":""} */ ,
                                        			ClfNodeId: "GDSupplyObject"
                                        		});
                                        		let filterParts = "";
                                        		let SEP = ",";
                                        		let classificationValues = classificationjson.value;
                                        		for (let i = 0; i < classificationValues.length; i++) {
                                        			let value = classificationValues[i];
                                        			filterParts += value.Number + SEP;
                                        		}
                                        		if (filterParts.length > 0) {
                                        			filterParts = filterParts.substring(0, filterParts.length - SEP.length);
                                        		}
                                        		let supplypartsWithConfigurableJson = Things[odataconnectorthing].getPostParts({
                                        			numbers: filterParts,
                                        			$expand: "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name,ObjectType;$expand=Traces($select=Uri)))" /* STRING {"dataShape":""} */ ,
                                        			$select: "Name,ObjectType,ConfigurableRevisionLinkDown,CVMClassification,Number"
                                        		});
                                        		let supplyObjects = supplypartsWithConfigurableJson.value;
                                        		supplyObjects.forEach(supplyPart => {
                                        			let ikeapartjson = supplyPart.ConfigurableRevisionLinkDown;
                                        			let supplyObjectNumber = supplyPart.Number;
                                        			if (ikeapartjson && ikeapartjson.length > 0) {
                                        				for (let n = 0; n < ikeapartjson.length; n++) {
                                        					let ikeapartvalue = ikeapartjson[n];
                                        					let id_article = ikeapartvalue["com.ikea.GDArticleID"];
                                        					let articles = id_article.split(",");
                                        					for (let a = 0; a < articles.length; a++) {
                                        						if (articleList.indexOf(articles[a]) < 0) {
                                        							articleList.push(articles[a]);
                                        						}
                                        					}
                                        					let childNumber = ikeapartvalue.Child.Number;
                                        					let tracesjson = ikeapartvalue.Child.Traces;
                                        					if (tracesjson && tracesjson.length > 0) {
                                        						let reqForPart = [];
                                        						for (var k = 0; k < tracesjson.length; k++) {
                                        							var tracesvalue = tracesjson[k];
                                        							var uri = tracesvalue.Uri;
                                        							var reqId = uri.split("=")[1];
                                        							if (requirementsToFetch.indexOf(reqId) === -1) {
                                        								requirementsToFetch.push(reqId);
                                        								reqToFetchInfoTable.AddRow({
                                        									item: reqId.split("-")[0]
                                        								});
                                        							}
                                        							reqForPart.push(reqId);
                                        						}
                                        						partsList[childNumber + supplyObjectNumber] = {};
                                        						partsList[childNumber + supplyObjectNumber].ikeaPartObjectType = ikeapartvalue.Child.ObjectType;
                                        						partsList[childNumber + supplyObjectNumber].ikeaPartNumber = ikeapartvalue.Child.Number;
                                        						partsList[childNumber + supplyObjectNumber].requirements = reqForPart;
                                        						partsList[childNumber + supplyObjectNumber].id_article = id_article;
                                        						partsList[childNumber + supplyObjectNumber].supplyObjectNumber = supplyObjectNumber;
                                        					}
                                        				}
                                        			}
                                        		});
                                        		const reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        		let requirementsData;
                                        		let filters = [];
                                        		if (reqToFetchInfoTable.getRowCount() > 0) {
                                        			reqToFetchInfoTable.rows.toArray().forEach(row => {
                                        				filters.push({
                                        					"fieldName": "LiveItemID",
                                        					"type": "EQ",
                                        					"value": row.item
                                        				});
                                        			});
                                        
                                        			let query = {
                                        				"filters": {
                                        					"type": "OR",
                                        					"filters": filters
                                        				}
                                        			};
                                        			requirementsData = reqResourceProviderThing.getObjects({
                                        				query: query
                                        			});
                                        		}
                                        		let distinctVerificationToFetch = [];
                                        		let distinctVerificationToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		let dataToFillWithVerificationTests = [];
                                        		let aggregatedVerificationObjectFetched = {};
                                        		if (partsList && Object.keys(partsList).length > 0) {
                                        			for (let ikeaAndSupplyPartNumber in partsList) {
                                        				let ikeaPart = partsList[ikeaAndSupplyPartNumber];
                                        				let ikeaPartObjectType = ikeaPart.ikeaPartObjectType;
                                        				let ikeaPartNumber = ikeaPart.ikeaPartNumber;
                                        				let supplyObjectNumber = ikeaPart.supplyObjectNumber;
                                        				let requirementIds = ikeaPart['requirements'];
                                        				let id_article = ikeaPart.id_article;
                                        
                                        				for (let s = 0; s < requirementIds.length; s++) {
                                        					let rvsId = requirementIds[s]
                                        					let sp;
                                        					let liveIdWithVersions = rvsId.split("-");
                                        					if (liveIdWithVersions.length == 1) {
                                        						//liveItem
                                        						sp = Resources["InfoTableFunctions"].EQFilter({
                                        							fieldName: "ID" /* STRING */ ,
                                        							isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        							t: requirementsData /* INFOTABLE */ ,
                                        							value: rvsId /* STRING */
                                        						});
                                        					} else {
                                        						//versioned item
                                        						let liveItemId = liveIdWithVersions[0];
                                        						let versionId = liveIdWithVersions[1].split(".");
                                        						let majorVersion = versionId[0];
                                        						let minorVersion = versionId[1];
                                        						let query = {
                                        							"filters": {
                                        								"filters": [{
                                        									fieldName: "LiveItemID",
                                        									value: liveItemId,
                                        									type: "EQ"
                                        								}, {
                                        									fieldName: "MajorVersionID",
                                        									value: majorVersion,
                                        									type: "EQ"
                                        								}, {
                                        									fieldName: "MinorVersionID",
                                        									value: minorVersion,
                                        									type: "EQ"
                                        								}, {
                                        									fieldName: "DocumentID",
                                        									type: "MissingValue"
                                        								}],
                                        								"type": "AND"
                                        							}
                                        						};
                                        						params = {
                                        							t: requirementsData /* INFOTABLE */ ,
                                        							query: query /* QUERY */
                                        						};
                                        						// result: INFOTABLE
                                        						sp = Resources["InfoTableFunctions"].Query(params);
                                        					}
                                        					let verifiedBy = sp.VerifiedBy;
                                        					let reportingObjJson;
                                        					if (verifiedBy && verifiedBy.getRowCount() > 0) {
                                        						if (verifiedBy && sp.VerificationDataformat && verifiedBy.getRowCount() == sp.VerificationDataformat.getRowCount()) {
                                        							for (let v = 0; v < verifiedBy.rows.length; v++) {
                                        								let uid = generateGUID();
                                        								let newEntry = {};
                                        								newEntry.uid = uid;
                                        								newEntry.unique_id = uid;
                                        								newEntry.id_article = id_article;
                                        								newEntry.id_part = ikeaPartNumber;
                                        								newEntry.id_rvs = rvsId;
                                        								newEntry.id_rvs_verified = verifiedBy.rows[v].ID;
                                        								newEntry.requirement_title = sp.RequirementTitle;
                                        								newEntry.reporting_object = false;
                                        								newEntry.is_verified = false;
                                        								newEntry.is_delegated = false;
                                        								newEntry.sub_supplier = "";
                                        								newEntry.object_type = ikeaPartObjectType;
                                        								newEntry.child_number = ikeaPartNumber;
                                        								newEntry.verification_type = sp.VerificationDataformat.rows[v].get("Verification Data format");
                                        								newEntry.id_supply_object = supplyObjectNumber;
                                        								let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        									requirement_id: newEntry.id_rvs,
                                        									supply_object_id: newEntry.id_supply_object
                                        								});
                                        								newEntry.deadlineDate = deadLine.rows[0].DEADLINE;
                                        
                                        								if (distinctVerificationToFetch.indexOf(newEntry.id_rvs_verified) === -1) {
                                        									distinctVerificationToFetch.push(newEntry.id_rvs_verified);
                                        									distinctVerificationToFetchInfoTable.AddRow({
                                        										item: newEntry.id_rvs_verified
                                        									});
                                        								}
                                        								dataToFillWithVerificationTests.push({
                                        									entry: newEntry
                                        								});
                                        							}
                                        						}
                                        					} else {
                                        						let uid = generateGUID();
                                        						let newEntry = {};
                                        						newEntry.uid = uid;
                                        						newEntry.unique_id = uid;
                                        						newEntry.id_article = id_article;
                                        						newEntry.id_part = ikeaPartNumber;
                                        						newEntry.id_rvs = rvsId;
                                        						newEntry.id_rvs_verified = "Not_Defined";
                                        						newEntry.requirement_title = sp.RequirementTitle;
                                        						newEntry.reporting_object = false;
                                        						newEntry.is_verified = false;
                                        						newEntry.is_delegated = false;
                                        						newEntry.sub_supplier = "";
                                        						newEntry.object_type = ikeaPartObjectType;
                                        						newEntry.child_number = ikeaPartNumber;
                                        						newEntry.verification_type = "No Verification Type Defined";
                                        						newEntry.id_supply_object = supplyObjectNumber;
                                        						let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        							requirement_id: newEntry.id_rvs,
                                        							supply_object_id: newEntry.id_supply_object
                                        						});
                                        						newEntry.deadlineDate = deadLine.rows[0].DEADLINE;
                                        						let filterReportingObjJson = ["SupplyObjectID:" + supplyObjectNumber + ";ComponentID:" + ikeaPartNumber + ";RequirementID:" + sp.ID + ";VerificationMethodID:Not_Defined;SupplierDetails:" + project_number];
                                        						let p = {
                                        							"criteriaToMatch": filterReportingObjJson
                                        						};
                                        						let reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        							criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        							$select: SELECT_REPORTING_OBJECT_FIELDS
                                        						});
                                        						if (reportingObjJson !== undefined && reportingObjJson.value !== undefined && reportingObjJson.value.length > 0) {
                                        							let reportingObjValues = reportingObjJson.value;
                                        							let reportingObj = reportingObjValues[0];
                                        							if (reportingObj) {
                                        								if (reportingObj.VerificationStatus == "Verified") {
                                        									newEntry.reporting_object = true;
                                        									newEntry.is_verified = true;
                                        								}
                                        							}
                                        						}
                                        						requirements.AddRow(newEntry);
                                        					}
                                        				}
                                        			}
                                        		}
                                        
                                        		const testResourceProviderThing = Things[Things["IK.CVM.Configuration"].getTestResourceProvider()];
                                        		let verifiedTests;
                                        		if (distinctVerificationToFetchInfoTable.getRowCount() > 0) {
                                        			verifiedTests = testResourceProviderThing.getObjectsByIds({
                                        				ids: distinctVerificationToFetchInfoTable /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        			});
                                        		}
                                        		let filterReportingObjJson = [];
                                        		let dataToFillWithVerificationResults = [];
                                        		let supplierDetails = project_number;
                                        		let reportingObjJson;
                                        		for (let tempEntry in dataToFillWithVerificationTests) {
                                        			let newEntry = dataToFillWithVerificationTests[tempEntry].entry;
                                        			let reqID = newEntry.id_rvs;
                                        
                                        			let tests = Resources["InfoTableFunctions"].EQFilter({
                                        				fieldName: "ID" /* STRING */ ,
                                        				isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        				t: verifiedTests /* INFOTABLE */ ,
                                        				value: newEntry.id_rvs_verified /* STRING */
                                        			});
                                        			let test = tests.rows[0];
                                        			newEntry.id_rvs_verified = test.ID == test.LiveItemID ? test.ID : test.LiveItemID + "-" + test.MajorVersionID + "." + test.MinorVersionID;
                                        			filterReportingObjJson.push("SupplyObjectID:" + newEntry.id_supply_object + ";ComponentID:" + newEntry.id_part + ";RequirementID:" + reqID + ";VerificationMethodID:" + newEntry.id_rvs_verified + ";SupplierDetails:" + supplierDetails);
                                        			dataToFillWithVerificationResults.push({
                                        				entry: newEntry,
                                        				SupplyObjectID: newEntry.id_supply_object,
                                        				ComponentID: newEntry.id_part,
                                        				reqID: reqID,
                                        				verificationMethodId: newEntry.id_rvs_verified,
                                        				supplierDetails: supplierDetails
                                        			});
                                        		}
                                        		if (filterReportingObjJson && filterReportingObjJson.length > 0) {
                                        			let p = {
                                        				"criteriaToMatch": filterReportingObjJson
                                        			};
                                        			reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        				criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        				$expand: undefined /* STRING {"dataShape":""} */ ,
                                        				$select: SELECT_REPORTING_OBJECT_FIELDS + ",SupplyObjectID,ComponentID,RequirementID,VerificationMethodID,SupplierDetails" /* STRING {"dataShape":""} */
                                        			});
                                        		}
                                        
                                        		for (let tempObj in dataToFillWithVerificationResults) {
                                        			let newEntry = dataToFillWithVerificationResults[tempObj].entry;
                                        			let supplyObjectId = dataToFillWithVerificationResults[tempObj].SupplyObjectID;
                                        			let componentId = dataToFillWithVerificationResults[tempObj].ComponentID;
                                        			let reqId = dataToFillWithVerificationResults[tempObj].reqID;
                                        			let verifMethdId = dataToFillWithVerificationResults[tempObj].verificationMethodId;
                                        			let supplierDet = dataToFillWithVerificationResults[tempObj].supplierDetails;
                                        			let reportingObj = reportingObjJson.value.filter(function(item) {
                                        				return (item.SupplyObjectID == supplyObjectId && item.ComponentID == componentId && item.RequirementID == reqId && item.VerificationMethodID == verifMethdId && item.SupplierDetails == supplierDet);
                                        			});
                                        			if (reportingObj !== undefined && reportingObj.length > 0) {
                                        				if (reportingObj[0].VerificationStatus == "Verified") {
                                        					newEntry.reporting_object = true;
                                        					newEntry.is_verified = true;
                                        				}
                                        			}
                                        			requirements.AddRow(newEntry);
                                        		}
                                        
                                        		// retrive all article bom
                                        		let articleFilter = "";
                                        		articleList.forEach(article => {
                                        			articleFilter += article + SEP;
                                        		});
                                        		if (articleFilter.length > 0) {
                                        			// need to get the Article IDs otherwise it's not possible to retrieve the full BOM
                                        			articleFilter = articleFilter.substring(0, articleFilter.length - SEP.length);
                                        			// result: JSON
                                        			let articlesInfo = Things[odataconnectorthing].getPostParts({
                                        				$expand: undefined /* STRING {"dataShape":""} */ ,
                                        				numbers: articleFilter /* STRING [Required] {"dataShape":""} */ ,
                                        				$select: "Number,Name,ObjectType" /* STRING {"dataShape":""} */
                                        			});
                                        			if (articlesInfo.value.length > 0) {
                                        				// for each article, collecting the full BOM structure
                                        				articlesInfo.value.forEach(articleInfo => {
                                        					// result: JSON
                                        					let bom = Things[odataconnectorthing].getPartStructure({
                                        						$expand: "Components($select=PartId;$expand=Part($select=Name,Number,ObjectType);$levels=max)" /* STRING {"dataShape":""} */ ,
                                        						ID: articleInfo.ID /* STRING [Required] {"dataShape":""} */ ,
                                        						$select: "PartNumber,PartName" /* STRING {"dataShape":""} */ ,
                                        						NavigationCriteria: undefined /* STRING {"dataShape":""} */
                                        					});
                                        					articleBOM[articleInfo.Number] = {
                                        						Number: articleInfo.Number,
                                        						Name: articleInfo.Name,
                                        						ObjectType: articleInfo.ObjectType,
                                        						Components: cleanBOMData(bom).Components
                                        					};
                                        				});
                                        			}
                                        		}
                                        	}
                                        
                                        
                                        	result.AddRow({
                                        		requirements: requirements,
                                        		bomStructures: {
                                        			boms: articleBOM
                                        		}
                                        	});
                                        	logger.info(FN + "executed successfully for [" + project_number + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function cleanBOMData(bomData) {
                                        	let partInfo = bomData.Part;
                                        	let res = {};
                                        	if (partInfo) {
                                        		res["Name"] = partInfo.Name;
                                        		res["Number"] = partInfo.Number;
                                        		res["ObjectType"] = partInfo.ObjectType;
                                        	}
                                        	let components = bomData.Components;
                                        	if (components && components.length > 0) {
                                        		let comps = [];
                                        		for (let c = 0; c < components.length; c++) {
                                        			let comp = cleanBOMData(components[c]);
                                        			comps.push(comp);
                                        		}
                                        		res["Components"] = comps;
                                        	}
                                        	return res;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRawDataForNewItems">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRawDataForNewItems -> ";
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        let dbconnectorthing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        const expandPart = "Part($select=ID,ObjectType;$expand=Traces($select=Uri),ConfigurableRevisionLinkUp($expand=Parent($select=Number)))";
                                        const selectComponents = "PartId,PartName,PartNumber";
                                        const exp = expandPart + ",Components($select=" + selectComponents + ";$expand=" + expandPart + ";$levels=max)";
                                        let missing_connections = 0;
                                        let missing_verifications = 0;
                                        let completed_verifications = 0;
                                        
                                        let articleDetails = [];
                                        let partAndReq = [];
                                        let partAndSupplyObject = [];
                                        try
                                        {
                                            let articleIds = article_ids.split(",");
                                            for (let articleId = 0 ; articleId < articleIds.length; articleId++)
                                            {
                                                let id = articleIds[articleId];
                                                logger.debug("article id" + typeof(id));
                                                let structure = Things[odataconnectorthing].getPartStructure({
                                        				$expand: exp /* STRING {"dataShape":""} */ ,
                                        				ID: id /* STRING [Required] {"dataShape":""} */ ,
                                        				NavigationCriteria: {} /* STRING {"dataShape":""} */ ,
                                        				$select: selectComponents /* STRING {"dataShape":""} */
                                        			});
                                                let hierarchy = "";
                                                if (structure) {
                                        				countDataRecursively(structure, hierarchy);
                                        			}
                                                
                                            }
                                        }
                                        catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        function countDataRecursively(jsonInput, hierarchy) {
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + jsonInput.PartNumber : jsonInput.PartNumber;
                                        	const jsonPart = jsonInput.Part;
                                        	const jsonTraces = jsonPart.Traces;
                                        	const innerComponents = jsonInput.Components;
                                        	let requirements = [];
                                        
                                        	let link = Things[dbconnectorthing].getSupplyBOMAssocaitionByHierarchy({
                                        		hierarchy: hierarchy,
                                        		supplier_number: project_number
                                        	});
                                        	if (!link || link.getRowCount() == 0) {
                                        		if (jsonPart.ObjectType !== "Item Structure") {
                                        			missing_connections++;
                                                    return missing_connections;
                                        		}
                                                logger.debug("after return");
                                        	} else {
                                        		let partNumber = jsonInput.PartNumber;
                                        		let supplyObjectNumber = link.rows[0].SUPPLY_OBJECT_NUMBER;
                                        		if (partAndSupplyObject.indexOf(partNumber + supplyObjectNumber) == -1) {
                                        			partAndSupplyObject.push(partNumber + supplyObjectNumber);
                                        			let obj = {
                                        				partNumber: partNumber,
                                        				supplyObjectNumber: supplyObjectNumber
                                        			};
                                        			let requirements = [];
                                        			if (jsonTraces && jsonTraces.length > 0) {
                                        				for (let k = 0; k < jsonTraces.length; k++) {
                                        					let tracesvalue = jsonTraces[k];
                                        					let uri = tracesvalue.Uri;
                                        					let reqId = uri.split("=")[1];
                                        					if (requirements.indexOf(reqId) === -1) {
                                        						requirements.push(reqId);
                                        						reqToFetchInfoTable.AddRow({
                                        							item: reqId.split("-")[0]
                                        						});
                                        					}
                                        				}
                                        				obj.requirements = requirements;
                                        			}
                                        			partAndReq.push(obj);
                                        		}
                                        	}
                                        	for (let c = 0; innerComponents !== undefined && c < innerComponents.length; c++) {
                                        		countDataRecursively(innerComponents[c], hierarchy);
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSavedSearch">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSavedSearch -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.SavedSeach.DataShape"
                                        });
                                        
                                        try {
                                        	result.AddRow({
                                        		name: "2022/12/09",
                                        		editAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IK.Media.Skapa.Pencil'/>",
                                        		deleteAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' />"
                                        	});
                                        	result.AddRow({
                                        		name: "2022/12/07",
                                        		editAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IK.Media.Skapa.Pencil'/>",
                                        		deleteAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' />"
                                        	});
                                        	result.AddRow({
                                        		name: "2022/12/06",
                                        		editAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IK.Media.Skapa.Pencil'/>",
                                        		deleteAction: "<img style=\"cursor: pointer;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' />"
                                        	});
                                        	logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSubsuppliersCountDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSubsuppliersCountDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardSubsuppliersCount.DataShape"
                                        });
                                        
                                        let materialArticlesToParts = {};
                                        let databaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        try {
                                        	let boms = JSON.parse(bomStructures).boms;
                                        	for (let article in boms) {
                                        		let bom = boms[article];
                                        		searchPartInBOMAndReorganize(bom.Number, bom, materialArticlesToParts, "", "");
                                        	}
                                        	let subSuppliers = [];
                                        	for (let i = 0; i < selected_ids.getRowCount(); i++) {
                                        		let sub_supplier = selected_ids.rows[i].item;
                                        		if (!subSuppliers.includes(sub_supplier)) {
                                        			subSuppliers.push(sub_supplier);
                                        			let obj = count(sub_supplier);
                                        			let reverification = (obj.expires_greater_than_90 + obj.expires_within_30_90 + obj.expires_less_than_30 + obj.expired) == obj.verified ? true : false;
                                        			result.AddRow({
                                        				subsupplier_id: sub_supplier,
                                        				subsupplier_name: sub_supplier,
                                        				tier_number: "2",
                                        				articles: (obj.articles === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-239','" + sub_supplier + "#_#Subsuppliers','Article count for subsupplier #" + sub_supplier + "')\">" + obj.articles + "</a>",
                                        				parts: (obj.parts === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-240','" + sub_supplier + "#_#Subsuppliers','Part count for subsupplier #" + sub_supplier + "')\">" + obj.parts + "</a>",
                                        				materials: (obj.materials === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-241','" + sub_supplier + "#_#Subsuppliers','Material count for subsupplier #" + sub_supplier + "')\">" + obj.materials + "</a>",
                                        				expires_greater_than_90: (obj.expires_greater_than_90 === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + sub_supplier + "#_#Subsuppliers','Expires >90 days','Verifications count for subsupplier #" + sub_supplier + "')\">" + obj.expires_greater_than_90 + "</a>",
                                        				expires_within_30_90: (obj.expires_within_30_90 === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + sub_supplier + "#_#Subsuppliers','Expires within 30-90 days','Verifications count for subsupplier #" + sub_supplier + "')\">" + obj.expires_within_30_90 + "</a>",
                                        				expires_less_than_30: (obj.expires_less_than_30 === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + sub_supplier + "#_#Subsuppliers','Expires <30 days','Verifications count for subsupplier #" + sub_supplier + "')\">" + obj.expires_less_than_30 + "</a>",
                                        				expired: (obj.expired === 0) ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + sub_supplier + "#_#Subsuppliers','Expired','Verifications count for subsupplier #" + sub_supplier + "')\">" + obj.expired + "</a>",
                                        				reverification: reverification,
                                        				requirement_list: "<img style=\"cursor: pointer;\" height=\"25px !important\" width=\"25px !important\" src='/Thingworx/MediaEntities/IK.DocumentPencilIcon.Media' onclick=\"dashboardRequirementListNavigation('root_mashupcontainer-17_mashupcontainer-235_ptcsbutton-12','')\"/>"
                                        			});
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully. Selected Ids count[" + selected_ids.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function count(sub_supplier) {
                                        	let materials = [];
                                        	let parts = [];
                                        	let articles = [];
                                        	let expires_greater_than_90 = 0;
                                        	let expires_within_30_90 = 0;
                                        	let expires_less_than_30 = 0;
                                        	let expired = 0;
                                        	let verified = 0;
                                        	for (let i = 0; i < requirements.getRowCount(); i++) {
                                        		let reqRow = requirements.rows[i];
                                        		let type = reqRow.type;
                                        		let articleIds = reqRow.id_article.split(",");
                                        
                                        		if (reqRow.sub_supplier == sub_supplier) {
                                        			if (type == "Expired") {
                                        				expired++;
                                        			} else if (type == "Expires <30 days") {
                                        				expires_less_than_30++;
                                        			} else if (type == "Expires within 30-90 days") {
                                        				expires_within_30_90++;
                                        			} else if (type == "Expires >90 days") {
                                        				expires_greater_than_90++;
                                        			}
                                        			if (reqRow.reporting_object) {
                                        				verified++;
                                        			}
                                        			if (reqRow.object_type == "Material" && !materials.includes(reqRow.child_number)) {
                                        				materials.push(reqRow.child_number);
                                        				let parents = materialArticlesToParts[reqRow.child_number];
                                        				if (parents && parents.length > 0) {
                                        					for (let index in parents) {
                                        						let parent = parents[index];
                                        						if (!parts.includes(parent)) {
                                        							parts.push(parent);
                                        						}
                                        					}
                                        				}
                                        				for (let a = 0; a < articleIds.length; a++) {
                                        					if (!articles.includes(articleIds[a])) {
                                        						articles.push(articleIds[a]);
                                        					}
                                        				}
                                        			} else if (reqRow.object_type == "IKEA Part" && !parts.includes(reqRow.child_number)) {
                                        				parts.push(reqRow.child_number);
                                        				for (let a = 0; a < articleIds.length; a++) {
                                        					if (!articles.includes(articleIds[a])) {
                                        						articles.push(articleIds[a]);
                                        					}
                                        				}
                                        			}
                                        		}
                                        	}
                                        	return {
                                        		materials: materials.length,
                                        		parts: parts.length,
                                        		articles: articles.length,
                                        		expires_greater_than_90: expires_greater_than_90,
                                        		expires_within_30_90: expires_within_30_90,
                                        		expires_less_than_30: expires_less_than_30,
                                        		expired: expired,
                                        		verified: verified
                                        	};
                                        }
                                        
                                        /**
                                        Fills the materialArticlesToParts object array with:
                                        idArticle + materialArticle = [parent part numbers];
                                        **/
                                        function searchPartInBOMAndReorganize(idArticle, bom, materialArticlesToParts, parentNumber, hierarchy) {
                                        	let objectType = bom.ObjectType;
                                        	let partNumber = bom.Number;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + partNumber : partNumber;
                                        	if (objectType === "Material") {
                                        		let partLink = Things[databaseThing].getSupplyBOMAssocaitionByHierarchy({
                                        			hierarchy: hierarchy,
                                        			supplier_number: project_number
                                        		});
                                        		if (partLink && partLink.getRowCount() > 0) {
                                        			let item = materialArticlesToParts[partNumber];
                                        			if (item === undefined) {
                                        				item = [];
                                        			}
                                        			if (item.indexOf(parentNumber) < 0) {
                                        				item.push(parentNumber);
                                        			}
                                        			materialArticlesToParts[partNumber] = item;
                                        		}
                                        	}
                                        	let components = bom.Components;
                                        	if (components && components.length > 0) {
                                        		for (let c = 0; c < components.length; c++) {
                                        			let subBOM = components[c];
                                        			searchPartInBOMAndReorganize(idArticle, subBOM, materialArticlesToParts, partNumber, hierarchy);
                                        		}
                                        	}
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSubSuppliersGridData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSubSuppliersGridData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardData.DataShape"
                                        });
                                        let selected_ids_expired = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_lessthan_30 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_within_30_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_greaterthan_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let label = "Sub suppliers";
                                        	let expired_subsuppliers = [];
                                        	let lessthan_30_subsuppliers = [];
                                        	let within_30_90_subsuppliers = [];
                                        	let greaterthan_90_subsuppliers = [];
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let idArticle = row.id_article;
                                        		let childNumber = row.child_number;
                                        		let isDelegated = row.is_delegated;
                                        		let subsupplier = row.sub_supplier;
                                        		let objectType = row.object_type;
                                        		let type = row.type;
                                        		if (type == "Expired" && isDelegated) {
                                        			if (!expired_subsuppliers.includes(subsupplier)) {
                                        				selected_ids_expired.AddRow({
                                        					item: subsupplier
                                        				});
                                        				expired_subsuppliers.push(subsupplier);
                                        			}
                                        		} else if (type == "Expires <30 days" && isDelegated) {
                                        			if (!lessthan_30_subsuppliers.includes(subsupplier) && !expired_subsuppliers.includes(subsupplier)) {
                                        				selected_ids_lessthan_30.AddRow({
                                        					item: subsupplier
                                        				});
                                        				lessthan_30_subsuppliers.push(subsupplier);
                                        			}
                                        		} else if (type == "Expires within 30-90 days" && isDelegated) {
                                        			if (!within_30_90_subsuppliers.includes(subsupplier) && !lessthan_30_subsuppliers.includes(subsupplier) && !expired_subsuppliers.includes(subsupplier)) {
                                        				selected_ids_within_30_90.AddRow({
                                        					item: subsupplier
                                        				});
                                        				within_30_90_subsuppliers.push(subsupplier);
                                        			}
                                        		} else if (type == "Expires >90 days" && isDelegated) {
                                        			if (!greaterthan_90_subsuppliers.includes(subsupplier) && !within_30_90_subsuppliers.includes(subsupplier) && !lessthan_30_subsuppliers.includes(subsupplier) && !expired_subsuppliers.includes(subsupplier)) {
                                        				selected_ids_greaterthan_90.AddRow({
                                        					item: subsupplier
                                        				});
                                        				greaterthan_90_subsuppliers.push(subsupplier);
                                        			}
                                        		}
                                        	}
                                        
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + expired_subsuppliers.length + " sub suppliers </b><br/>With verifications expired</p>",
                                        		count: expired_subsuppliers.length,
                                        		description: "With verifications expired",
                                        		icon: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        		style: "IK.SD.Expired",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountSubSuppliers.Mashup",
                                        		selected_ids: selected_ids_expired,
                                        		title: "Subsupplier count - expired verifications"
                                        	});
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + lessthan_30_subsuppliers.length + " sub suppliers </b><br/>With verifications expiring <30 days</p>",
                                        		count: lessthan_30_subsuppliers.length,
                                        		description: "With verifications expiring <30 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        		style: "IK.SD.ExpiresLessThan30Days",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountSubSuppliers.Mashup",
                                        		selected_ids: selected_ids_lessthan_30,
                                        		title: "Subsupplier count - expiring <30 days verifications"
                                        	});
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + within_30_90_subsuppliers.length + " sub suppliers </b><br/>With verifications expiring within 30-90 days</p>",
                                        		count: within_30_90_subsuppliers.length,
                                        		description: "With verifications expiring within 30-90 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        		style: "IK.SD.ExpiresWithin30To90Days",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountSubSuppliers.Mashup",
                                        		selected_ids: selected_ids_within_30_90,
                                        		title: "Subsupplier count - expiring within 30-90 days verifications"
                                        	});
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + greaterthan_90_subsuppliers.length + " sub suppliers </b><br/>With verifications expiring >90 days</p>",
                                        		count: greaterthan_90_subsuppliers.length,
                                        		description: "With verifications expiring >90 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        		style: "IK.SD.ExpiresGreaterThan90Days",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountSubSuppliers.Mashup",
                                        		selected_ids: selected_ids_greaterthan_90,
                                        		title: "Subsupplier count - expiring >90 days verifications"
                                        	});
                                        	logger.info(FN + "executed successfully. Requirements count[" + data.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSupplyObjectsCountDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSupplyObjectsCountDetails -> ";
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(CVM.ComplianceDashboardSupplyObjectsCount.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "CVM.ComplianceDashboardSupplyObjectsCount.DataShape"
                                        });
                                        
                                        try {
                                        	let selectedIds = [];
                                        	let supplyObjects = {};
                                        	let reqListButtonId = "root_mashupcontainer-17_mashupcontainer-235_ptcsbutton-12";
                                        	for (let i = 0; i < selected_ids.getRowCount(); i++) {
                                        		selectedIds.push(selected_ids.rows[i].item);
                                        	}
                                        
                                        	for (let i = 0; i < requirements.getRowCount(); i++) {
                                        		let row = requirements.rows[i];
                                        		let supplyObjectNumber = row.id_supply_object;
                                        		let articleNumbers = row.id_article.split(",");
                                        		let order = row.order;
                                        		if (selectedIds.includes(supplyObjectNumber)) {
                                        			if (supplyObjects[supplyObjectNumber] == null) {
                                        				supplyObjects[supplyObjectNumber] = {};
                                        				supplyObjects[supplyObjectNumber].supplyObjectNumber = supplyObjectNumber;
                                        				supplyObjects[supplyObjectNumber].supplyObjectName = row.supply_object_name;
                                        				supplyObjects[supplyObjectNumber].supplyActor = row.supplyActor;
                                        				supplyObjects[supplyObjectNumber].articles = [];
                                        				supplyObjects[supplyObjectNumber].expired = 0;
                                        				supplyObjects[supplyObjectNumber].expiresLessThan30 = 0;
                                        				supplyObjects[supplyObjectNumber].expiresWithin30To90 = 0;
                                        				supplyObjects[supplyObjectNumber].expiresMoreThan90 = 0;
                                        				supplyObjects[supplyObjectNumber].reverification = true;
                                        			}
                                        			for (let j = 0; j < articleNumbers.length; j++) {
                                        				if (!supplyObjects[supplyObjectNumber].articles.includes(articleNumbers[j])) {
                                        					supplyObjects[supplyObjectNumber].articles.push(articleNumbers[j]);
                                        				}
                                        			}
                                        			if (order == 1) {
                                        				supplyObjects[supplyObjectNumber].expired++;
                                        			} else if (order == 2) {
                                        				supplyObjects[supplyObjectNumber].expiresLessThan30++;
                                        			} else if (order == 3) {
                                        				supplyObjects[supplyObjectNumber].expiresWithin30To90++;
                                        			} else if (order == 4) {
                                        				supplyObjects[supplyObjectNumber].expiresMoreThan90++;
                                        			}
                                        
                                        			if (supplyObjects[supplyObjectNumber].reverification && (!row.is_verified)) {
                                        				supplyObjects[supplyObjectNumber].reverification = false;
                                        			}
                                        		}
                                        	}
                                        	logger.debug("supplyObjects" + JSON.stringify(supplyObjects));
                                        	for (let i = 0; i < selectedIds.length; i++) {
                                        		let supplyObjectNumber = selectedIds[i];
                                        		result.AddRow({
                                        			supply_object_id: supplyObjects[supplyObjectNumber].supplyObjectNumber,
                                        			supply_object_name: supplyObjects[supplyObjectNumber].supplyObjectName,
                                        			supply_actor_name: supplyObjects[supplyObjectNumber].supplyActor,
                                        			articles: supplyObjects[supplyObjectNumber].articles.length == 0 ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('root_mashupcontainer-17_ptcsbutton-239','" + supplyObjectNumber + "#_#SupplyObjects','Article count for supply object #" + supplyObjectNumber + "')\">" + supplyObjects[supplyObjectNumber].articles.length + "</a>",
                                        			expires_greater_than_90: supplyObjects[supplyObjectNumber].expiresMoreThan90 == 0 ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + supplyObjectNumber + "#_#SupplyObjects','Expires >90 days','Verifications count for supply object #" + supplyObjectNumber + "')\">" + supplyObjects[supplyObjectNumber].expiresMoreThan90 + "</a>",
                                        			expires_within_30_90: supplyObjects[supplyObjectNumber].expiresWithin30To90 == 0 ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + supplyObjectNumber + "#_#SupplyObjects','Expires within 30-90 days','Verifications count for supply object #" + supplyObjectNumber + "')\">" + supplyObjects[supplyObjectNumber].expiresWithin30To90 + "</a>",
                                        			expires_less_than_30: supplyObjects[supplyObjectNumber].expiresLessThan30 == 0 ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + supplyObjectNumber + "#_#SupplyObjects','Expires <30 days','Verifications count for supply object #" + supplyObjectNumber + "')\">" + supplyObjects[supplyObjectNumber].expiresLessThan30 + "</a>",
                                        			expired: supplyObjects[supplyObjectNumber].expired ==0 ? "0" : "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardVerificationNavigation('root_mashupcontainer-17_ptcsbutton-247','" + supplyObjectNumber + "#_#SupplyObjects','Expired','Verifications count for supply object #" + supplyObjectNumber + "')\">" + supplyObjects[supplyObjectNumber].expired + "</a>",
                                        			reverification: supplyObjects[supplyObjectNumber].reverification,
                                        			requirement_list: "<img style=\"cursor: pointer;\" height=\"25px !important\" width=\"25px !important\" src='/Thingworx/MediaEntities/IK.DocumentPencilIcon.Media' onclick=\"dashboardRequirementListNavigation('" + reqListButtonId + "','')\"/>"
                                        		});
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSupplyObjectsGridData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSupplyObjectsGridData -> ";
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.ComplianceDashboardData.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardData.DataShape"
                                        });
                                        let selected_ids_expired = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_lessthan_30 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_within_30_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_greaterthan_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        //let selected_ids_expired_arr = [];
                                        
                                        
                                        let supply_objects = [];
                                        let supply_objects_expired = 0;
                                        let supply_objects_lessthan_30 = 0;
                                        let supply_objects_within_30_90 = 0;
                                        let supply_objects_greaterthan_90 = 0;
                                        let article_expired = [];
                                        let article_lessthan_30 = [];
                                        let article_within_30_90 = [];
                                        let article_greaterthan_90 = [];
                                        
                                        
                                        try {
                                        	for (let count = 0; count < data.getRowCount(); count++) {
                                        		let rowData = data.rows[count];
                                        		let idArticle = rowData.id_article.split(",");
                                        		if (!supply_objects.includes(rowData.id_supply_object)) {
                                        			supply_objects.push(rowData.id_supply_object);
                                        			// Getting the Count of supply objects and articles that falls under each criteria
                                        			switch (rowData.order) {
                                        				case 1:
                                        					supply_objects_expired++;
                                                            
                                                            selected_ids_expired.AddRow({
                                        								item: rowData.id_supply_object
                                        							});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!article_expired.includes(idArticle[a])) {
                                        							article_expired.push(idArticle[a]);
                                        						}
                                        					}
                                        					break;
                                        				case 2:
                                        					supply_objects_lessthan_30++;
                                                            selected_ids_lessthan_30.AddRow({
                                        								item: rowData.id_supply_object
                                        							});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!article_lessthan_30.includes(idArticle[a])) {
                                        							article_lessthan_30.push(idArticle[a]);
                                        						}
                                        					}
                                        					break;
                                        				case 3:
                                        					supply_objects_within_30_90++;
                                        //                    selected_ids_expired_arr.push(rowData.id_supply_object)
                                                            selected_ids_within_30_90.AddRow({
                                        								item: rowData.id_supply_object
                                        							});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!article_within_30_90.includes(idArticle[a])) {
                                        							article_within_30_90.push(idArticle[a]);
                                        						}
                                        					}
                                        					break;
                                        				case 4:
                                        					supply_objects_greaterthan_90++;
                                                            selected_ids_greaterthan_90.AddRow({
                                        								item: rowData.id_supply_object
                                        							});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!article_greaterthan_90.includes(idArticle[a])) {
                                        							article_greaterthan_90.push(idArticle[a]);
                                        						}
                                        					}
                                        					break;
                                        			}
                                        		}
                                        	}
                                        //    logger.debug("selected_ids_expired_arr" + selected_ids_expired_arr);
                                        	//Adding the data to output grid
                                        	let label = "All supply objects";
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + supply_objects_expired + " Supply objects</b> (" + article_expired.length + " articles)<br/>Expired</p>",
                                        		count: supply_objects_expired,
                                        		description: "Expired",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        		style: "IK.SD.Expired",
                                        		chart_label: label,
                                        		mashupName: "CVM.DashboardSupplyObjectCount.Mashup",
                                        		selected_ids: selected_ids_expired,
                                        		title: "Supply objects count - expired verification"
                                        	});
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + supply_objects_lessthan_30 + " Supply objects</b> (" + article_lessthan_30.length + " articles)<br/>Expires <30 days</p>",
                                        		count: supply_objects_lessthan_30,
                                        		description: "Expires <30 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        		style: "IK.SD.ExpiresLessThan30Days",
                                        		chart_label: label,
                                        		mashupName: "CVM.DashboardSupplyObjectCount.Mashup",
                                        		selected_ids: selected_ids_lessthan_30,
                                        		title: "Supply object count - expiring <30 days verifications"
                                        	});
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + supply_objects_within_30_90 + " Supply objects</b> (" + article_within_30_90.length + " articles)<br/>Expires within 30-90 days</p>",
                                        		count: supply_objects_within_30_90,
                                        		description: "Expires within 30-90 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        		style: "IK.SD.ExpiresWithin30To90Days",
                                        		chart_label: label,
                                        		mashupName: "CVM.DashboardSupplyObjectCount.Mashup",
                                        		selected_ids: selected_ids_within_30_90,
                                        		title: "Supply objects count - expiring within 30-90 days verifications"
                                        	});
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + supply_objects_greaterthan_90 + " Supply objects</b> (" + article_greaterthan_90.length + " articles)<br/>Expires >90 days</p>",
                                        		count: supply_objects_greaterthan_90,
                                        		description: "Expires >90 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        		style: "IK.SD.ExpiresGreaterThan90Days",
                                        		chart_label: label,
                                        		mashupName: "CVM.DashboardSupplyObjectCount.Mashup",
                                        		selected_ids: selected_ids_greaterthan_90,
                                        		title: "Supply objects count - expiring >90 days verifications"
                                        	});
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getVerificationCountDetails">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getVerificationCountDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardVerificationCount.DataShape"
                                        });
                                        let materialArticlesToParts = {};
                                        let partToMaterials = {};
                                        let filterInPopups = false;
                                        let databaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        try {
                                        	let ids = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "GenericStringList"
                                        	});
                                        	let boms = JSON.parse(bomStructures).boms;
                                        	for (let article in boms) {
                                        		let bom = boms[article];
                                        		searchPartInBOMAndReorganize(bom.Number, bom, materialArticlesToParts, "", "");
                                        	}
                                        	if ((!selected_ids || selected_ids.getRowCount() == 0) && filterItem) {
                                        		filterInPopups = true;
                                        		let input = filterItem.split("#_#");
                                        		if (filterItem.includes("Subsuppliers")) {
                                        			let sub_supplier = input[0];
                                        			let id_rvs = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				let id = reqRow.id_supply_object + "-" + reqRow.child_number + "-" + reqRow.id_rvs + "-" + (reqRow.id_rvs_verified ? reqRow.id_rvs_verified : "undefined");
                                        				if (reqRow.sub_supplier == sub_supplier && description == reqRow.type) {
                                        					if (id_rvs.indexOf(id) == -1) {
                                        						id_rvs.push(id);
                                        						count(reqRow.id_rvs, reqRow);
                                        					}
                                        				}
                                        			}
                                        		} else if (filterItem.includes("Articles")) {
                                        			let id_article = input[0];
                                        			let id_rvs = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				let id = reqRow.id_supply_object + "-" + reqRow.child_number + "-" + reqRow.id_rvs + "-" + (reqRow.id_rvs_verified ? reqRow.id_rvs_verified : "undefined");
                                        				if (reqRow.id_article.split(",").indexOf(id_article) != -1 && description == reqRow.type) {
                                        					if (id_rvs.indexOf(id) == -1) {
                                        						id_rvs.push(id);
                                        						count(reqRow.id_rvs, reqRow);
                                        					}
                                        				}
                                        			}
                                        		} else if (filterItem.includes("Parts")) {
                                        			let id_part = input[0];
                                        			let id_rvs = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				let articleIds = reqRow.id_article.split(",");
                                        				let materials = [];
                                        				let values = partToMaterials[id_part];
                                        				for (let v = 0; v < values.length; v++) {
                                        					if (!materials.includes(values[v])) {
                                        						materials.push(values[v]);
                                        					}
                                        				}
                                        				let id = reqRow.id_supply_object + "-" + reqRow.child_number + "-" + reqRow.id_rvs + "-" + (reqRow.id_rvs_verified ? reqRow.id_rvs_verified : "undefined");
                                        				if ((reqRow.child_number == id_part || (reqRow.object_type == "Material" && materials && materials.indexOf(reqRow.child_number) != -1)) && description == reqRow.type) {
                                        					if (id_rvs.indexOf(id) == -1) {
                                        						id_rvs.push(id);
                                        						count(reqRow.id_rvs, reqRow);
                                        					}
                                        				}
                                        			}
                                        		} else if (filterItem.includes("Materials")) {
                                        			let materialId = input[0];
                                        			let id_rvs = [];
                                        			for (let i = 0; i < requirements.getRowCount(); i++) {
                                        				let reqRow = requirements.rows[i];
                                        				let id = reqRow.id_supply_object + "-" + reqRow.child_number + "-" + reqRow.id_rvs + "-" + (reqRow.id_rvs_verified ? reqRow.id_rvs_verified : "undefined");
                                        				if (reqRow.child_number == materialId && description == reqRow.type) {
                                        					if (id_rvs.indexOf(id) == -1) {
                                        						id_rvs.push(id);
                                        						count(reqRow.id_rvs, reqRow);
                                        					}
                                        				}
                                        			}
                                        		}
                                        	} else {
                                        		let selectedIds = [];
                                        		for (let i = 0; selected_ids !== undefined && i < selected_ids.getRowCount(); i++) {
                                        			selectedIds.push(selected_ids.rows[i].item);
                                        		}
                                        		for (let i = 0; i < requirements.getRowCount(); i++) {
                                        			let reqRow = requirements.rows[i];
                                        			let id = reqRow.id_supply_object + "-" + reqRow.child_number + "-" + reqRow.id_rvs + "-" + (reqRow.id_rvs_verified ? reqRow.id_rvs_verified : "undefined");
                                        			if (selectedIds.indexOf(id) != -1) {
                                        				count(reqRow.id_rvs, reqRow);
                                        			}
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully. Filter-item[" + filterItem + "] Requirements count [" + requirements.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        function count(id_rvs, req) {
                                        	let materials = [];
                                        	let parts = [];
                                        	let articles = [];
                                        	let reqListButtonId = (filterInPopups ? "root_mashupcontainer-17_navigationfunction-248-popup_ptcsbutton-12" : "root_mashupcontainer-17_mashupcontainer-235_ptcsbutton-12");
                                        	for (let i = 0; i < requirements.getRowCount(); i++) {
                                        		let reqRow = requirements.rows[i];
                                        		let articleIds = reqRow.id_article.split(",");
                                        		if (reqRow.id_rvs == id_rvs) {
                                        			if (reqRow.object_type == "Material" && !materials.includes(reqRow.child_number)) {
                                        				materials.push(reqRow.child_number);
                                        				let parents = [];
                                        				let values = materialArticlesToParts[reqRow.child_number];
                                        				for (let j = 0; j < values.length; j++) {
                                        					parents.push(values[j]);
                                        				}
                                        
                                        				if (parents && parents.length > 0) {
                                        					for (let index in parents) {
                                        						let parent = parents[index];
                                        						if (!parts.includes(parent)) {
                                        							parts.push(parent);
                                        						}
                                        					}
                                        				}
                                        			} else if (reqRow.object_type == "IKEA Part" && !parts.includes(reqRow.child_number)) {
                                        				parts.push(reqRow.child_number);
                                        			}
                                        
                                        			for (let j = 0; j < articleIds.length; j++) {
                                        				if (!articles.includes(articleIds[j])) {
                                        					articles.push(articleIds[j]);
                                        				}
                                        			}
                                        		}
                                        	}
                                        	result.AddRow({
                                        		verification_id: req.id_rvs,
                                        		verification_name: req.requirement_title,
                                        		status: getStatus(req.type),
                                        		verification_datatype: req.verification_type,
                                        		verification_deadline: "-",
                                        		materials: (filterInPopups || materials.length === 0) ? materials.length + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-241', req.id_rvs, "Material count for verification #" + req.id_rvs) + materials.length + "</a>",
                                        		parts: (filterInPopups || parts.length === 0) ? parts.length + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-240', req.id_rvs, "Part count for verification #" + req.id_rvs) + parts.length + "</a>",
                                        		articles: (filterInPopups || articles.length === 0) ? articles.length + "" : getPrefix('root_mashupcontainer-17_ptcsbutton-239', req.id_rvs, "Article count for verification #" + req.id_rvs) + articles.length + "</a>",
                                        		reverification: req.reporting_object ? true : false,
                                        		requirement_list: "<img style=\"cursor: pointer;\" height=\"25px !important\" width=\"25px !important\" src='/Thingworx/MediaEntities/IK.DocumentPencilIcon.Media' onclick=\"dashboardRequirementListNavigation('" + reqListButtonId + "','"+req.id_rvs+"')\"/>"
                                        	});
                                        }
                                        
                                        /**
                                        Fills the materialArticlesToParts object array with:
                                        idArticle + materialArticle = [parent part numbers];
                                        **/
                                        function searchPartInBOMAndReorganize(idArticle, bom, materialArticlesToParts, parentNumber, hierarchy) {
                                        	let objectType = bom.ObjectType;
                                        	let partNumber = bom.Number;
                                        	hierarchy = hierarchy && hierarchy.length > 0 ? hierarchy + "-" + partNumber : partNumber;
                                        	if (objectType === "Material") {
                                        		let partLink = Things[databaseThing].getSupplyBOMAssocaitionByHierarchy({
                                        			hierarchy: hierarchy,
                                        			supplier_number: project_number
                                        		});
                                        		if (partLink && partLink.getRowCount() > 0) {
                                        			let item = materialArticlesToParts[partNumber];
                                        			if (item === undefined) {
                                        				item = [];
                                        			}
                                        			if (item.indexOf(parentNumber) < 0) {
                                        				item.push(parentNumber);
                                        			}
                                        			materialArticlesToParts[partNumber] = item;
                                        		}
                                        	}
                                        
                                        	let components = bom.Components;
                                        	if (components && components.length > 0) {
                                        		for (let c = 0; c < components.length; c++) {
                                        			let subBOM = components[c];
                                        			if (subBOM.ObjectType == "Material") {
                                        				if (objectType != "Material") {
                                        					let item = partToMaterials[partNumber];
                                        					if (item === undefined) {
                                        						item = [];
                                        					}
                                        					if (item.indexOf(subBOM.Number) < 0) {
                                        						item.push(subBOM.Number);
                                        					}
                                        					partToMaterials[partNumber] = item;
                                        				}
                                        			}
                                        			searchPartInBOMAndReorganize(idArticle, subBOM, materialArticlesToParts, partNumber, hierarchy);
                                        		}
                                        	}
                                        }
                                        
                                        function getPrefix(buttonId, id_rvs, popupTitle) {
                                        	let result = "<a style=\"text-decoration:underline; cursor: pointer;\" onclick=\"dashboardNavigation('" + buttonId + "','" + id_rvs + "#_#Verification" + "','" + popupTitle + "')\">";
                                        	return result;
                                        }
                                        
                                        function getStatus(description) {
                                        	let status;
                                        	if (description == "Expires >90 days") {
                                        		status = "<img  src='/Thingworx/MediaEntities/IK.GreenIcon.Media'/> Expires >90 days";
                                        	} else if (description == "Expires within 30-90 days") {
                                        		status = "<img src='/Thingworx/MediaEntities/IK.YellowIcon.Media'/> Expires within 30-90 days";
                                        	} else if (description == "Expires <30 days") {
                                        		status = "<img src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'/> Expires <30 days";
                                        	} else if (description == "Expired") {
                                        		status = "<img src='/Thingworx/MediaEntities/IK.RedIcon.Media'/> Expired";
                                        	}
                                        	return status;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getVerificationCountGridData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getVerificationCountGridData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ComplianceDashboardData.DataShape"
                                        });
                                        let selected_ids_expired = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_lessthan_30 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_within_30_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let selected_ids_greaterthan_90 = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let label = "";
                                        	if (article && part && material) {
                                        		label = "All levels";
                                        	} else if (article && !part && !material) {
                                        		label = "Article level";
                                        	} else if (!article && part && !material) {
                                        		label = "Part level";
                                        	} else if (!article && !part && material) {
                                        		label = "Material level";
                                        	} else if (article && part && !material) {
                                        		label = "Article & part level";
                                        	} else if (article && material && !part) {
                                        		label = "Article & material level";
                                        	} else if (part && material && !article) {
                                        		label = "Part & material level";
                                        	}
                                        	let article_expired = 0;
                                        	let article_lessthan_30 = 0;
                                        	let article_within_30_90 = 0;
                                        	let article_greaterthan_90 = 0;
                                        
                                        	let part_expired = 0;
                                        	let part_lessthan_30 = 0;
                                        	let part_within_30_90 = 0;
                                        	let part_greaterthan_90 = 0;
                                        
                                        	let material_expired = 0;
                                        	let material_lessthan_30 = 0;
                                        	let material_within_30_90 = 0;
                                        	let material_greaterthan_90 = 0;
                                        
                                        	let expired_articles = [];
                                        	let lessthan_30_articles = [];
                                        	let within_30_90_articles = [];
                                        	let greaterthan_90_articles = [];
                                        
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		let objectType = row.object_type;
                                        		let idArticle = row.id_article.split(",");
                                        		let idSupplyObject = row.id_supply_object;
                                        		let childNumber = row.child_number;
                                        		let type = row.type;
                                        		let verificationId = row.id_rvs;
                                        		let verificationMethodId = row.id_rvs_verified;
                                        		let isDelegated = row.is_delegated;
                                        		if (((tier1 && !tier2plus && !isDelegated) || (!tier1 && tier2plus && isDelegated) || (tier1 && tier2plus))) {
                                        			if (article) {
                                        				if (objectType == "IKEA Part" && idArticle.includes(childNumber) && type == "Expired") {
                                        					article_expired = article_expired + 1;
                                        					selected_ids_expired.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!expired_articles.includes(idArticle[a])) {
                                        							expired_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        
                                        				} else if (objectType == "IKEA Part" && idArticle.includes(childNumber) && type == "Expires <30 days") {
                                        					article_lessthan_30 = article_lessthan_30 + 1;
                                        					selected_ids_lessthan_30.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!lessthan_30_articles.includes(idArticle[a])) {
                                        							lessthan_30_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "IKEA Part" && idArticle.includes(childNumber) && type == "Expires within 30-90 days") {
                                        					article_within_30_90 = article_within_30_90 + 1;
                                        					selected_ids_within_30_90.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!within_30_90_articles.includes(idArticle[a])) {
                                        							within_30_90_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "IKEA Part" && idArticle.includes(childNumber) && type == "Expires >90 days") {
                                        					article_greaterthan_90 = article_greaterthan_90 + 1;
                                        					selected_ids_greaterthan_90.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!greaterthan_90_articles.includes(idArticle[a])) {
                                        							greaterthan_90_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				}
                                        			}
                                        			if (part) {
                                        				if (objectType == "IKEA Part" && type == "Expired") {
                                        					part_expired = part_expired + 1;
                                        					selected_ids_expired.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!expired_articles.includes(idArticle[a])) {
                                        							expired_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "IKEA Part" && type == "Expires <30 days") {
                                        					part_lessthan_30 = part_lessthan_30 + 1;
                                        					selected_ids_lessthan_30.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!lessthan_30_articles.includes(idArticle[a])) {
                                        							lessthan_30_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "IKEA Part" && type == "Expires within 30-90 days") {
                                        					part_within_30_90 = part_within_30_90 + 1;
                                        					selected_ids_within_30_90.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!within_30_90_articles.includes(idArticle[a])) {
                                        							within_30_90_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "IKEA Part" && type == "Expires >90 days") {
                                        					part_greaterthan_90 = part_greaterthan_90 + 1;
                                        					selected_ids_greaterthan_90.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!greaterthan_90_articles.includes(idArticle[a])) {
                                        							greaterthan_90_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				}
                                        			}
                                        			if (material) {
                                        				if (objectType == "Material" && type == "Expired") {
                                        					material_expired = material_expired + 1;
                                        					selected_ids_expired.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!expired_articles.includes(idArticle[a])) {
                                        							expired_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "Material" && type == "Expires <30 days") {
                                        					material_lessthan_30 = material_lessthan_30 + 1;
                                        					selected_ids_lessthan_30.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!lessthan_30_articles.includes(idArticle[a])) {
                                        							lessthan_30_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "Material" && type == "Expires within 30-90 days") {
                                        					material_within_30_90 = material_within_30_90 + 1;
                                        					selected_ids_within_30_90.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!within_30_90_articles.includes(idArticle[a])) {
                                        							within_30_90_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				} else if (objectType == "Material" && type == "Expires >90 days") {
                                        					material_greaterthan_90 = material_greaterthan_90 + 1;
                                        					selected_ids_greaterthan_90.AddRow({
                                        						item: idSupplyObject + "-" + childNumber + "-" + verificationId + "-" + (verificationMethodId ? verificationMethodId : "undefined")
                                        					});
                                        					for (let a = 0; a < idArticle.length; a++) {
                                        						if (!greaterthan_90_articles.includes(idArticle[a])) {
                                        							greaterthan_90_articles.push(idArticle[a]);
                                        						}
                                        					}
                                        				}
                                        			}
                                        		}
                                        	}
                                        	let tot_expired = article_expired + part_expired + material_expired;
                                        	let tot_lessthan_30 = article_lessthan_30 + part_lessthan_30 + material_lessthan_30;
                                        	let tot_within_30_90 = article_within_30_90 + part_within_30_90 + material_within_30_90;
                                        	let tot_greaterthan_90 = article_greaterthan_90 + part_greaterthan_90 + material_greaterthan_90;
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + tot_expired + " verifications </b>(" + expired_articles.length + " articles)<br/>Expired</p>",
                                        		count: tot_expired,
                                        		description: "Expired",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>",
                                        		style: "IK.SD.Expired",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountVerifications.Mashup",
                                        		selected_ids: selected_ids_expired,
                                        		title: "Verification count - expired"
                                        	});
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + tot_lessthan_30 + " verifications </b>(" + lessthan_30_articles.length + " articles)<br/>Expires <30 days</p>",
                                        		count: tot_lessthan_30,
                                        		description: "Expires <30 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.OrangeIcon.Media'>",
                                        		style: "IK.SD.ExpiresLessThan30Days",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountVerifications.Mashup",
                                        		selected_ids: selected_ids_lessthan_30,
                                        		title: "Verification count - expires <30 days"
                                        	});
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + tot_within_30_90 + " verifications </b>(" + within_30_90_articles.length + " articles)<br/>Expires within 30-90 days</p>",
                                        		count: tot_within_30_90,
                                        		description: "Expires within 30-90 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.YellowIcon.Media'>",
                                        		style: "IK.SD.ExpiresWithin30To90Days",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountVerifications.Mashup",
                                        		selected_ids: selected_ids_within_30_90,
                                        		title: "Verification count - expires within 30-90 days"
                                        	});
                                        
                                        	result.AddRow({
                                        		html_data: "<p style=\"cursor: pointer;width: fit-content;\"><b>" + tot_greaterthan_90 + " verifications </b>(" + greaterthan_90_articles.length + " articles)<br/>Expires >90 days</p>",
                                        		count: tot_greaterthan_90,
                                        		description: "Expires >90 days",
                                        		icon: "<img style=\"\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>",
                                        		style: "IK.SD.ExpiresGreaterThan90Days",
                                        		chart_label: label,
                                        		mashupName: "IK.DashboardCountVerifications.Mashup",
                                        		selected_ids: selected_ids_greaterthan_90,
                                        		title: "Verification count - expires >90 days"
                                        	});
                                        	logger.info(FN + "executed successfully. Requirements count[" + data.getRowCount() + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="parseInfotableToArticleString">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " parseInfotableToArticleString -> ";
                                        var result = "";
                                        try {
                                        	const SEP = ";";
                                        	input.rows.toArray().forEach(row => {
                                        		result = result + row.article_number + SEP;
                                        	});
                                        	if (result.length > 0) {
                                        		result = result.substring(0, result.length - SEP.length);
                                        	}
                                        	logger.info(FN + "executed successfully. Result: " + result);
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
