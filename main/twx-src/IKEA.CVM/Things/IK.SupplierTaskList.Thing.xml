<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="IK.SupplierTaskList.Thing"
         projectName="IKEA.CVM"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="addPlantReportDataToGrid">
                        <ResultType
                         aspect.dataShape="IK.PlantReportData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="commonName"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="complianceStatus"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="country"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.PlantReportData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="existingData"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="genus"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="region"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="risk"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="species"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subRegion"
                             ordinal="7"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="checkDelegationStatus">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="editedTable"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="checkSendRequestStatus">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="editedTable"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="checkVerificationStatus">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="editedTable"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="closePopUp">
                        <ResultType
                         baseType="NOTHING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="defaultDetailsTabDropdownValues">
                        <ResultType
                         aspect.dataShape="IK.ColumnDefinition.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="defaultGeneralTabDropdownValues">
                        <ResultType
                         aspect.dataShape="IK.ColumnDefinition.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="delegateTasks">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="editedTasks"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="deletePlantReportDataFromGrid">
                        <ResultType
                         aspect.dataShape="IK.PlantReportData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.PlantReportData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="existingData"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="uid"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="deleteReportingObject">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="reporting_object_id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="downloadBulkUploadTemplate">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="editSelfDeclarationTasks">
                        <ResultType
                         aspect.dataShape="IK.KeyValue.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.KeyValue.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="VerificationStatement"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="editWeightOrVolumeTasks">
                        <ResultType
                         aspect.dataShape="IK.KeyValue.DataShape"
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="valueJson"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="WeightOrVolumeValue"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getCellClickedRow">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getCertificateFileDetailsCustomWidget">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="unique_id"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="updatedData"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getClickedRowCertVerify">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getColumnForCertVerify">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getColumnJson">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getComplianceStatus">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getConfigurationBasedOnColumnSelectionForCustomWidget">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="defaultFilterNumbers"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ColumnDefinition.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="detailsSelectedColumns"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.ColumnDefinition.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="generalSelectedColumns"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="selectedTab"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getCountries">
                        <ResultType
                         aspect.dataShape="IK.KeyValue.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDefaultView">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDefinitions">
                        <ResultType
                         aspect.dataShape="IK.RequirementDefinition.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="ids"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getDetailsAvailableColumns">
                        <ResultType
                         aspect.dataShape="IK.ColumnDefinition.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getEndItems">
                        <ResultType
                         aspect.dataShape="IK.PTC.Resource.App.StructuredDataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getGeneralAvailableColumns">
                        <ResultType
                         aspect.dataShape="IK.ColumnDefinition.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getGenus">
                        <ResultType
                         aspect.dataShape="IK.KeyValuePair.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getIllegalLoggingRisk">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="country_id"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="region_id"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="subregion_id"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getInstructionsInBulkUpload">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.defaultValue="&lt;html&gt;&#xA;&lt;head&gt;&#xA;&lt;/head&gt;&#xA;&lt;body style = &quot;font: normal normal normal 14px/19px Noto IKEA Latin !important; color: #111111; &quot;&gt;&#xA;&lt;ul style =&quot;text-align:left;padding-left:30px&quot;&gt;&#xA;&lt;li style=&quot;padding:5px&quot;&gt;Import file must be in &lt;span style = &quot;color:#0058A3&quot;&gt;.xlsx&lt;/span&gt; format&lt;/li&gt;&#xA;&lt;li style=&quot;padding:5px&quot;&gt;Ensure accurate &lt;span style = &quot;color:#0058A3&quot;&gt;genus&lt;/span&gt; and &lt;span style = &quot;color:#0058A3&quot;&gt;species&lt;/span&gt; name in all rows&lt;/li&gt;&#xA;&lt;li style=&quot;padding:5px&quot;&gt;Ensure accurate &lt;span style = &quot;color:#0058A3&quot;&gt;genus&lt;/span&gt; and &lt;span style = &quot;color:#0058A3&quot;&gt;species combination&lt;/span&gt; in all rows&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;"
                             baseType="HTML"
                             description=""
                             name="instructions"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getOverviewMashupName">
                        <ResultType
                         baseType="MASHUPNAME"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="InputForOverview"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getParentSuppliersForSubsupplier">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getPlantDataFromBulkUpload">
                        <ResultType
                         aspect.dataShape="IK.PlantReportData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.PlantReportData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="bulkUploadData"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.PlantReportData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="existingData"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getPlantReport">
                        <ResultType
                         aspect.dataShape="IK.PlantReportData.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.PlantReportData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="plantData"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getPlantReportReportingObject">
                        <ResultType
                         aspect.dataShape="IK.PlantDeclaration.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="reporting_object_oid"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRegions">
                        <ResultType
                         aspect.dataShape="IK.KeyValue.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="countryId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getReportedValuesForOverview">
                        <ResultType
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="InputForOverview"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getRequirementText">
                        <ResultType
                         aspect.dataShape="IK.RequirementDescription.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_rvs"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSchemaJson">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSchemaJsonCertVerifiy">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSchemaJsonForTestReport">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSelectedRowsFromCustomGrid">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSelectedRowsFromGrid">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSelectedTestOrder">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selected_data"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="updated_data"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSpecies">
                        <ResultType
                         aspect.dataShape="IK.SpeciesDetail.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="genus_id"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSubregions">
                        <ResultType
                         aspect.dataShape="IK.KeyValue.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="regionId"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getSubRowColumnJson">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTasks">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTasksForCertificateVerification">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="task_details"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTasksForSelectedValues">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.KeyValue.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedItems"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTasksForSelectedValues_bck">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="allTasks"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.KeyValue.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedItems"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTestLabs">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTestOrderColumnJson">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTestOrderColumnJsonCopyPaste">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTestReportTaskFileDetailsCustomWidget">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="grouping_section_id"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="unique_id"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="updatedData"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getTestReportValidity">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getUnit">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getValuesForViews">
                        <ResultType
                         aspect.dataShape="IK.DropdownValuesForViews.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="BOOLEAN"
                             description=""
                             name="navigation"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="view"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getVerificationOverviewData">
                        <ResultType
                         aspect.dataShape="IK.VerificationOverview.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="inputForOverview"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getVerificationResultForSubSupplier">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_article"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="parent_supplier"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getViews">
                        <ResultType
                         aspect.dataShape="IK.KeyValue.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="groupTestOrders">
                        <ResultType
                         aspect.dataShape="IK.PreviewTestOrder.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="3"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="groupTestReportTasks">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="task_details"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="resetTasklistGrid">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="sampleData">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="sampleDataForSubSupplier">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="sampleTestReportTasks">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="searchTasklist">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="data"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="searchText"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="triggerFileUpload">
                        <ResultType
                         aspect.dataShape="GenericStringList"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateBooleanReportingObject">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_code_owner"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_type"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="comment"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="12"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="validTasks"
                             ordinal="8"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateCertificateFileDetailsCustomWidget">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="certificate_id"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="certificate_valid_from"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="certificate_valid_to"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="comments"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="file_name"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="full_path"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="unique_id"
                             ordinal="2"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateCertificateReportingObjectCustomWidget">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_code_owner"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_type"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedIDs"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updatePlantReportReportingObject">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_code_owner"
                             ordinal="20"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_type"
                             ordinal="19"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="comment"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="declarant"
                             ordinal="16"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_delegator"
                             ordinal="10"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_part"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_rvs"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_rvs_verified"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="id_verification_result"
                             ordinal="11"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.PlantReportData.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="plantReportData"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="recycle_percentage"
                             ordinal="12"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="reporting_object_oid"
                             ordinal="17"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="requestor"
                             ordinal="15"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="supply_object_id"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="valid_from"
                             ordinal="13"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="valid_to"
                             ordinal="14"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="verification_status"
                             ordinal="18"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateTestReportReportingObjectCustomWidget">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_code_owner"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_type"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="GenericStringList"
                             baseType="INFOTABLE"
                             description=""
                             name="selectedIDs"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="subRows"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateTestReportTaskFileDetailsCustomWidget">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="file_name"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="full_path"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="grouping_section_id"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             baseType="DATETIME"
                             description=""
                             name="issue_date"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="test_report_id"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="unique_id"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="validity_period"
                             ordinal="5"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="updateWeightOrVolumeReportingObject">
                        <ResultType
                         baseType="BOOLEAN"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_code_owner"
                             ordinal="7"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="bu_type"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="editedTable"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_name"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="project_number"
                             ordinal="12"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="8"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="username"
                             ordinal="9"></FieldDefinition>
                            <FieldDefinition
                             baseType="JSON"
                             description=""
                             name="valueJson"
                             ordinal="8"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="uploadPrimaryContent">
                        <ResultType
                         baseType="JSON"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="FilePath"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="ID"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="validateBulkUploadPlantData">
                        <ResultType
                         aspect.dataShape="IK.PlantReportBulkUpload.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             baseType="STRING"
                             description=""
                             name="pathAndFileName"
                             ordinal="1"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="validateSelfDeclarationVerifyTasks">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="editedTable"
                             ordinal="5"></FieldDefinition>
                            <FieldDefinition
                             baseType="INTEGER"
                             description=""
                             name="selectedRowCount"
                             ordinal="4"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.VerificationAggregated.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="tasks"
                             ordinal="6"></FieldDefinition>
                            <FieldDefinition
                             aspect.dataShape="IK.KeyValue.DataShape"
                             baseType="INFOTABLE"
                             description=""
                             name="verification_statement"
                             ordinal="7"></FieldDefinition>
                        </ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="addPlantReportDataToGrid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " addPlantReportDataToGrid -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PlantReportData.DataShape"
                                        });
                                        try {
                                        	if (existingData && existingData.getRowCount() > 0) {
                                        		let uid = generateGUID();
                                        		result.AddRow({
                                        			uid: uid,
                                        			species: species,
                                        			genus: genus,
                                        			commonName: commonName,
                                        			country: country,
                                        			region: region,
                                        			subRegion: subRegion,
                                        			risk: risk,
                                        			complianceStatus: complianceStatus,
                                        			action: "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"deletePlantReportDropdownsFromGrid('" + uid + "')\"/>"
                                        		});
                                        		existingData.rows.forEach(row => {
                                        			result.AddRow(row);
                                        		});
                                        	} else if (commonName || genus || species || country || region || subRegion || risk || complianceStatus) {
                                        		let uid = generateGUID();
                                        		result.AddRow({
                                        			uid: uid,
                                        			species: species,
                                        			genus: genus,
                                        			commonName: commonName,
                                        			country: country,
                                        			region: region,
                                        			subRegion: subRegion,
                                        			risk: risk,
                                        			complianceStatus: complianceStatus,
                                        			action: "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"deletePlantReportDropdownsFromGrid('" + uid + "')\"/>"
                                        		});
                                        		logger.info(FN + "Plant report data added successfully.");
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="checkDelegationStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " checkDelegationStatus -> ";
                                        
                                        try {
                                        	let params = {
                                        		t: editedTable /* INFOTABLE */ ,
                                        		columns: "verification_data_format,task_status" /* STRING */
                                        	};
                                        	let distinctRows = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        	result = false;
                                        	if (distinctRows.getRowCount() == 1) {
                                        		let row = distinctRows.rows[0];
                                        		if (row.verification_data_format == "Self Declaration" && row.task_status == "Not verified") {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Test Report" && row.task_status == "Not verified") {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Certificate" && row.task_status == "Not verified" ) {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Plant Declaration" && row.task_status == "Not verified") {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Weight or volume" && row.task_status == "Not verified") {
                                        			result = false;
                                        		}
                                        	} 
                                        	logger.info(FN + "Delegation status checked [" + result + "] successfully.");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="checkSendRequestStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " checkSendRequestStatus -> ";
                                        
                                        try {
                                            let params = {
                                        		t: editedTable /* INFOTABLE */ ,
                                        		columns: "verification_data_format,task_status" /* STRING */
                                        	};
                                        	let distinctRows = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        	result = false;
                                        	if (distinctRows.getRowCount() == 1) {
                                        		let row = distinctRows.rows[0];
                                        		if (row.verification_data_format == "Test Report" && row.task_status == "Not verified") {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Certificate" && row.task_status == "Not verified") {
                                        			result = true;
                                        		}
                                        	}
                                        	
                                        	logger.info(FN + "Send request status checked [" + result + "] successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="checkVerificationStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " checkVerificationStatus -> ";
                                        
                                        
                                        try {
                                        	let params = {
                                        		t: editedTable /* INFOTABLE */ ,
                                        		columns: "verification_data_format,task_status" /* STRING */
                                        	};
                                        	let distinctRows = Resources["InfoTableFunctions"].Distinct(params);
                                        
                                        	result = false;
                                        	if (distinctRows.getRowCount() == 1) {
                                        		let row = distinctRows.rows[0];
                                        		if (row.verification_data_format == "Self Declaration" && row.task_status == "Not verified") {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Test Report" && (row.task_status == "Not verified" || row.task_status == "New test result")) {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Certificate" && (row.task_status == "Not verified" || row.task_status == "New certificate received")) {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Plant Declaration" && editedTable.getRowCount() == 1 &&(row.task_status == "Not verified" || row.task_status == "Draft saved" )) {
                                        			result = true;
                                        		} else if (row.verification_data_format == "Weight or volume" && row.task_status == "Not verified") {
                                        			result = true;
                                        		}
                                        	}
                                        	logger.info(FN + "Verification status checked [" + result + "] successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="closePopUp">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " closePopUp -> ";
                                        try {
                                        	pause(2000);
                                        	logger.info(FN + "Popup closed successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="defaultDetailsTabDropdownValues">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " defaultDetailsTabDropdownValues -> ";
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ColumnDefinition.DataShape"
                                        });
                                        
                                        try {
                                        	if (view == "Article") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status"
                                        		});
                                        	} else if (view == "Part") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status"
                                        		});
                                        	} else if (view == "Material" || view == "Requirements" || view == "Sub supplier") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status"
                                        		});
                                        	}
                                        	logger.info(FN + "Default details tab dropdown values loaded.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="defaultGeneralTabDropdownValues">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " defaultGeneralTabDropdownValues -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ColumnDefinition.DataShape"
                                        });
                                        try {
                                        
                                        	if (view == "Article") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification data type"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status"
                                        		});
                                        	} else if (view == "Part") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification data type"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status"
                                        		});
                                        	} else if (view == "Material" || view == "Requirements" || view == "Sub supplier") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification data type"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status"
                                        		});
                                        	}
                                        	// result: INFOTABLE
                                        	let sessionValues = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        	if (sessionValues.rows[0].InputForReqListColumnSelection) {
                                        		result.AddRow({
                                        			name: "Requirement ID"
                                        		});
                                        
                                        		let params = {
                                        			name: "InputForReqListColumnSelection" /* STRING */ ,
                                        			value: false /* BOOLEAN */
                                        		};
                                        
                                        		// no return
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionBooleanValue(params);
                                        
                                        	}
                                        
                                        	logger.info(FN + "Default general tab dropdown values loaded.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="delegateTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " delegateTasks -> ";
                                        let info = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	if (editedTasks) {
                                        		let query = {
                                        			"filters": {
                                        				"type": "EQ",
                                        				"fieldName": "isSelected",
                                        				"value": true
                                        			}
                                        		};
                                        		params = {
                                        			t: editedTasks /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		info = Resources["InfoTableFunctions"].Query(params);
                                        	}
                                        	if (!editedTasks) {
                                        		result = true;
                                        	} else {
                                        		if (info.getRowCount() > 0 || tasks.getRowCount() > editedTasks.getRowCount()) {
                                        			result = true;
                                        		} else {
                                        			result = false;
                                        		}
                                        	}
                                        
                                        	for (let i = 0; i < tasks.getRowCount(); i++) {
                                        		let row = tasks.rows[i];
                                        		let uid = row.uid;
                                        		let isSelected = row.isSelected;
                                        		let taskRow;
                                        		let task;
                                        		if (editedTasks && editedTasks.getRowCount() > 0) {
                                        			taskRow = editedTasks.Find({
                                        				uid: uid
                                        			});
                                        		}
                                        		if (!taskRow) {
                                        			task = row;
                                        		} else {
                                        			if (taskRow.isSelected) {
                                        				task = row;
                                        			}
                                        		}
                                        		if (task) {
                                        			let pkeyVerification = Things[databaseConnector].getSequenceNextVal({
                                        				seqName: "CVM_VERIFICATION_SEQ"
                                        			});
                                        			let id_rvs_verified = task.id_rvs_verified ? task.id_rvs_verified : "Not_Defined";
                                        			let date = new Date();
                                        			let verification = Things[databaseConnector].addRVSVerification({
                                        				id_verification: pkeyVerification.rows[0].NEXTVAL,
                                        				applies_to_material: task.id_part,
                                        				applies_to_name: task.supply_object_id,
                                        				producer: task.declarant,
                                        				specification_name: task.requirement_title /* STRING */ ,
                                        				requirement_type: task.requirement_type,
                                        				details: task.requirement_text,
                                        				requirement_subtype: task.requirement_subtype,
                                        				verification_requested: task.verification_data_format /* STRING */ ,
                                        				verification_frequency: task.reporting_frequency,
                                        				test_method: task.verification_method /* STRING */ ,
                                        				requirement_source: task.requirement_source,
                                        				latest_implementation_date: task.latest_implementation_date,
                                        				requirement_valid_from: task.requirement_valid_from,
                                        				requirement_valid_to: task.requirement_valid_to,
                                        				id_article: task.id_article /* STRING */ ,
                                        				id_rvs: task.id_rvs /* STRING */ ,
                                        				id_part: task.id_part /* STRING */ ,
                                        				id_rvs_verified: id_rvs_verified /* STRING */ ,
                                        				is_verification_needed: 1 /* INTEGER */ ,
                                        				compliant_in_production: task.compliant_in_production,
                                        				created_timestamp: date,
                                        				modified_timestamp: date
                                        			});
                                        
                                        			let pkeyVerificationResult = Things[databaseConnector].getSequenceNextVal({
                                        				seqName: "CVM_VERIFICATION_RESULT_SEQ"
                                        			});
                                        
                                        			let verificationResult = Things[databaseConnector].addVerificationResult({
                                        				id_verification_result: pkeyVerificationResult.rows[0].NEXTVAL,
                                        				id_verification: pkeyVerification.rows[0].NEXTVAL,
                                        				created_timestamp: date,
                                        				modified_timestamp: date
                                        			});
                                        
                                        			let delegation = Things[databaseConnector].createDelegation({
                                        				id_supplier: task.requestor,
                                        				id_subsupplier: task.declarant,
                                        				id_verification_result: pkeyVerificationResult.rows[0].NEXTVAL,
                                        				created_timestamp: date,
                                        				modified_timestamp: date
                                        			});
                                        		}
                                        
                                        	}
                                        	logger.info(FN + "Tasks delegated successfully.");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="deletePlantReportDataFromGrid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " deletePlantReportDataFromGrid -> ";
                                        try {
                                        	existingData.Delete({
                                        		uid: uid
                                        	});
                                        	result = existingData;
                                        	logger.info(FN + "Tasks delegated successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="deleteReportingObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " deleteReportingObject -> ";
                                        
                                        try {
                                        	if (reporting_object_id) {
                                        		reporting_object_id = reporting_object_id.includes("#_#") ? reporting_object_id.split("#_#")[0] : reporting_object_id;
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let versions = Things[odataconnectorthing].getPartVersions({
                                        			PartId: reporting_object_id
                                        		});
                                        		let values = versions.value;
                                        		for (let i = 0; i < values.length; i++) {
                                        			let deletePart = Things[odataconnectorthing].deletePartInParts({
                                        				ID: values[i].ID
                                        			});
                                        		}
                                        
                                        		result = "#_#Not verified";
                                        	}
                                        	logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="downloadBulkUploadTemplate">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " downloadBulkUploadTemplate -> ";
                                        
                                        try {
                                        	let fileInfo = Things["CustomFileRepoistory"].GetFileListingWithLinks({
                                        		path: "/CVM/BulkUploadPlantData/Template/" /* STRING */ ,
                                        		nameMask: "PlantData_Template.xlsx" /* STRING */
                                        	});
                                        	result = fileInfo.rows[0].downloadLink;
                                        	logger.info(FN + " executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="editSelfDeclarationTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " editSelfDeclarationTasks -> ";
                                        
                                        try {
                                        	if (!tasks) {
                                        		tasks = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "IK.KeyValue.DataShape"
                                        		});
                                        	}
                                        	let input = VerificationStatement.split("#_#");
                                        	let uid = input[0];
                                        	let value = input[1];
                                        	let row = tasks.Find({
                                        		key: uid
                                        	});
                                        	if (row) {
                                        		row.value = value;
                                        	} else {
                                        		tasks.AddRow({
                                        			key: uid,
                                        			value: value
                                        		});
                                        	}
                                        	result = tasks;
                                        	logger.info(FN + "Edited Verification statement for [" + VerificationStatement + "] successful.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="editWeightOrVolumeTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " editWeightOrVolumeTasks -> ";
                                        
                                        try {
                                        	let json;
                                        	if (!valueJson) {
                                        		json = {};
                                        	} else {
                                        		json = JSON.parse(valueJson);
                                        	}
                                        	let input = WeightOrVolumeValue.split("#_#");
                                        	let uid = input[0];
                                        	let value = input[1];
                                        	json[uid] = value;
                                        	result = json;
                                        	logger.info(FN + "Edited weight or volume for [" +uid + " - "+value+"] successful.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getCellClickedRow">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        result = data;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getCertificateFileDetailsCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTestReportTaskFileDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        try {
                                        	let data = updatedData;
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		if (unique_id && row.unique_id == unique_id) {
                                        			result.AddRow(row);
                                        			break;
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getClickedRowCertVerify">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result=data;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getColumnForCertVerify">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	"columns": [{
                                                    "selectable": true,
                                                    "width": "40px"
                                                },
                                                {
                                                   "template": "#if(applies_to_name){#<p class=\"customTextOverflow\" title='#= applies_to_name #'>#= applies_to_name # </p>#}#", 
                                                    "field": "applies_to_name",
                                                    "width": "129px",
                                                    "title": "Supply object"
                                                },
                                                {
                                                    "template": "#if(producer){#<p class=\"customTextOverflow\" title='#= producer #'>#= producer	 # </p>#}#",
                                                    "field": "producer",
                                                    "width": "129px",
                                                    "title": "Supply actor"
                                                },
                                                {
                                                    "template": "#if(requirement_title ){#<p class=\"showAsLink customTextOverflow\" style=\"cursor: pointer;  text-decoration:underline;\"   columnname=\"requirementDesc\" title='#= requirement_title  #'>#= requirement_title  # </p>#}#",
                                                    "field": "requirement_title",
                                                    "width": "129px",
                                                    "title": "Requirement description"
                                                },
                                                 {
                                                    "template": "#if(certification_method ){#<p class=\"customTextOverflow\" title='#= certification_method  #'>#= certification_method  # </p>#}#",
                                                    "field": "certification_method",
                                                    "width": "129px",
                                                    "title": "Certification method"
                                                },
                                               {
                                        			"field": "certificate_issuer",
                                        			"title": "Certificate issuer",
                                        			"template": "<input class=\"certIssuerDropDownTemplate\"/>",
                                        			"width": "129px"
                                        		},
                                                        
                                              {
                                                    "template": "<input   class=\"certNameTextbox\"/>",
                                                    "field": "certificate_name",
                                                    "width": "129px",
                                                    "title": "Certificate name"
                                                },
                                               {
                                        			"field": "certificate_type",
                                        			"title": "Certificate type",
                                        			"template": "<input class=\"certTypeDropDownTemplate\"/>",
                                        			"width": "129px"
                                        		},
                                                  {
                                        			"field": "certifier",
                                        			"title": "Who is certified",
                                        			"template": "<input class=\"whoIsCertifiedDropDownTemplate\"/>",
                                        			"width": "129px"
                                        		},
                                                {
                                        //            "template": "<button class=\"action\"> .... </button>",
                                                    "template": "<span><a class=\"fileUpload\" style=\"cursor: pointer;  text-decoration:underline;\"  !important\">Upload certificate</a>",
                                                    "field": "action",
                                                    "width": "120px",
                                                    "title": "Action"
                                                }
                                        
                                        	]
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getColumnJson">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	"columns": [{
                                        			selectable: true,
                                        			width: "58px"
                                        		},
                                        		{
                                        			field: "requestor",
                                        			title: "Requestor",
                                        			width: "129px",
                                        			//            template: "<p class=\"customTextOverflow\" title='#= requestor #'>#= requestor # </p>"
                                        			template: "#if(requestor){#<p class=\"customTextOverflow\" title='#= requestor #'>#= requestor # </p>#}#"
                                        		},
                                        		{
                                        			field: "applies_to_name",
                                        			title: "Supply Object",
                                        			width: "129px",
                                        //			template: "<p class=\"customTextOverflow\" title='#= applies_to_name #'>#= applies_to_name # </p>"
                                                    template: "#if(applies_to_name){#<p class=\"customTextOverflow\" title='#= applies_to_name #'>#= applies_to_name # </p>#}#"
                                        		},
                                        		{
                                        			field: "requirement_title",
                                        			title: "Requirement Object",
                                        			width: "129px",
                                        //			template: "<p class=\"customTextOverflow\" title='#= requirement_title #'>#= requirement_title # </p>"
                                                    template: "#if(requirement_title){#<p class=\"customTextOverflow\" title='#= requirement_title #'>#= requirement_title # </p>#}#"
                                        		},
                                        		{
                                        			field: "test_method",
                                        			title: "Test method",
                                        			width: "129px",
                                        			//            template: "<p class=\"customTextOverflow\" title='#= test_method #'>#= test_method # </p>"
                                        			template: "#if(test_method){#<p class=\"customTextOverflow\" title='#= test_method #'>#= test_method # </p>#}#"
                                        		},
                                        		{
                                        			field: "test_labs_data",
                                        			title: "Test labs",
                                        			template: "<input class=\"testLabsDropDownTemplate\"/>",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "batch_number",
                                        			title: "Batch number",
                                        			width: "129px",
                                        			template: "<input class=\"batchNumberTextBox\"/>"
                                        		},
                                        		{
                                        			field: "sample_description",
                                        			title: "Sample description",
                                        			width: "139px",
                                        			template: "<input class=\"sampleDescriptionTextBox\"/>"
                                        		},
                                        		{
                                        			field: "units_data",
                                        			title: "Unit",
                                        			template: "<input class=\"unitsDropDownTemplate\"/>",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "result",
                                        			title: "Result",
                                        			width: "129px",
                                        			template: "<input class=\"resultTextBox\"/>"
                                        		},
                                        		{
                                        			field: "action",
                                        			title: " ",
                                        			template: "<img class=\"addSubRowTemplate\" style=\"cursor: pointer; padding:12px 0px;\" height=\"16px !important\" width=\"16px !important; \" src='/Thingworx/MediaEntities/IK.PlusIcon.Media'/><a class=\"uploadReportTemplate\" style=\"padding:12px 0px 12px 20px; line-height:16px; float:right;\">Upload report</a><a class=\"manageReportTemplate\" style=\"padding:12px 0px 12px 20px; line-height:16px; float:right;\">Manage report</a><img class=\"ungroupTemplate\" style=\"padding:12px 0px 12px 20px;cursor: pointer;\" height=\"16px !important\" width=\"16px !important\" src='/Thingworx/MediaEntities/IK.Ungroup.Media'/>"
                                        		}
                                        
                                        	]
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getComplianceStatus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getComplianceStatus -> ";
                                        
                                        let params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        };
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        
                                        try {
                                        	// GenericStringList entry object
                                        	result.AddRow({
                                        		item: "FSC Certified Completed"
                                        	});
                                        	logger.info(FN + " Compliance status fetched successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getConfigurationBasedOnColumnSelectionForCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getConfigurationBasedOnColumnSelectionForCustomWidget -> ";
                                        
                                        try {
                                        	let fieldsDefinition = DataShapes["IK.VerificationAggregated.DataShape"].GetFieldDefinitions();
                                        	let remainingColumns = [];
                                        	fieldsDefinition.rows.toArray().forEach(row => {
                                        		remainingColumns.push(row.name + "#_#" + row.baseType);
                                        	});
                                        	let colDefs = [];
                                        
                                        	if (selectedTab == "General") {
                                        
                                        		if (generalSelectedColumns !== undefined) {
                                        			generalSelectedColumns.rows.toArray().forEach(row => {
                                        				let conf = JSON.parse(row.configuration);
                                        				colDefs.push(conf);
                                        				remainingColumns.splice(remainingColumns.indexOf(row.configuration.fieldName + "#_#" + row.configuration.columnFormatter.type), 1);
                                        			});
                                        
                                        		}
                                        	} else if (selectedTab == "Details") {
                                        		if (detailsSelectedColumns !== undefined) {
                                        			detailsSelectedColumns.rows.toArray().forEach(row => {
                                        				let conf = JSON.parse(row.configuration);
                                        				colDefs.push(conf);
                                        				remainingColumns.splice(remainingColumns.indexOf(row.configuration.fieldName + "#_#" + row.configuration.columnFormatter.type), 1);
                                        			});
                                        		}
                                        	}
                                        	remainingColumns.forEach(row => {
                                        		let column = row.split("#_#");
                                        		let obj;
                                        		if (column[1] == "DATETIME") {
                                        			obj = {
                                        				"horizontalAlign": "left",
                                        				"verticalAlign": "top",
                                        				"headerHorizontalAlign": "left",
                                        				"headerVerticalAlign": "top",
                                        				"type": "DATETIME",
                                        				"format": "yyyy-MM-dd",
                                        				"filterFormat": "yyyy-MM-dd"
                                        			};
                                        		} else {
                                        			obj = {
                                        				"type": column[1]
                                        			};
                                        		}
                                        		let colDefaultConf = {
                                        			"fieldName": column[0], // {string} the data field name.
                                        			"title": column[0], // *{string} the column display name.
                                        			"hidden": true, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        			"inLayout": false,
                                        			"columnFormatter": obj
                                        		};
                                        		colDefs.push(colDefaultConf);
                                        	});
                                        	result = {
                                        		"columns": { // Required
                                        			"columnDefs": colDefs
                                        		}
                                        	};
                                        	logger.info(FN + "Column configuration loaded successfully for [" + selectedTab + "] tab.");
                                            logger.debug("column config -- " +JSON.stringify(result));
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getCountries">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getCountries -> ";
                                        let params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        };
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        try {
                                        	let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let countries = Things[dbConnector].getCountries();
                                        	countries.rows.toArray().forEach(row => {
                                        		// IK.KeyValue.DataShape entry object
                                        		if (row.COUNTRY_NAME) {
                                        			result.AddRow({
                                        				key: row.COUNTRY_ID, // STRING
                                        				value: row.COUNTRY_NAME // STRING
                                        			});
                                        		}
                                        
                                        	});
                                        	logger.info(FN + "Countries fetched successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDefaultView">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // result: INFOTABLE
                                        let sessionValues = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        result ="";
                                        let row = sessionValues.rows[0];
                                        if(row.InputForReqListNavigation){
                                            result = row.InputForReqListViewSelection;
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDefinitions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getDefinitions -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RequirementDefinition.DataShape"
                                        });
                                        try {
                                        	if (ids && ids.getRowCount() > 0) {
                                        		let groupInfo = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        		let group = groupInfo.Find({
                                        			name: "Requirement Specialist"
                                        		});
                                        		let reqResourceProviderThing;
                                        		if (group) {
                                        			reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProviderRequirementPreviewer()];
                                        		} else {
                                        			reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        		}
                                        		let requirementsData = reqResourceProviderThing.getObjectsByIds({
                                        			ids: ids /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        		});
                                        
                                        		for (let i = 0; i < requirementsData.getRowCount(); i++) {
                                        			let row = requirementsData.rows[i];
                                        			result.AddRow({
                                        				id: row.ID + "_Title",
                                        				html_data: "<b>" + row.RequirementTitle + "</b>",
                                        				hasChildren: true
                                        			});
                                        			result.AddRow({
                                        				id: row.ID + "_Text",
                                        				html_data: row.Text,
                                        				parentId: row.ID + "_Title",
                                        				hasChildren: false
                                        			});
                                        		}
                                        	}
                                        	logger.info(FN + "definitions fetched successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getDetailsAvailableColumns">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getDetailsAvailableColumns -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ColumnDefinition.DataShape"
                                        });
                                        try {
                                        	if (view == "Article") {		
                                        		result.AddRow({
                                        			name: "Applies to (Name)", // STRING
                                        			configuration: {
                                        				"fieldName": "applies_to_name_html", // {string} the data field name.
                                        				"title": "Applies to (Name)", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Connected article", // STRING
                                        			configuration: {
                                        				"fieldName": "connected_article", // {string} the data field name.
                                        				"title": "Connected article", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        //                ,
                                        //				"clickable": {
                                        //					"type": "value",
                                        //				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer", // STRING
                                        			configuration: {
                                        				"fieldName": "producer", // {string} the data field name.
                                        				"title": "Producer", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_description", // {string} the data field name.
                                        				"title": "Requirement description", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification method", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_method", // {string} the data field name.
                                        				"title": "Verification method", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement reference", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_source", // {string} the data field name.
                                        				"title": "Requirement reference", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification frequency", // STRING
                                        			configuration: {
                                        				"fieldName": "reporting_frequency", // {string} the data field name.
                                        				"title": "Verification frequency", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Compliant in production", // STRING
                                        			configuration: {
                                        				"fieldName": "compliant_in_production", // {string} the data field name.
                                        				"title": "Compliant in production", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"type": "DATETIME",
                                        					"format": "yyyy-MM-dd",
                                        					"filterFormat": "yyyy-MM-dd"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Verification type", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_type", // {string} the data field name.
                                        				"title": "Verification type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status", // STRING
                                        			configuration: {
                                        				"fieldName": "task_status", // {string} the data field name.
                                        				"title": "Verification status", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				},
                                        				//			"defaultFilter": ["Not verified"]
                                        			},
                                        			state: "disabled"
                                        		});
                                        	} else if (view == "Part") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)", // STRING
                                        			configuration: {
                                        				"targets": 2, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "applies_to_name_html", // {string} the data field name.
                                        				"title": "Applies to (Name)", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Connected part", // STRING
                                        			configuration: {
                                        				"targets": 3, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "connected_part", // {string} the data field name.
                                        				"title": "Connected part", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Connected articles", // STRING
                                        			configuration: {
                                        				"targets": 4, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "connected_article_count", // {string} the data field name.
                                        				"title": "Connected articles", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer", // STRING
                                        			configuration: {
                                        				"targets": 5, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "producer", // {string} the data field name.
                                        				"title": "Producer", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description", // STRING
                                        			configuration: {
                                        				"targets": 6, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "requirement_description", // {string} the data field name.
                                        				"title": "Requirement description", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification method", // STRING
                                        			configuration: {
                                        				"targets": 7, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "verification_method", // {string} the data field name.
                                        				"title": "Verification method", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement reference", // STRING
                                        			configuration: {
                                        				"targets": 8, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "requirement_source", // {string} the data field name.
                                        				"title": "Requirement reference", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification frequency", // STRING
                                        			configuration: {
                                        				"targets": 9, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "reporting_frequency", // {string} the data field name.
                                        				"title": "Verification frequency", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Compliant in production", // STRING
                                        			configuration: {
                                        				"targets": 10, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "compliant_in_production", // {string} the data field name.
                                        				"title": "Compliant in production", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					//                    "type":"STRING",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"type": "DATETIME",
                                        					"format": "yyyy-MM-dd",
                                        					"filterFormat": "yyyy-MM-dd",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Verification type", // STRING
                                        			configuration: {
                                        				"targets": 11, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "verification_type", // {string} the data field name.
                                        				"title": "Verification type", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status", // STRING
                                        			configuration: {
                                        				"targets": 12, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "task_status", // {string} the data field name.
                                        				"title": "Verification status", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				},
                                        				//			"defaultFilter": ["Not verified"]
                                        			},
                                        			state: "disabled"
                                        		});
                                        	} else if (view == "Material" || view == "Requirements" || view == "Sub supplier") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)", // STRING
                                        			configuration: {
                                        				"targets": 2, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "applies_to_name_html", // {string} the data field name.
                                        				"title": "Applies to (Name)", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Connected articles", // STRING
                                        			configuration: {
                                        				"targets": 3, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "connected_article_count", // {string} the data field name.
                                        				"title": "Connected articles", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer", // STRING
                                        			configuration: {
                                        				"targets": 4, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "producer", // {string} the data field name.
                                        				"title": "Producer", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement description", // STRING
                                        			configuration: {
                                        				"targets": 5, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "requirement_description", // {string} the data field name.
                                        				"title": "Requirement description", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification method", // STRING
                                        			configuration: {
                                        				"targets": 6, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "verification_method", // {string} the data field name.
                                        				"title": "Verification method", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement reference", // STRING
                                        			configuration: {
                                        				"targets": 7, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "requirement_source", // {string} the data field name.
                                        				"title": "Requirement reference", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification frequency", // STRING
                                        			configuration: {
                                        				"targets": 8, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "reporting_frequency", // {string} the data field name.
                                        				"title": "Verification frequency", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Compliant in production", // STRING
                                        			configuration: {
                                        				"targets": 9, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "compliant_in_production", // {string} the data field name.
                                        				"title": "Compliant in production", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					//                    "type":"STRING",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"type": "DATETIME",
                                        					"format": "yyyy-MM-dd",
                                        					"filterFormat": "yyyy-MM-dd",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Verification type", // STRING
                                        			configuration: {
                                        				"targets": 10, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "verification_type", // {string} the data field name.
                                        				"title": "Verification type", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				}
                                        			},
                                        			state: "enabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status", // STRING
                                        			configuration: {
                                        				"targets": 11, // {integer} the index of the column to which this data applies.
                                        				"fieldName": "task_status", // {string} the data field name.
                                        				"title": "Verification status", // *{string} the column display name.
                                        				"autoWidth": true,
                                        				"width": "*",
                                        				"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"cellEditor": { // optional: defines cell-editing options for this column
                                        						"enabled": false // *{boolean} to indicate whether cell editing is enable for this column
                                        					}
                                        				},
                                        				//			"defaultFilter": ["Not verified"]
                                        			},
                                        			state: "disabled"
                                        		});
                                        	} 
                                        	logger.info(FN + "Details available columns loaded.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getEndItems">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getEndItems -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PTC.Resource.App.StructuredDataShape"
                                        });
                                        try {
                                        	let projectNumber = project_number.replace("_", "/");
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let number = Things[databaseConnector].getIRUsingSupplierId({
                                        		project_number: projectNumber
                                        	});
                                        	let part_number = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "GenericStringList"
                                        	});
                                        
                                        	for (let i = 0; i < number.getRowCount(); i++) {
                                        		part_number.AddRow({
                                        			item: number[i].PRODUCTNUMBER
                                        		});
                                        	}
                                        
                                        	partNumber = " ";
                                        	if (part_number && part_number.getRowCount() > 0) {
                                        		for (let i = 0; i < part_number.getRowCount(); i++) {
                                        			partNumber += "Number eq '" + part_number.rows[i].item + "'";
                                        			if (i < part_number.getRowCount() - 1) {
                                        				partNumber += " or ";
                                        			}
                                        		}
                                        	}
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	let json = Things[odataconnectorthing].getParts({
                                        		$filter: partNumber,
                                        		$select: "Name,Number,ID"
                                        	});
                                        
                                        	if (json !== undefined && json.value !== undefined) {
                                        		let items = json.value;
                                        		for (let i = 0; i < items.length; i++) {
                                        			let item = items[i];
                                        			// IK.PTC.Resource.App.StructuredDataShape entry object
                                        			let newEntry = new Object();
                                        			newEntry.type = undefined; // STRING
                                        			newEntry.version = undefined; // STRING
                                        			newEntry.parentId = undefined; // STRING
                                        			newEntry.defaultUnit = undefined; // STRING
                                        			newEntry.number = item.Number; // STRING
                                        			newEntry.view = undefined; // STRING
                                        			newEntry.name = item.Number + " - " + item.Name; // STRING
                                        			newEntry.objectId = item.ID; // STRING
                                        			newEntry.usesOccurrenceIdentifier = undefined; // STRING
                                        			newEntry.cost = undefined; // NUMBER
                                        			newEntry.quantityInStock = undefined; // INTEGER
                                        			newEntry.treeId = undefined; // STRING
                                        			newEntry.hasChildren = undefined; // BOOLEAN
                                        			newEntry.navigationSessionId = undefined; // STRING
                                        			newEntry.LastModified = undefined; // DATETIME
                                        			newEntry.state = undefined; // STRING
                                        			newEntry.objectIcon = undefined; // IMAGELINK
                                        			result.AddRow(newEntry);
                                        		}
                                        	}
                                        	logger.info(FN + "Articles loaded successfully for [" + project_number + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getGeneralAvailableColumns">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getGeneralAvailableColumns -> ";
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.ColumnDefinition.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.ColumnDefinition.DataShape"
                                        });
                                        
                                        try {
                                        	let defaultFilter = [];
                                        	let sessionValues = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        	if (sessionValues.rows[0].InputForReqListColumnSelection) {
                                        		let reqId = sessionValues.rows[0].InputForReqListFilterSelection;
                                        		defaultFilter.push(reqId);
                                        	}
                                        	if (view == "Article") {		
                                        		result.AddRow({
                                        			name: "Applies to (Name)", // STRING
                                        			configuration: {
                                        				"fieldName": "applies_to_name_html", // {string} the data field name.
                                        				"title": "Applies to (Name)", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        				//                ,
                                        				//
                                        				//				"clickable": {
                                        				//					"type": "media",
                                        				//					"value": "IK.InformationIcon"
                                        				//				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Connected article", // STRING
                                        			configuration: {
                                        				"fieldName": "connected_article", // {string} the data field name.
                                        				"title": "Connected article", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        				//                ,
                                        				//				"clickable": {
                                        				//					"type": "value",
                                        				//				}
                                        			}
                                        		});
                                        		result.AddRow({
                                        			name: "Producer", // STRING
                                        			configuration: {
                                        				"fieldName": "producer", // {string} the data field name.
                                        				"title": "Producer", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement type", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_type", // {string} the data field name.
                                        				"title": "Requirement type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement subtype", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_subtype", // {string} the data field name.
                                        				"title": "Requirement subtype", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		let reqIdColumnJson = {
                                        			name: "Requirement ID", // STRING
                                        			configuration: {
                                        				"fieldName": "id_rvs", // {string} the data field name.
                                        				"title": "Requirement ID", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "STRING",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top"
                                        				}
                                                    }
                                        		};
                                        		if (defaultFilter.length > 0) {
                                        			reqIdColumnJson.configuration.defaultFilter = defaultFilter;
                                        		}
                                        		result.AddRow(reqIdColumnJson);
                                        		result.AddRow({
                                        			name: "Requirement description", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_description", // {string} the data field name.
                                        				"title": "Requirement description", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification data type", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_data_format", // {string} the data field name.
                                        				"title": "Verification data type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification deadline", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_deadline", // {string} the data field name.
                                        				"title": "Verification deadline", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status", // STRING
                                        			configuration: {
                                        				"fieldName": "task_status", // {string} the data field name.
                                        				"title": "Verification status", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        //                ,
                                        //				"defaultFilter": ["Not verified"]
                                        			},
                                        			state: "disabled"
                                        		});
                                        	} else if (view == "Part") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)", // STRING
                                        			configuration: {
                                        				"fieldName": "applies_to_name_html", // {string} the data field name.
                                        				"title": "Applies to (Name)", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Connected part", // STRING
                                        			configuration: {
                                        				"fieldName": "connected_part", // {string} the data field name.
                                        				"title": "Connected part", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			}
                                        		});
                                        		result.AddRow({
                                        			name: "Producer", // STRING
                                        			configuration: {
                                        				"fieldName": "producer", // {string} the data field name.
                                        				"title": "Producer", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement type", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_type", // {string} the data field name.
                                        				"title": "Requirement type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement subtype", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_subtype", // {string} the data field name.
                                        				"title": "Requirement subtype", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		let reqIdColumnJson = {
                                        			name: "Requirement ID", // STRING
                                        			configuration: {
                                        				"fieldName": "id_rvs", // {string} the data field name.
                                        				"title": "Requirement ID", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "STRING",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			}
                                        		};
                                        		if (defaultFilter.length > 0) {
                                        			reqIdColumnJson.configuration.defaultFilter = defaultFilter;
                                        		}
                                        		result.AddRow(reqIdColumnJson);
                                        
                                        		result.AddRow({
                                        			name: "Requirement description", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_description", // {string} the data field name.
                                        				"title": "Requirement description", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification data type", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_data_format", // {string} the data field name.
                                        				"title": "Verification data type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification deadline", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_deadline", // {string} the data field name.
                                        				"title": "Verification deadline", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status", // STRING
                                        			configuration: {
                                        				"fieldName": "task_status", // {string} the data field name.
                                        				"title": "Verification status", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				},
                                        				//			"defaultFilter": ["Not verified"]
                                        			},
                                        			state: "disabled"
                                        		});
                                        	} else if (view == "Material" || view == "Requirements" || view == "Sub supplier") {
                                        		result.AddRow({
                                        			name: "Applies to (Name)", // STRING
                                        			configuration: {
                                        				"fieldName": "applies_to_name_html", // {string} the data field name.
                                        				"title": "Applies to (Name)", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Producer", // STRING
                                        			configuration: {
                                        				"fieldName": "producer", // {string} the data field name.
                                        				"title": "Producer", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement type", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_type", // {string} the data field name.
                                        				"title": "Requirement type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Requirement subtype", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_subtype", // {string} the data field name.
                                        				"title": "Requirement subtype", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		let reqIdColumnJson = {
                                        			name: "Requirement ID", // STRING
                                        			configuration: {
                                        				"fieldName": "id_rvs", // {string} the data field name.
                                        				"title": "Requirement ID", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "STRING",
                                        					"horizontalAlign": "right",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "right",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			}
                                        		};
                                        		if (defaultFilter.length > 0) {
                                        			reqIdColumnJson.configuration.defaultFilter = defaultFilter;
                                        		}
                                        		result.AddRow(reqIdColumnJson);
                                        
                                        		result.AddRow({
                                        			name: "Requirement description", // STRING
                                        			configuration: {
                                        				"fieldName": "requirement_description", // {string} the data field name.
                                        				"title": "Requirement description", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification data type", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_data_format", // {string} the data field name.
                                        				"title": "Verification data type", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			},
                                        			state: "disabled"
                                        		});
                                        		result.AddRow({
                                        			name: "Verification deadline", // STRING
                                        			configuration: {
                                        				"fieldName": "verification_deadline", // {string} the data field name.
                                        				"title": "Verification deadline", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "string",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top"
                                        				}
                                        			} // JSON
                                        		});
                                        		result.AddRow({
                                        			name: "Verification status", // STRING
                                        			configuration: {
                                        				"fieldName": "task_status", // {string} the data field name.
                                        				"title": "Verification status", // *{string} the column display name.
                                        				"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        				"inLayout": true,
                                        				"columnFormatter": {
                                        					"type": "HTML",
                                        					"horizontalAlign": "left",
                                        					"verticalAlign": "top",
                                        					"headerHorizontalAlign": "left",
                                        					"headerVerticalAlign": "top",
                                        					"format": "unsanitized"
                                        				},
                                        				//			"defaultFilter": ["Not verified"]
                                        			},
                                        			state: "disabled"
                                        		});
                                        	}
                                        	logger.info(FN + "General available columns loaded.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getGenus">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getGenus -> ";
                                        let params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValuePair.DataShape"
                                        };
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        try {
                                        	let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let genus = Things[dbConnector].getGenus();
                                        	genus.rows.toArray().forEach(row => {
                                        		result.AddRow({
                                        			key: row.GENUS_ID, // STRING [Primary Key]
                                        			value: row.GENUS_NAME // STRING
                                        		});
                                        	});
                                        	logger.info(FN + "Genus fetched successfully.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getIllegalLoggingRisk">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getIllegalLoggingRisk -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        try {
                                        	if (country_id || region_id || subregion_id) {
                                        		let illegalLogging;
                                        		let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		if (country_id && !region_id && !subregion_id) {
                                        			illegalLogging = Things[databaseConnector].getIllegalLoggingByCountry({
                                        				country_id: country_id
                                        			});
                                        		} else if (country_id && region_id && !subregion_id) {
                                        			illegalLogging = Things[databaseConnector].getIllegalLoggingByCountryRegion({
                                        				country_id: country_id,
                                        				region_id: region_id
                                        			});
                                        		} else if (country_id && region_id && subregion_id) {
                                        			illegalLogging = Things[databaseConnector].getIllegalLoggingByCountryRegionSubregion({
                                        				country_id: country_id,
                                        				region_id: region_id,
                                        				subregion_id: subregion_id
                                        			});
                                        		}
                                        		for (let i = 0; i < illegalLogging.getRowCount(); i++) {
                                        			result.AddRow({
                                        				item: illegalLogging.rows[i].ILLEGAL_LOGGING
                                        			});
                                        		}
                                        		logger.info(FN + "executed sucessfully ");
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getInstructionsInBulkUpload">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "GenericStringList"
                                        });
                                        result.AddRow({item:instructions});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getOverviewMashupName">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getOverviewMashupName -> ";
                                        try {
                                        	let type = InputForOverview.split("#_#")[6];
                                        
                                        	if (type == "Self Declaration" || type == "Plant Declaration" || type == "Weight & volume") {
                                        		result = "IK.VerificationOverviewSelfDeclarationType.Mashup";
                                        	} else if (type == "Test Report") {
                                        		result = "IK.VerificationOverviewTestReportType.Mashup";
                                        	} else if (type == "Certificate") {
                                        		result = "IK.VerificationOverviewCertificateType.Mashup";
                                        	}
                                        	logger.info(FN + '"' + result + '" is loaded');
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getParentSuppliersForSubsupplier">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getParentSuppliersForSubsupplier -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let delegatorIds = Things[dataBaseThing].getDelegatorIdByDelegatedId({
                                        		delegated_id: project_number
                                        	});
                                        	for (let i = 0; i < delegatorIds.length; i++) {
                                        		let delegatorId = delegatorIds.rows[i];
                                        		let newEntry = {
                                        			item: delegatorId.DELEGATOR_ID
                                        		};
                                        		result.AddRow(newEntry);
                                        	}
                                        
                                        	logger.info(FN + "Parent suppliers loaded for subsupplier [" + project_number + "].");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getPlantDataFromBulkUpload">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getPlantDataFromBulkUpload -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PlantReportData.DataShape"
                                        });
                                        
                                        try {
                                        	if (existingData && existingData.getRowCount() > 0) {
                                        		bulkUploadData.rows.forEach(row => {
                                        			let uid = generateGUID();
                                        			result.AddRow({
                                        				uid: uid,
                                        				species: row.species,
                                        				genus: row.genus,
                                        				commonName: row.commonName,
                                        				country: row.country,
                                        				region: row.region,
                                        				subRegion: row.subRegion,
                                        				risk: row.risk,
                                        				complianceStatus: row.complianceStatus,
                                        				action: "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"deletePlantReportDropdownsFromGrid('" + uid + "')\"/>"
                                        			});
                                        		});
                                        		existingData.rows.forEach(row => {
                                        			result.AddRow(row);
                                        		});
                                        	} else {
                                        		bulkUploadData.rows.forEach(row => {
                                        			let uid = generateGUID();
                                        			result.AddRow({
                                        				uid: uid,
                                        				species: row.species,
                                        				genus: row.genus,
                                        				commonName: row.commonName,
                                        				country: row.country,
                                        				region: row.region,
                                        				subRegion: row.subRegion,
                                        				risk: row.risk,
                                        				complianceStatus: row.complianceStatus,
                                        				action: "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"deletePlantReportDropdownsFromGrid('" + uid + "')\"/>"
                                        			});
                                        		});
                                        		logger.info(FN + "Plant report data added successfully.");
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getPlantReport">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = plantData;
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getPlantReportReportingObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getPlantReportReportingObject -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PlantDeclaration.DataShape"
                                        });
                                        let plant_data = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PlantReportData.DataShape"
                                        });
                                        
                                        try {
                                        	if (reporting_object_oid) {
                                        		reporting_object_oid = reporting_object_oid.includes("#_#") ? reporting_object_oid.split("#_#")[0] : reporting_object_oid;
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let part = Things[odataconnectorthing].getPartInPartsById({
                                        			ID: reporting_object_oid
                                        		});
                                        		let newEntry = new Object();
                                        		newEntry.last_modified = part.LastModified;
                                        		newEntry.comment = part.VerificationComment;
                                        		let plant_data_arr = [];
                                        		let classificationAttributes = part.ReportingObjectClassification.ClassificationAttributes;
                                        
                                        
                                        		for (let c = 0; c < classificationAttributes.length; c++) {
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDRecyclePercentage") {
                                        				newEntry.recycle_percentage = classificationAttributes[c].Value == " " ? "" : classificationAttributes[c].Value;
                                        			}
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDValidFrom") {
                                        				newEntry.valid_from = classificationAttributes[c].DisplayValue;
                                        			}
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDValidTill") {
                                        				newEntry.valid_to = classificationAttributes[c].DisplayValue;
                                        			}
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDPlantReportAttributes") {
                                        				plant_data_arr.push(classificationAttributes[c].Value);
                                        			}
                                        		}
                                        		for (let i = 0; i < plant_data_arr.length; i++) {
                                        			let row = plant_data_arr[i].split("|");
                                        			let plantData = new Object();
                                        			plantData.uid = generateGUID();
                                        			plantData.commonName = row[0];
                                        			plantData.genus = row[1];
                                        			plantData.species = row[2];
                                        			plantData.country = row[3];
                                        			plantData.region = row[4];
                                        			plantData.subRegion = row[5];
                                        			plantData.risk = row[6];
                                        			plantData.complianceStatus = row[7];
                                        			plantData.action = "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin' onclick=\"deletePlantReportDropdownsFromGrid('" + plantData.uid + "')\"/>";
                                        			plant_data.AddRow(plantData);
                                        		}
                                        		newEntry.plant_report = plant_data;
                                        		result.AddRow(newEntry);
                                        	}
                                        	logger.info(FN + "reporting object fetched successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRegions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRegions -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        });
                                        
                                        try {
                                        	let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let regions = Things[dbConnector].getRegions({
                                        		countryId: countryId /* STRING */
                                        	});
                                        	regions.rows.toArray().forEach(row => {
                                        		// IK.KeyValue.DataShape entry object
                                        		if (row.REGION_NAME) {
                                        			result.AddRow({
                                        				key: row.REGION_ID, // STRING 
                                        				value: row.REGION_NAME // STRING
                                        			});
                                        		}
                                        	});
                                        	logger.info(FN + "Regions fetched successfully for country[" + countryId + "].");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getReportedValuesForOverview">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + "getReportedValuesForOverview -> ";
                                        try {
                                        	var params = {
                                        		infoTableName: undefined /* STRING */
                                        	};
                                        	var result = Resources["InfoTableFunctions"].CreateInfoTable(params);
                                        
                                        	let type = InputForOverview.split("#_#")[6];
                                        
                                        	if (type == "Self Declaration") {
                                        		result.AddField({
                                        			name: "Batch number",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Verification statement",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Valid from",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Valid to",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Description",
                                        			baseType: "STRING"
                                        		});
                                        	} else if (type == "Certificate") {
                                        		result.AddField({
                                        			name: "Batch number",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Certificate ID",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Certifier",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Valid from",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Valid to",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Description",
                                        			baseType: "STRING"
                                        		});
                                        	} else if (type == "Test Report") {
                                        		result.AddField({
                                        			name: "Batch number",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Limit",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Unit",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Test labs",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Date",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Description",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Value",
                                        			baseType: "STRING"
                                        		});
                                        		result.AddField({
                                        			name: "Result",
                                        			baseType: "STRING"
                                        		});
                                        	}
                                        	logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getRequirementText">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getRequirementText -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.RequirementDescription.DataShape"
                                        });
                                        let definition = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        try {
                                        	let groupInfo = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        	let group = groupInfo.Find({
                                        		name: "Requirement Specialist"
                                        	});
                                        	let reqResourceProviderThing;
                                        	if (group) {
                                        		reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProviderRequirementPreviewer()];
                                        	} else {
                                        		reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        	}
                                        	let requirementsData = reqResourceProviderThing.getObjectById({
                                        		id: id_rvs
                                        	});
                                        	let row = requirementsData.rows[0];
                                        	if (row.Definition) {
                                        		for (let i = 0; i < row.Definition.getRowCount(); i++) {
                                        			let def = row.Definition.rows[i];
                                        			definition.AddRow({
                                        				item: def.ID
                                        			});
                                        		}
                                        	}
                                        	orginal = "https://ptpseelm-nt4085.ikeadta.com";
                                        	modified = "https://cvmdev.plusnavigate.ikeadt.com";
                                        	row.Text = row.Text.split(orginal).join(modified);
                                        
                                        	result.AddRow({
                                        		requirement_title: row.RequirementTitle,
                                        		requirement_text: row.Text,
                                        		definition: definition
                                        	});
                                            logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSchemaJson">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	model: {
                                        		id: "unique_id",
                                        		fields: {
                                        			unique_id: {
                                        				type: "string",
                                        				editable: false
                                        			},
                                        			requestor: {
                                        				type: "string",
                                        				editable: false
                                        			},
                                        			applies_to_name: {
                                        				type: "string",
                                        				editable: false
                                        			},
                                        			requirement_title: {
                                        				type: "string",
                                        				editable: false
                                        			},
                                        			test_method: {
                                        				type: "string",
                                        				editable: false
                                        			},
                                        			test_labs_data: {
                                        				editable: false,
                                        				defaultValue: {
                                        					item: " "
                                        				}
                                        			},
                                        			batch_number: {
                                        				type: "string",
                                        				editable: true
                                        			},
                                        			sample_description: {
                                        				type: "string",
                                        				editable: true
                                        			},
                                        			units_data: {
                                        				editable: false
                                        			},
                                        			result: {
                                        				type: "string",
                                        				editable: true
                                        			},
                                        			action: {
                                        				type: "string",
                                        				editable: false
                                        			}
                                        		}
                                        	}
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSchemaJsonCertVerifiy">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	model: {
                                        		id: "unique_id",
                                        		fields: {
                                                    test_labs_data: {
                                        				editable: false,
                                        				defaultValue: {
                                        					item: " ",
                                        				},
                                        			},
                                        			unique_id: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			applies_to_name: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			producer: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			requirement_title: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                                    certification_method: {
                                        				type: "string",
                                        				editable: false,
                                        			},            
                                        			certificate_issuer_data: {
                                        				editable: false,
                                        				defaultValue: {
                                        					item: " ",
                                        				},
                                        			},
                                                    
                                        			certificate_name: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                                    certificate_type_data: {
                                        				editable: false,
                                        				defaultValue: {
                                        					item: " ",
                                        				},
                                        			},
                                                    certifier_data: {
                                        				editable: false,
                                        				defaultValue: {
                                        					item: " ",
                                        				},
                                        			},
                                        			action: {
                                        				type: "string",
                                        				editable: false,
                                        			}
                                        		}
                                        	}
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSchemaJsonForTestReport">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	model: {
                                        		id: "unique_id",
                                        		fields: {
                                        			unique_id: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			applies_to_name: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			requirement_title: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			test_method: {
                                        				type: "string",
                                        				editable: false,
                                        			},
                                        			test_labs_data: {
                                        				editable: false,
                                        				defaultValue: {
                                        					item: " ",
                                        				},
                                        			},
                                        			sample_production_date: {
                                        				type: "date",
                                        				editable: false,
                                        			},
                                        			batch_number: {
                                        				type: "string",
                                        				editable: true,
                                        			},
                                        			material_description: {
                                        				type: "string",
                                        				editable: true,
                                        			},
                                        			material_identification_code: {
                                        				type: "string",
                                        				editable: true,
                                        			},
                                        //			sample_description: {
                                        //				type: "string",
                                        //				editable: true,
                                        //			},
                                        			action: {
                                        				type: "string",
                                        				editable: false,
                                        			}
                                        		}
                                        	}
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSelectedRowsFromCustomGrid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSelectedRowsFromGrid -> ";
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		row.isSelected = true;
                                        	}
                                        	result = data;
                                        	logger.info(FN + "[" + data.getRowCount() + "] Selected rows loaded for Custom Grid.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSelectedRowsFromGrid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSelectedRowsFromGrid -> ";
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	let query = {
                                        		"filters": {
                                        			"type": "EQ",
                                        			"fieldName": "isSelected",
                                        			"value": true
                                        		}
                                        	};
                                        	params = {
                                        		t: data /* INFOTABLE */ ,
                                        		query: query /* QUERY */
                                        	};
                                        	result = Resources["InfoTableFunctions"].Query(params);
                                        	logger.info(FN + "[" + data.getRowCount() + "] Selected rows loaded for the grid.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSelectedTestOrder">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSelectedTestOrder -> ";
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.VerificationAggregated.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        let selectedIds = [];
                                        try{
                                            //Fetching the selected Ids
                                            for (let i = 0; i < selected_data.getRowCount(); i++) {
                                        		selectedIds.push(selected_data.rows[i].item);
                                        	}
                                            //Fetching the updated rows that are selected
                                            for (let i = 0; i < updated_data.getRowCount(); i++) {
                                        		let rowData = updated_data.rows[i];
                                                if (selectedIds.indexOf(rowData.unique_id) != -1)
                                                {
                                                    if(rowData.test_labs)
                                                    {
                                                        result.AddRow(rowData);
                                                    }
                                                }
                                            }
                                            
                                        }
                                        catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSpecies">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSpecies -> ";
                                        let params = {
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.SpeciesDetail.DataShape"
                                        };
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        try {
                                        	let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let species = Things[dbConnector].getSpecies({
                                        		genus_id: genus_id
                                        	});
                                        	species.rows.toArray().forEach(row => {
                                        		result.AddRow({
                                        			SPECIE_ID: row.SPECIE_ID, // NUMBER
                                        			SPECIE_NAME: row.SPECIE_NAME, // STRING
                                        			COMMON_NAME: row.COMMON_NAME, // STRING
                                        			GENUS_ID: row.GENUS_ID, // NUMBER
                                        			APPROVAL_DATE: row.APPROVAL_DATE, // DATETIME
                                        			COMMENTS: row.COMMENTS, // STRING
                                        			PROTECTION_STATUS: row.PROTECTION_STATUS // STRING
                                        		});
                                        
                                        	});
                                        	logger.info(FN + "Species fetched successfully for genus id[" + genus_id + "].");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSubRegion">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSubRegion ";
                                        var params = {
                                            infoTableName : "InfoTable",
                                            dataShapeName : "GenericStringList"
                                        };
                                        
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(GenericStringList)
                                        var result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        try{
                                        // GenericStringList entry object
                                        result.AddRow({item: "Adolfo Alsina"});
                                        result.AddRow({item: "Almirante Brown"});
                                        result.AddRow({item: "Biedma"});
                                        result.AddRow({item: "Cruz del Eje"});
                                        result.AddRow({item: "General San Martín"});
                                        result.AddRow({item: "Ischilín"});
                                        result.AddRow({item: "Minas"});
                                        result.AddRow({item: "Punilla"});
                                        result.AddRow({item: "Victoria"});
                                        result.AddRow({item: "Uruguay"});
                                        }
                                        catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSubregions">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getSubregions -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        });
                                        try {
                                        	let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let subregions = Things[dbConnector].getSubregions({
                                        		regionId: regionId /* STRING */
                                        	});
                                        
                                        	subregions.rows.toArray().forEach(row => {
                                        		// IK.KeyValue.DataShape entry object
                                        		if (row.SUBREGION_NAME) {
                                        			result.AddRow({
                                        				key: row.SUBREGION_ID, // STRING [Primary Key]
                                        				value: row.SUBREGION_NAME // STRING
                                        			});
                                        		}
                                        	});
                                        	logger.info(FN + "Subregions fetch for regin [" + regionId + "].");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getSubRowColumnJson">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	"columns": [{
                                        			selectable: false,
                                        			width: "58.5px"
                                        		},
                                        		{
                                        			field: "requestor",
                                        			title: "Requestor",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "applies_to_name",
                                        			title: "Supply Object",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "requirement_title",
                                        			title: "Requirement Object",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "test_method",
                                        			title: "Test method",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "test_labs_data",
                                        			title: "Test labs",
                                        			width: "129px"
                                        		},
                                        
                                        		{
                                        			field: "batch_number",
                                        			title: "Batch number",
                                        			width: "129px",
                                        			template: "<input class=\"batchNumberTextBox\"/>"
                                        		},
                                        		{
                                        			field: "sample_description",
                                        			title: "Sample description",
                                        			width: "139px",
                                        			template: "<input class=\"sampleDescriptionTextBox\"/>"
                                        		},
                                        		{
                                        			field: "units_data",
                                        			title: "Unit",
                                        			template: "<input class=\"unitsDropDownTemplate\"/>",
                                        			width: "129px"
                                        		},
                                        		{
                                        			field: "result",
                                        			title: "Result",
                                        			width: "129px",
                                        			template: "<input class=\"resultTextBox\"/>"
                                        		},
                                        		{
                                        			field: "action",
                                        			title: " ",
                                        			template: "<img class=\"deleteSubRowTemplate\" style=\"cursor: pointer; padding:10px 0px;\" height=\"20px !important\" width=\"20px !important\" src='/Thingworx/MediaEntities/IKEA.Skapp.Bin'/>"
                                        		}
                                        
                                        	]
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTasks -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	result = tasks;
                                        	logger.info(FN + "[" + tasks.getRowCount() + "] Tasks fetched.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTasksForCertificateVerification">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTasksForCertificateVerification -> ";
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        let testLabsData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let certifierData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let certificateType = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	if (task_details && task_details.getRowCount() > 0) {
                                        		let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		let testLabs = me.getTestLabs();
                                                certificateType.AddRow({
                                        			item: ""
                                        		});
                                        		certificateType.AddRow({
                                        			item: "EPA"
                                        		});
                                        		certificateType.AddRow({
                                        			item: "LCI"
                                        		});
                                        		certificateType.AddRow({
                                        			item: "Others"
                                        		});
                                        		for (let i = 0; i < task_details.getRowCount(); i++) {
                                        			let row = task_details.rows[i];
                                        			let newEntry = Object.assign({}, row);
                                        			newEntry.certifier_data = certifierData;
                                        			newEntry.certificate_issuer_data = testLabs;
                                        			newEntry.certificate_type_data = certificateType;
                                                    newEntry.certifier = "";
                                        			result.AddRow(newEntry);
                                        		}
                                        	}
                                        	logger.info(FN + "service executed");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTasksForSelectedValues">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTasksForSelectedValues -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	let start = new Date().getTime();
                                        	// Hardcoded Ids because we dont have plant declaration and weight volume type in RVS
                                        	let plantDecIds = [21293, 21295, 21296];
                                        	let weightVolIds = [21298, 21282, 21275];
                                        	let notValidTests = ["60151"];
                                        	let distinctVerificationToFetch = [];
                                        	let distinctVerificationToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "GenericStringList"
                                        	});
                                        	let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        
                                        	let selectedValues = [];
                                        	let selectedItemsArr = [];
                                        	selectedItems.rows.toArray().forEach(item => {
                                        		selectedValues.push("'" + item.key + "'");
                                        		selectedItemsArr.push(item.key);
                                        	});
                                        	let selectedValuesStr = selectedValues.join(",");
                                        	let supplyObjects;
                                        	if (view == "Article") {
                                        		supplyObjects = Things[dataBaseThing].getSupplyObjectsForArticleView({
                                        			article_number: selectedValuesStr /* STRING */ ,
                                        			supplier_number: project_number /* STRING */
                                        		});
                                        	} else if (view == "Part" || view == "Material") {
                                        		supplyObjects = Things[dataBaseThing].getSupplyObjectsForPartAndMaterialView({
                                        			part_number: selectedValuesStr /* STRING */ ,
                                        			supplier_number: project_number /* STRING */
                                        		});
                                        	} else if (view == "Requirements" || view == "Sub supplier") {
                                        		supplyObjects = Things[dataBaseThing].getSupplyObjectsBySupplier({
                                        			supplier_number: project_number /* STRING */
                                        		});
                                        	}
                                        	let s1 = new Date().getTime();
                                        	logger.debug(FN + "s1---- " + (s1 - start));
                                        
                                        	let taskObjects = {};
                                        	let requirementIDs = [];
                                        	let filters = [];
                                        	let supplyObjectNumbers = [];
                                        	let parentPartsFilters = [];
                                        	for (let i = 0; i < supplyObjects.getRowCount(); i++) {
                                        		let supplyObject = supplyObjects.rows[i];
                                        		let supplyObjectNumber = supplyObject.SUPPLY_OBJECT_NUMBER;
                                        		let hierarchy = supplyObject.HIERARCHY;
                                        		let supplierNumber = supplyObject.SUPPLIER_NUMBER;
                                        		let traces = supplyObject.TRACES.split(",");
                                        		for (let j = 0; j < traces.length; j++) {
                                        			let reqId = traces[j];
                                        			taskObjects[supplyObjectNumber + reqId] = {};
                                        			taskObjects[supplyObjectNumber + reqId].supply_object_id = supplyObjectNumber;
                                        			taskObjects[supplyObjectNumber + reqId].id_rvs = reqId;
                                        			taskObjects[supplyObjectNumber + reqId].requestor = supplierNumber;
                                        
                                        			if (requirementIDs.indexOf(reqId) == -1) {
                                        				requirementIDs.push(reqId);
                                        				let liveIdWithVersions = reqId.split("-");
                                        				let liveItemId = liveIdWithVersions[0];
                                        				if (liveIdWithVersions.length > 1) {
                                        					let versionId = liveIdWithVersions[1].split(".");
                                        					let majorVersion = versionId[0];
                                        					let minorVersion = versionId[1];
                                        					filters.push({
                                        						"filters": [{
                                        							fieldName: "LiveItemID",
                                        							value: liveItemId,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "MajorVersionID",
                                        							value: majorVersion,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "MinorVersionID",
                                        							value: minorVersion,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "DocumentID",
                                        							type: "MissingValue"
                                        						}],
                                        						"type": "AND"
                                        					});
                                        				} else {
                                        
                                        					filters.push({
                                        						"filters": [{
                                        							fieldName: "ID",
                                        							value: liveItemId,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "DocumentID",
                                        							type: "NotMissingValue"
                                        						}],
                                        						"type": "AND"
                                        					});
                                        				}
                                        			}
                                        		}
                                        		if (supplyObjectNumbers.indexOf(supplyObjectNumber) == -1) {
                                        			supplyObjectNumbers.push(supplyObjectNumber);
                                        		}
                                        	}
                                        	let s2 = new Date().getTime();
                                        	logger.debug(FN + "s2---- " + (s2 - s1));
                                        
                                        	// Fetch requirements from RVS 
                                        	let requirementResourceProvider = Things["IK.CVM.Configuration"].getRequirementResourceProvider();
                                        	let requirements = Things[requirementResourceProvider].getObjects({
                                        		query: {
                                        			"filters": {
                                        				"filters": filters,
                                        				"type": "OR"
                                        			}
                                        		} /* QUERY */
                                        	});
                                        	let s3 = new Date().getTime();
                                        	logger.debug(FN + "s3---- " + (s3 - s2));
                                        
                                        	let dataToFillWithVerificationTests = [];
                                        	if (taskObjects && Object.keys(taskObjects).length > 0) {
                                        		for (let task in taskObjects) {
                                        			let taskObject = taskObjects[task];
                                        			let query;
                                        			let liveIdWithVersions = taskObject.id_rvs.split("-");
                                        			let liveItemId = liveIdWithVersions[0];
                                        			if (liveIdWithVersions.length > 1) {
                                        				let versionId = liveIdWithVersions[1].split(".");
                                        				let majorVersion = versionId[0];
                                        				let minorVersion = versionId[1];
                                        				query = {
                                        					"filters": {
                                        						"filters": [{
                                        							fieldName: "LiveItemID",
                                        							value: liveItemId,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "MajorVersionID",
                                        							value: majorVersion,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "MinorVersionID",
                                        							value: minorVersion,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "DocumentID",
                                        							type: "MissingValue"
                                        						}],
                                        						"type": "AND"
                                        					}
                                        				};
                                        			} else {
                                        				query = {
                                        					"filters": {
                                        						"filters": [{
                                        							fieldName: "ID",
                                        							value: liveItemId,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "DocumentID",
                                        							type: "NotMissingValue"
                                        						}],
                                        						"type": "AND"
                                        					}
                                        				};
                                        			}
                                        			params = {
                                        				t: requirements /* INFOTABLE */ ,
                                        				query: query /* QUERY */
                                        			};
                                        			let requirement = Resources["InfoTableFunctions"].Query(params);
                                        			let verificationDataFormat = requirement.VerificationDataformat;
                                        			let verifiedBy = requirement.VerifiedBy;
                                        			let requirementType = requirement.RequirementType;
                                        			if (view == "Article" || view == "Part" || view == "Material" || view == "Sub supplier" || (view == "Requirements" && selectedItemsArr.indexOf(requirementType) != -1)) {
                                        
                                        				if ((verificationDataFormat && verificationDataFormat.getRowCount() > 0) || (plantDecIds.indexOf(requirement.ID) != -1 || weightVolIds.indexOf(requirement.ID) != -1)) {
                                        					if (plantDecIds.indexOf(requirement.ID) != -1) {
                                        						verificationDataFormat = {};
                                        						verificationDataFormat.rows = [];
                                        						verificationDataFormat.rows.push({
                                        							"Verification Data format": "Plant Declaration"
                                        						});
                                        					} else if (weightVolIds.indexOf(requirement.ID) != -1) {
                                        						verificationDataFormat = {};
                                        						verificationDataFormat.rows = [];
                                        						verificationDataFormat.rows.push({
                                        							"Verification Data format": "Weight or volume"
                                        						});
                                        					}
                                        					for (let d = 0; d < verificationDataFormat.rows.length; d++) {
                                        						let dataFormat = verificationDataFormat.rows[d]["Verification Data format"];
                                        						if (verifiedBy) {
                                        							for (let v = 0; v < verifiedBy.rows.length; v++) {
                                        								if (notValidTests.indexOf(verifiedBy.rows[v].ID) === -1) {
                                        									let newEntry = new Object();
                                        									let uid = generateGUID();
                                        									newEntry.unique_id = uid;
                                        									newEntry.requestor = taskObject.requestor;
                                        									newEntry.id_rvs = taskObject.id_rvs;
                                        									newEntry.requirement_title = requirement.RequirementTitle;
                                        									newEntry.requirement_description = "<a style=\"text-decoration: underline;cursor:pointer;\" onClick=\"getRequirementText('" + newEntry.id_rvs + "','root_mashupcontainer-17_ptcsbutton-377')\">" + newEntry.requirement_title + "</a>";
                                        									newEntry.requirement_type = requirement.RequirementType;
                                        									newEntry.requirement_subtype = requirement.RequirementSubtype && requirement.RequirementSubtype.rows.length > 0 ? requirement.RequirementSubtype.rows[0].get("Requirement Subtype") : "";
                                        									newEntry.verification_data_format = dataFormat;
                                        									newEntry.id_rvs_verified = verifiedBy.rows[v].ID;
                                        									newEntry.supply_object_id = taskObject.supply_object_id;
                                        									newEntry.test_report_issue_date = new Date();
                                        									newEntry.sample_production_date = new Date();
                                        									newEntry.certificate_valid_from = new Date();
                                        									newEntry.certificate_valid_to = new Date();
                                        									let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        										requirement_id: newEntry.id_rvs,
                                        										supply_object_id: newEntry.supply_object_id
                                        									});
                                        									if (deadLine && deadLine.getRowCount() > 0) {
                                        										newEntry.compliant_in_production = deadLine.rows[0].DEADLINE;
                                        									}
                                        									if (newEntry.verification_data_format == "Self Declaration") {
                                        										newEntry.ValidationMashupName = "IK.VerificationReportingSelfDeclarationType.Mashup";
                                        										newEntry.delegation_mashup_name = "IK.DelegateSelfDeclarationType.Mashup";
                                        										newEntry.popup_height = 600;
                                        										newEntry.popup_width = 1500;
                                        										newEntry.verification_statement = "<label style=\"top: -16px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position:relative; left:-35px; width:80%; height:26px ; border-radius:2px; border:1px solid #929292; font-size:11px;\" onchange=\"setDropDownValue('" + newEntry.unique_id + "#_#Select','" + newEntry.unique_id + "')\"><option disabled selected value></option><option value=\"Fulfils\">Fulfils</option><option value=\"Not applicable\">Not applicable</option></select>";
                                        									} else if (newEntry.verification_data_format == "Test Report") {
                                        										newEntry.ValidationMashupName = "IK.VerificationReportingTestReportTypeVerifyCustomWidget.Mashup";
                                        										newEntry.delegation_mashup_name = "IK.DelegateTestReportType.Mashup";
                                        										newEntry.SendRequestMashupName = "IK.VerificationReportingOrderTestReportCustomWidget.Mashup";
                                        										newEntry.popup_height = 600;
                                        										newEntry.popup_width = 1550;
                                        										newEntry.action = "<a style=\"text-decoration: underline;cursor:pointer;\" onclick=\"updateTestReportTypeTask('" + newEntry.unique_id + "','root_mashupcontainer-17_navigationfunction-150-popup_ptcsbutton-56')\"> Manage details</a>";
                                        										newEntry.sub_row_count = "0";
                                        									} else if (newEntry.verification_data_format == "Certificate") {
                                        										let testLabs = Things[dataBaseThing].getAllTestLabDetails();
                                        										let options = "";
                                        										for (let i = 0; i < testLabs.getRowCount(); i++) {
                                        											options += "<option style=\"font-size:14px;\"value=\"" + testLabs.rows[i].LAB_NUMBER + "\">" + testLabs.rows[i].LAB_NAME + "</option>";
                                        										}
                                        										newEntry.ValidationMashupName = "IK.VerificationReportingCertificateTypeVerifyCustomWidget.Mashup";
                                        										newEntry.delegation_mashup_name = "IK.DelegateCertificateType.Mashup";
                                        										newEntry.SendRequestMashupName = "IK.VerificationReportingOrderCertificate.Mashup";
                                        										newEntry.popup_height = 600;
                                        										newEntry.popup_width = 1550;
                                        										newEntry.certifier = "<label style=\"top: -14px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position: relative;font :normal normal normal 14px/20px Noto IKEA Latin; top:-22px; width:90%; height:34px ; border-radius:2px; border:1px solid #929292;\"><option disabled selected value>" + options + "</select>";
                                        										newEntry.batch_number = "<input type=text id=\"" + newEntry.unique_id + "#_#BatchNumber\" style=\"position:relative; left:0px; width:90% ; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#BatchNumber','" + newEntry.unique_id + "', 'BatchNumber')\" />";
                                        										newEntry.material_description = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialDescription','" + newEntry.unique_id + "', 'MaterialDescription')\" />";
                                        										newEntry.material_identification_code = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialIdentificationCode\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialIdentificationCode','" + newEntry.unique_id + "', 'MaterialIdentificationCode')\" />";
                                        										newEntry.sample_description = "<input type=text id=\"" + newEntry.unique_id + "#_#SampleDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#SampleDescription','" + newEntry.unique_id + "', 'SampleDescription')\" />";
                                        										newEntry.additional_information = "<input type=text id=\"" + newEntry.unique_id + "#_#AdditionalInformation\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#AdditionalInformation','" + newEntry.unique_id + "', 'AdditionalInformation')\" />";
                                        										newEntry.action = "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.UploadIcon.Media' onclick=\"\"/>";
                                        									} else if (newEntry.verification_data_format == "Plant Declaration") {
                                        										newEntry.delegation_mashup_name = "IK.DelegatePlantDeclaration.Mashup";
                                        										newEntry.ValidationMashupName = "IK.VerificationReportingPlantDeclarationType.Mashup";
                                        										newEntry.popup_height = 600;
                                        										newEntry.popup_width = 1350;
                                        									} else if (newEntry.verification_data_format == "Weight or volume") {
                                        										newEntry.ValidationMashupName = "CVM.VerificationReportingWeightAndVolumeType.Mashup";
                                        										newEntry.popup_height = 600;
                                        										newEntry.popup_width = 1500;
                                        										let materials;
                                        										if (view == "Article") {
                                        											materials = Things["IK.DatabaseConnector.Thing"].getAllHierarchyByArticleNumbers({
                                        												supply_object_number: newEntry.supply_object_id /* STRING */ ,
                                        												requirement_id: "%" + newEntry.id_rvs + "%" /* STRING */ ,
                                        												article_numbers: selectedValuesStr,
                                        												supplier_number: project_number
                                        											});
                                        										} else if (view == "Part" || view == "Material") {
                                        											materials = Things[dataBaseThing].getAllHierarchyByPartNumbers({
                                        												part_numbers: selectedValuesStr,
                                        												supply_object_number: newEntry.supply_object_id,
                                        												supplier_number: project_number
                                        											});
                                        										} else if (view == "Requirements" || view == "Sub supplier") {
                                        											materials = Things[dataBaseThing].getAllHierarchyBySupplier({
                                        												supplier_number: project_number,
                                        												supply_object_number: newEntry.supply_object_id
                                        											});
                                        										}
                                        										//Add weight and volume tasks based on parents
                                        										let parents = [];
                                        										for (let i = 0; i < materials.getRowCount(); i++) {
                                        											let hierarchy = materials.rows[i].HIERARCHY.split("-");
                                        											let parent = hierarchy[hierarchy.length - 2];
                                        											if (parents.indexOf(parent) == -1) {
                                        												parents.push(parent);
                                        												if (parentPartsFilters.indexOf(parent) == -1) {
                                        													parentPartsFilters.push(parent);
                                        												}
                                        											}
                                        										}
                                        										for (let i = 0; i < parents.length; i++) {
                                        											let newObj = Object.assign({}, newEntry);
                                        											newObj.unique_id = generateGUID();
                                        											newObj.applies_to_part = parents[i];
                                        											newObj.action = "<input type=text id=\"" + newObj.unique_id + "#_#WeightOrVolume\" style=\"width:85% ; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" oninput=\"setWeightOrVolumeTextBox('" + newObj.unique_id + "#_#WeightOrVolume','" + newObj.unique_id + "')\" />";
                                        											dataToFillWithVerificationTests.push({
                                        												entry: newObj
                                        											});
                                        										}
                                        									}
                                        									if (distinctVerificationToFetch.indexOf(newEntry.id_rvs_verified) === -1) {
                                        										distinctVerificationToFetch.push(newEntry.id_rvs_verified);
                                        										distinctVerificationToFetchInfoTable.AddRow({
                                        											item: newEntry.id_rvs_verified
                                        										});
                                        									}
                                        									if (dataFormat != "Weight or volume") {
                                        										dataToFillWithVerificationTests.push({
                                        											entry: newEntry
                                        										});
                                        									}
                                        								}
                                        							}
                                        						}
                                        					}
                                        				}
                                        			}
                                        		}
                                        	}
                                        	let s4 = new Date().getTime();
                                        	logger.debug(FN + "s4---- " + (s4 - s3));
                                        
                                        	let parentPartsJson;
                                        	if (parentPartsFilters && parentPartsFilters.length > 0) {
                                        		parentPartsJson = Things[odataconnectorthing].getPostParts({
                                        			$expand: undefined /* STRING {"dataShape":""} */ ,
                                        			numbers: parentPartsFilters.join(",") /* STRING [Required] {"dataShape":""} */ ,
                                        			$select: "Name,Number" /* STRING {"dataShape":""} */
                                        		});
                                        	}
                                        	let s5 = new Date().getTime();
                                        	logger.debug(FN + "s5---- " + (s5 - s4));
                                        
                                        	let supplyObjectsJson = Things[odataconnectorthing].getPostParts({
                                        		$expand: undefined /* STRING {"dataShape":""} */ ,
                                        		numbers: supplyObjectNumbers.join(",") /* STRING [Required] {"dataShape":""} */ ,
                                        		$select: "Name,Number,CVMClassification" /* STRING {"dataShape":""} */
                                        	});
                                        	let s6 = new Date().getTime();
                                        	logger.debug(FN + "s6---- " + (s6 - s5));
                                        
                                        	const testResourceProviderThing = Things[Things["IK.CVM.Configuration"].getTestResourceProvider()];
                                        	let testDetails;
                                        	if (distinctVerificationToFetchInfoTable.getRowCount() > 0) {
                                        		testDetails = testResourceProviderThing.getObjectsByIds({
                                        			ids: distinctVerificationToFetchInfoTable /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        		});
                                        	}
                                        	let s7 = new Date().getTime();
                                        	logger.debug(FN + "s7---- " + (s7 - s6));
                                        	let reportingObjFilter = [];
                                        	let dataToFillWithVerificationResults = [];
                                        	for (let tempEntry in dataToFillWithVerificationTests) {
                                        		let newEntry = dataToFillWithVerificationTests[tempEntry].entry;
                                        
                                        		let supplyObjects = supplyObjectsJson.value.filter(function(item) {
                                        			return (item.Number == newEntry.supply_object_id);
                                        		});
                                        		let supplyObject = supplyObjects[0];
                                        		let supplyChainActorId;
                                        		let supplyObjectSupplierDetails;
                                        		let tradeGoodType;
                                        		let tradeGoodID;
                                        		let classificationAttributes = supplyObject.CVMClassification.ClassificationAttributes;
                                        		for (let c = 0; c < classificationAttributes.length; c++) {
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDSupplyChainActorID") {
                                        				supplyChainActorId = classificationAttributes[c].Value;
                                        			}			
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDType") {
                                        				tradeGoodType = classificationAttributes[c].Value;
                                        			}
                                        			if (classificationAttributes[c].InternalName == "com.ikea.GDTradeGoodID") {
                                        				tradeGoodID = classificationAttributes[c].Value;
                                        			}
                                        		}
                                                let supplierDetails = Things[dataBaseThing].getSubSupplierInfo({
                                                    supplier_id : supplyChainActorId
                                                })
                                        		if (view == "Article" || view == "Part" || view == "Material" || view == "Requirements" || (view == "Sub supplier" && selectedItemsArr.indexOf(supplyIdentificatorName) != -1)) {
                                        
                                        			let supplyIdentificator = supplierDetails.rows[0].LEGAL_NAME + " (" +  supplierDetails.rows[0].DUNS_NUMBER  + ")";
                                        			newEntry.producer = supplyIdentificator;
                                        			newEntry.declarant = supplyIdentificator;
                                        			newEntry.applies_to_name = supplyObject.Name;
                                        			newEntry.applies_to_name_html = supplyObject.Name;
                                        			newEntry.grouping_section_id = supplyObject.Name + " - " + newEntry.requestor + "#_#" + newEntry.supply_object_id + "#_#";
                                        			newEntry.trade_good_type = tradeGoodType;
                                        			newEntry.trade_good_id = tradeGoodID;
                                        			newEntry.trade_good_name = supplyObject.Name;
                                        			let tests = Resources["InfoTableFunctions"].EQFilter({
                                        				fieldName: "ID" /* STRING */ ,
                                        				isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        				t: testDetails /* INFOTABLE */ ,
                                        				value: newEntry.id_rvs_verified /* STRING */
                                        			});
                                        			let test = tests.rows[0];
                                        			newEntry.id_rvs_verified = test.ID == test.LiveItemID ? test.ID : test.LiveItemID + "-" + test.MajorVersionID + "." + test.MinorVersionID;
                                        			newEntry.verification_method = test.VerificationMethodTitle;
                                        			newEntry.reporting_frequency = test.ReportingFrequency;
                                        			newEntry.task_status = "Not verified";
                                        			newEntry.verification_type = "Never verified";
                                        
                                        			if (newEntry.verification_data_format == "Weight or volume") {
                                        				let parentPart = parentPartsJson.value.filter(function(item) {
                                        					return (item.Number == newEntry.applies_to_part);
                                        				});
                                        				newEntry.applies_to_part = parentPart[0].Name;
                                        			}
                                        			let param = newEntry.supply_object_id + "#_#" + newEntry.id_part + "#_#" + newEntry.id_rvs + "#_#" + newEntry.id_rvs_verified + "#_#" + newEntry.requestor + "#_#" + newEntry.declarant + "#_#" + newEntry.verification_data_format + "#_#" + newEntry.applies_to_name + "#_#" + newEntry.task_status;
                                        			newEntry.applies_to_name_html = newEntry.applies_to_name + "<img style=\"cursor: pointer; float:right; padding-bottom:1px; padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('" + param + "')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>";
                                        			if (reportingObjFilter.indexOf("SupplyObjectID:" + newEntry.supply_object_id + ";ComponentID:0;RequirementID:" + newEntry.id_rvs + ";VerificationMethodID:" + newEntry.id_rvs_verified + ";SupplierDetails:" + project_number) == -1) {
                                        				reportingObjFilter.push("SupplyObjectID:" + newEntry.supply_object_id + ";ComponentID:0;RequirementID:" + newEntry.id_rvs + ";VerificationMethodID:" + newEntry.id_rvs_verified + ";SupplierDetails:" + project_number);
                                        			}
                                        			dataToFillWithVerificationResults.push(newEntry);
                                        		}
                                        	}
                                        	logger.debug("reporting obj filter :" + JSON.stringify(reportingObjFilter));
                                        	let p = {
                                        		"criteriaToMatch": reportingObjFilter
                                        	};
                                        	let startFetchRepo = new Date().getTime();
                                        	let reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        		criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        		$expand: undefined /* STRING {"dataShape":""} */ ,
                                        		$select: "VerificationComment,VerificationStatus,SupplyObjectID,RequirementID,VerificationMethodID,SupplierDetails,ReportingObjectClassification" /* STRING {"dataShape":""} */
                                        	});
                                        	logger.debug("Time taken to fetch reporting obj - " + (new Date().getTime() - startFetchRepo));
                                        	logger.debug("reporting objects response -- " + JSON.stringify(reportingObjJson));
                                        	let reportingObjects = reportingObjJson.value;
                                        	for (let tempObj in dataToFillWithVerificationResults) {
                                        		let newEntry = dataToFillWithVerificationResults[tempObj];
                                        		let supplyObjectId = newEntry.supply_object_id;
                                        		let reqId = newEntry.id_rvs;
                                        		let verifMethdId = newEntry.id_rvs_verified;
                                        		let verificationDataFormat = newEntry.verification_data_format;
                                        		let reportingObj = reportingObjJson.value.filter(function(item) {
                                        			return (item.SupplyObjectID == supplyObjectId && item.RequirementID == reqId && item.VerificationMethodID == verifMethdId && item.SupplierDetails == project_number && item.ReportingObjectClassification.ClfNodeDisplayName == verificationDataFormat);
                                        		});
                                        		logger.debug("reporting obj -- " + supplyObjectId + " " + reqId + " " + verifMethdId + " " + verificationDataFormat + " " + JSON.stringify(reportingObj));
                                        		if (reportingObj !== undefined && reportingObj.length > 0) {
                                        			newEntry.verification_type = "Reverification";
                                        			newEntry.task_status = reportingObj[0].VerificationStatus;
                                        			newEntry.comment = reportingObj[0].VerificationComment;
                                        			newEntry.reporting_object_oid = reportingObj[0].ID;
                                        		}
                                        		result.AddRow(newEntry);
                                        	}
                                        
                                        	let s8 = new Date().getTime();
                                        	logger.debug(FN + "s8---- " + (s8 - s7));
                                        
                                        	let query = {
                                        		"sorts": [{
                                        			"fieldName": "verification_type",
                                        			"isAscending": true
                                        		}, {
                                        			"fieldName": "compliant_in_production",
                                        			"isAscending": true
                                        		}]
                                        	};
                                        	let params = {
                                        		t: result /* INFOTABLE */ ,
                                        		query: query /* QUERY */
                                        	};
                                        
                                        	result = Resources["InfoTableFunctions"].Query(params);
                                        	let s9 = new Date().getTime();
                                        	logger.debug(FN + "s9---- " + (s9 - s8));
                                        	//	let sampleData = me.sampleData();
                                        	//	for (let i = 0; i < sampleData.getRowCount(); i++) {
                                        	//		sampleData.rows[i].test_report_issue_date = new Date();
                                        	//		sampleData.rows[i].sample_production_date = new Date();
                                        	//		sampleData.rows[i].certificate_valid_from = new Date();
                                        	//		sampleData.rows[i].certificate_valid_to = new Date();
                                        	//		result.AddRow(sampleData.rows[i]);
                                        	//	}
                                        	logger.debug(FN + "total---- " + (new Date().getTime() - start));
                                        
                                        } catch (err) {
                                        	logger.error(FN + " Line :" + err.lineNumber + " Error :" + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTasksForSelectedValues_bck">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTasksForSelectedValues -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        const SELECT_REPORTING_OBJECT_FIELDS = "VerificationComment,VerificationStatus";
                                        try {
                                        let start = new Date().getTime();
                                        	if (view == "Article" || view == "Requirements" || view == "Sub supplier") {
                                        		let selectedValues = [];
                                        		selectedItems.rows.toArray().forEach(item => {
                                        			selectedValues.push(item.key);
                                        		});
                                        
                                        		let partsList = {};
                                        		let requirementsToFetch = []; // keeps all the requirement IDs for all the parts
                                        		let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		let filter = "(ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'IKEA Part')) or ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'Material'))) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good')";
                                        		let classificationjson = Things[odataconnectorthing].getClassificationObjects({
                                        			$filter: filter /* STRING {"dataShape":""} */ ,
                                        			$select: "Number" /* STRING {"dataShape":""} */ ,
                                        			ClfNodeId: "GDSupplyObject"
                                        		});
                                        		let filterParts = "";
                                        		let SEP = ",";
                                        		let classificationValues = classificationjson.value;
                                        		for (let i = 0; i < classificationValues.length; i++) {
                                        			let value = classificationValues[i];
                                        			filterParts += value.Number + SEP;
                                        		}
                                        		if (filterParts.length > 0) {
                                        			filterParts = filterParts.substring(0, filterParts.length - SEP.length);
                                        		}
                                        		let supplypartsWithConfigurableJson = Things[odataconnectorthing].getPostParts({
                                        			numbers: filterParts,
                                        			$expand: "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name,ObjectType;$expand=Traces($select=Uri)))" /* STRING {"dataShape":""} */ ,
                                        			$select: "Name,ObjectType,ConfigurableRevisionLinkDown,CVMClassification,Number"
                                        		});
                                        		let supplyObjects = supplypartsWithConfigurableJson.value;
                                        		supplyObjects.forEach(supplyPart => {
                                        			let ikeapartjson = supplyPart.ConfigurableRevisionLinkDown;
                                        			let supplyObjectNumber = supplyPart.Number;
                                        			let classificationAttributes = supplyPart.CVMClassification.ClassificationAttributes;
                                        			let supplyIdentificatorNumber;
                                        			let supplyIdentificatorName;
                                        			let supplyIdentificator;
                                        			let supplyObjectSupplierDetails;
                                        			let tradeGoodType;
                                        			let tradeGoodID;
                                        			for (let c = 0; c < classificationAttributes.length; c++) {
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDLegalName") {
                                        					supplyIdentificatorName = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDDUNSNumber") {
                                        					supplyIdentificatorNumber = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDSupplierDetails") {
                                        					supplyObjectSupplierDetails = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDType") {
                                        					tradeGoodType = classificationAttributes[c].Value;
                                        				}
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDTradeGoodID") {
                                        					tradeGoodID = classificationAttributes[c].Value;
                                        				}
                                        			}
                                        
                                        			supplyIdentificator = supplyIdentificatorName + "(" + supplyIdentificatorNumber + ")";
                                        			let checkForSubSupplier = ((view == "Sub supplier") && selectedValues.indexOf(supplyIdentificatorName) != -1) || (view == "Article" || view == "Requirements") ? true : false;
                                        			if (checkForSubSupplier) {
                                        				if (ikeapartjson && ikeapartjson.length > 0) {
                                        					for (let n = 0; n < ikeapartjson.length; n++) {
                                        						let ikeapartvalue = ikeapartjson[n];
                                        						let checkArticlePresent = (view == "Requirements" || view == "Sub supplier") ? true : false;
                                        						if (view == "Article") {
                                        							for (let i = 0; i < selectedValues.length; i++) {
                                        								let link = Things[dataBaseThing].getSupplyBOMAssociationByPartSupplyObjectArticle({
                                        									part_number: ikeapartvalue.Child.Number,
                                        									supply_object_number: supplyObjectNumber,
                                        									article_number: selectedValues[i],
                                        									supplier_number: project_number
                                        								});
                                        								if (link && link.getRowCount() > 0) {
                                        									checkArticlePresent = true;
                                        									break;
                                        								}
                                        							}
                                        						}
                                        						if (checkArticlePresent) {
                                        							let childNumber = ikeapartvalue.Child.Number;
                                        							let tracesjson = ikeapartvalue.Child.Traces;
                                        							if (tracesjson && tracesjson.length > 0) {
                                        								let reqForPart = [];
                                        								for (var k = 0; k < tracesjson.length; k++) {
                                        									var tracesvalue = tracesjson[k];
                                        									var uri = tracesvalue.Uri;
                                        									var reqId = uri.split("=")[1];
                                        									if (requirementsToFetch.indexOf(reqId) === -1) {
                                        										requirementsToFetch.push(reqId);
                                        										reqToFetchInfoTable.AddRow({
                                        											item: reqId.split("-")[0]
                                        										});
                                        									}
                                        
                                        									reqForPart.push(reqId);
                                        								}
                                        								partsList[childNumber + supplyObjectNumber] = {};
                                        								partsList[childNumber + supplyObjectNumber].ikeaPartObjectType = ikeapartvalue.Child.ObjectType;
                                        								partsList[childNumber + supplyObjectNumber].supplyIdentificator = supplyIdentificator;
                                        								partsList[childNumber + supplyObjectNumber].ikeaPartNumber = ikeapartvalue.Child.Number;
                                        								partsList[childNumber + supplyObjectNumber].ikeaPartName = ikeapartvalue.Child.Name;
                                        								partsList[childNumber + supplyObjectNumber].supplyObjectName = supplyPart.Name;
                                        								partsList[childNumber + supplyObjectNumber].requirements = reqForPart;
                                        								partsList[childNumber + supplyObjectNumber].supplyObjectSupplierDetails = supplyObjectSupplierDetails;
                                        								partsList[childNumber + supplyObjectNumber].tradeGoodType = tradeGoodType;
                                        								partsList[childNumber + supplyObjectNumber].tradeGoodID = tradeGoodID;
                                        								partsList[childNumber + supplyObjectNumber].supplyObjectNumber = supplyObjectNumber;
                                        							}
                                        						}
                                        					}
                                        				}
                                        			}
                                        		});
                                        		logger.debug(FN + "To complete pre-processing-----"+(new Date().getTime() - start));
                                        		formTaskDetails(reqToFetchInfoTable, partsList, selectedValues);
                                        
                                        	} else if (view == "Part" || view == "Material") {
                                        		let partsList = {};
                                        		let articlesCountDetail = {};
                                        		let requirementsToFetch = []; // keeps all the requirement IDs for all the parts
                                        		let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		let filterParts = "";
                                        		const SEP = ",";
                                        		for (let i = 0; i < selectedItems.getRowCount(); i++) {
                                        			let value = selectedItems[i];
                                        			filterParts += value.key + SEP;
                                        		}
                                        		if (filterParts.length > 0) {
                                        			filterParts = filterParts.substring(0, filterParts.length - SEP.length);
                                        		}
                                        		// result: JSON
                                        		let ikeapartsWithConfigurableJson = Things[odataconnectorthing].getPostParts({
                                        			numbers: filterParts,
                                        			$expand: "ConfigurableRevisionLinkUp($expand=Parent($select=Number,Name,ObjectType,CVMClassification)),Traces($select=Uri)" /* STRING {"dataShape":""} */ ,
                                        			$select: "Name,ObjectType,ConfigurableRevisionLinkUp,Traces,Number"
                                        		});
                                        		if (ikeapartsWithConfigurableJson && ikeapartsWithConfigurableJson.value) {
                                        			for (let i = 0; i < ikeapartsWithConfigurableJson.value.length; i++) {
                                        				let value = ikeapartsWithConfigurableJson.value[i];
                                        				let ikeaPartNumber = value.Number;
                                        				let ikeaPartName = value.Name;
                                        				let tracesjson = value.Traces;
                                        				let objectType = value.ObjectType;
                                        				let reqForPart = [];
                                        				if (tracesjson && tracesjson.length > 0) {
                                        					for (let k = 0; k < tracesjson.length; k++) {
                                        						let tracesvalue = tracesjson[k];
                                        						let uri = tracesvalue.Uri;
                                        						let reqId = uri.split("=")[1];
                                        						if (requirementsToFetch.indexOf(reqId) === -1) {
                                        							requirementsToFetch.push(reqId);
                                        							reqToFetchInfoTable.AddRow({
                                        								item: reqId.split("-")[0]
                                        							});
                                        						}
                                        						reqForPart.push(reqId);
                                        					}
                                        				}
                                        				let articlesArr = [];
                                        				let articleCount = 0;
                                        				let configurableRevisionLinkUp = value.ConfigurableRevisionLinkUp;
                                        				for (let j = 0; j < configurableRevisionLinkUp.length; j++) {
                                        					let link = configurableRevisionLinkUp[j];
                                        					let supplyObjectNumber = link.Parent.Number;
                                        					let supplierDetails = link["com.ikea.GDSupplierDetails"];
                                        					if (supplierDetails == project_number) {
                                        						let supplyIdentificatorNumber;
                                        						let supplyIdentificatorName;
                                        						let supplyIdentificator;
                                        						let supplyObjectSupplierDetails;
                                        						let tradeGoodType;
                                        						let tradeGoodID;
                                        						let classificationAttributes = link.Parent.CVMClassification.ClassificationAttributes;
                                        						for (let c = 0; c < classificationAttributes.length; c++) {
                                        							if (classificationAttributes[c].InternalName == "com.ikea.GDLegalName") {
                                        								supplyIdentificatorName = classificationAttributes[c].Value;
                                        							}
                                        							if (classificationAttributes[c].InternalName == "com.ikea.GDDUNSNumber") {
                                        								supplyIdentificatorNumber = classificationAttributes[c].Value;
                                        							}
                                        							if (classificationAttributes[c].InternalName == "com.ikea.GDSupplierDetails") {
                                        								supplyObjectSupplierDetails = classificationAttributes[c].Value;
                                        							}
                                        							if (classificationAttributes[c].InternalName == "com.ikea.GDType") {
                                        								tradeGoodType = classificationAttributes[c].Value;
                                        							}
                                        							if (classificationAttributes[c].InternalName == "com.ikea.GDTradeGoodID") {
                                        								tradeGoodID = classificationAttributes[c].Value;
                                        							}
                                        						}
                                        						supplyIdentificator = supplyIdentificatorName + "(" + supplyIdentificatorNumber + ")";
                                        
                                        						partsList[ikeaPartNumber + supplyObjectNumber] = {};
                                        						partsList[ikeaPartNumber + supplyObjectNumber].ikeaPartObjectType = objectType;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].supplyIdentificator = supplyIdentificator;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].ikeaPartNumber = ikeaPartNumber;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].ikeaPartName = ikeaPartName;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].supplyObjectName = link.Parent.Name;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].requirements = reqForPart;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].supplyObjectSupplierDetails = supplyObjectSupplierDetails;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].tradeGoodType = tradeGoodType;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].tradeGoodID = tradeGoodID;
                                        						partsList[ikeaPartNumber + supplyObjectNumber].supplyObjectNumber = supplyObjectNumber;
                                        					}
                                        				}
                                        			}
                                        		}
                                        		formTaskDetails(reqToFetchInfoTable, partsList);
                                        	}
                                        
                                        	let query = {
                                        		"sorts": [{
                                        			"fieldName": "verification_type",
                                        			"isAscending": true
                                        		}, {
                                        			"fieldName": "compliant_in_production",
                                        			"isAscending": true
                                        		}]
                                        	};
                                        	let params = {
                                        		t: result /* INFOTABLE */ ,
                                        		query: query /* QUERY */
                                        	};
                                        
                                        	result = Resources["InfoTableFunctions"].Query(params);
                                        	if (project_number == "SREDNA GORA AD(11565)") {
                                        		let testrepottasks = me.sampleTestReportTasks();
                                        		for (let i = 0; i < testrepottasks.getRowCount(); i++) {
                                        			result.AddRow(testrepottasks.rows[i]);
                                        		}
                                        	}
                                            logger.debug("Total execution time normal:"+(new Date().getTime() - start));
                                        } catch (err) {
                                        	logger.error(FN + " Line :" + err.lineNumber + " Error :" + err);
                                        }
                                        
                                        function formTaskDetails(reqToFetchInfoTable, partsList, selectedValues) {
                                                let taskStart = new Date().getTime();
                                        	const reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        	let requirementsData;
                                        	let filters = [];
                                        	if (reqToFetchInfoTable.getRowCount() > 0) {
                                        		reqToFetchInfoTable.rows.toArray().forEach(row => {
                                        			filters.push({
                                        				"fieldName": "LiveItemID",
                                        				"type": "EQ",
                                        				"value": row.item
                                        			});
                                        		});
                                        
                                        		let query = {
                                        			"filters": {
                                        				"type": "OR",
                                        				"filters": filters
                                        			}
                                        		};
                                                let reqStart = new Date().getTime();
                                        		requirementsData = reqResourceProviderThing.getObjects({
                                        			query: query
                                        		});
                                                logger.debug(FN + "To query requirements -------" + (new Date().getTime() - reqStart));
                                        	}
                                        	let distinctVerificationToFetch = [];
                                        	let distinctVerificationToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "GenericStringList"
                                        	});
                                        	let dataToFillWithVerificationTests = [];
                                        	let aggregatedVerificationObjectFetched = {};
                                        
                                        	if (partsList && Object.keys(partsList).length > 0) {
                                        		for (let ikeaAndSupplyPartNumber in partsList) {
                                        			let ikeaPart = partsList[ikeaAndSupplyPartNumber];
                                        			let ikeaPartObjectType = ikeaPart.ikeaPartObjectType;
                                        			let ikeaPartNumber = ikeaPart.ikeaPartNumber;
                                        			let ikeaPartName = ikeaPart.ikeaPartName;
                                        			let applies_to_material = (ikeaPartObjectType === "Material") ? ikeaPartName : undefined;
                                        			let supplyObjectName = ikeaPart.supplyObjectName;
                                        			let tradeGoodType = ikeaPart.tradeGoodType;
                                        			let tradeGoodID = ikeaPart.tradeGoodID
                                        			let supplyObjectNumber = ikeaPart.supplyObjectNumber;
                                        			let supplyIdentificator = ikeaPart.supplyIdentificator;
                                        			let supplyObjectSupplierDetails = ikeaPart.supplyObjectSupplierDetails;
                                        			let requirements = ikeaPart['requirements'];
                                        			for (let s = 0; s < requirements.length; s++) {
                                        				let rvsId = requirements[s]
                                        				let sp;
                                        				let liveIdWithVersions = rvsId.split("-");
                                        				if (liveIdWithVersions.length == 1) {
                                        					//liveItem
                                        					sp = Resources["InfoTableFunctions"].EQFilter({
                                        						fieldName: "ID" /* STRING */ ,
                                        						isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        						t: requirementsData /* INFOTABLE */ ,
                                        						value: rvsId /* STRING */
                                        					});
                                        				} else {
                                        					//versioned item
                                        					let liveItemId = liveIdWithVersions[0];
                                        					let versionId = liveIdWithVersions[1].split(".");
                                        					let majorVersion = versionId[0];
                                        					let minorVersion = versionId[1];
                                        					let query = {
                                        						"filters": {
                                        							"filters": [{
                                        								fieldName: "LiveItemID",
                                        								value: liveItemId,
                                        								type: "EQ"
                                        							}, {
                                        								fieldName: "MajorVersionID",
                                        								value: majorVersion,
                                        								type: "EQ"
                                        							}, {
                                        								fieldName: "MinorVersionID",
                                        								value: minorVersion,
                                        								type: "EQ"
                                        							}, {
                                        								fieldName: "DocumentID",
                                        								type: "MissingValue"
                                        							}],
                                        							"type": "AND"
                                        						}
                                        					};
                                        					params = {
                                        						t: requirementsData /* INFOTABLE */ ,
                                        						query: query /* QUERY */
                                        					};
                                        					sp = Resources["InfoTableFunctions"].Query(params);
                                        				}
                                        				if (view != "Requirements" || (view == "Requirements" && selectedValues.indexOf(sp.RequirementType) != -1)) {
                                        					let verifiedBy = sp.VerifiedBy;
                                        					let reportingObjJson;
                                        					if (verifiedBy && verifiedBy.getRowCount() > 0) {
                                        						if (verifiedBy && sp.VerificationDataformat && verifiedBy.getRowCount() == sp.VerificationDataformat.getRowCount()) {
                                        							for (let v = 0; v < verifiedBy.rows.length; v++) {
                                        								let uid = generateGUID();
                                        								let newEntry = {};
                                        								newEntry.uid = uid;
                                        								newEntry.unique_id = uid;
                                        								newEntry.id_part = ikeaPartNumber;
                                        								newEntry.applies_to_material = applies_to_material;
                                        								newEntry.applies_to_name = supplyObjectName;
                                        //																newEntry.connected_article = "";
                                        								//								newEntry.connected_part = "";
                                        								//								newEntry.connected_article_count = "";
                                        								newEntry.producer = supplyIdentificator;
                                        								newEntry.declarant = supplyIdentificator;
                                        								newEntry.requestor = supplyObjectSupplierDetails;
                                        								newEntry.grouping_section_id = supplyObjectName + " - " + newEntry.requestor + "#_#" + supplyObjectNumber + "#_#";
                                        								newEntry.sub_row_count = "0";
                                        								newEntry.test_report_issue_date = new Date();
                                        								newEntry.requirement_title = sp.RequirementTitle;
                                        								newEntry.requirement_description = "<a style=\"text-decoration: underline;cursor:pointer;\" onClick=\"getRequirementText('" + rvsId + "','root_mashupcontainer-17_ptcsbutton-377')\">" + sp.RequirementTitle + "</a>";
                                        								newEntry.requirement_type = sp.RequirementType;
                                        								newEntry.requirement_subtype = sp.RequirementSubtype && sp.RequirementSubtype.rows.length > 0 ? sp.RequirementSubtype.rows[0].get("Requirement Subtype") : "";
                                        								newEntry.id_rvs = rvsId
                                        								newEntry.verification_data_format = sp.VerificationDataformat.rows[v].get("Verification Data format");
                                        								newEntry.id_rvs_verified = verifiedBy.rows[v].ID;
                                        								newEntry.trade_good_type = tradeGoodType;
                                        								newEntry.trade_good_id = tradeGoodID;
                                        								newEntry.trade_good_name = supplyObjectName;
                                        								newEntry.supply_object_id = supplyObjectNumber;
                                        								newEntry.isTestReportNewRow = false;
                                        
                                        								let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        									requirement_id: newEntry.id_rvs,
                                        									supply_object_id: supplyObjectNumber
                                        								});
                                        								if (deadLine && deadLine.getRowCount() > 0) {
                                        									newEntry.compliant_in_production_string = deadLine.rows[0].DEADLINE.toISOString().slice(0, 10);
                                        									newEntry.compliant_in_production = deadLine.rows[0].DEADLINE;
                                        								}
                                        								if (newEntry.verification_data_format == "Self Declaration") {
                                        									newEntry.ValidationMashupName = "IK.VerificationReportingSelfDeclarationType.Mashup";
                                        									newEntry.delegation_mashup_name = "IK.DelegateSelfDeclarationType.Mashup";
                                        									newEntry.popup_height = 600;
                                        									newEntry.popup_width = 1500;
                                        									newEntry.verification_statement = "<label style=\"top: -16px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position:relative; left:-35px; width:80%; height:26px ; border-radius:2px; border:1px solid #929292; font-size:11px;\" onchange=\"setDropDownValue('" + newEntry.unique_id + "#_#Select','" + newEntry.unique_id + "')\"><option disabled selected value></option><option value=\"Fulfils\">Fulfils</option><option value=\"Not applicable\">Not applicable</option></select>"
                                        								} else if (newEntry.verification_data_format == "Test Report") {
                                        									let testLabs = Things[dataBaseThing].getAllTestLabDetails();
                                        									let options = "";
                                        									for (let i = 0; i < testLabs.getRowCount(); i++) {
                                        										options += "<option style=\"font-size:14px;\"value=\"" + testLabs.rows[i].LAB_NUMBER + "\">" + testLabs.rows[i].LAB_NAME + "</option>";
                                        									}
                                        									newEntry.ValidationMashupName = "IK.VerificationReportingTestReportTypeVerifyCustomWidget.Mashup";
                                        									newEntry.delegation_mashup_name = "IK.DelegateTestReportType.Mashup";
                                        									newEntry.SendRequestMashupName = "IK.VerificationReportingOrderTestReport.Mashup";
                                        									newEntry.popup_height = 650;
                                        									newEntry.popup_width = 1550;
                                        									newEntry.action = "<a style=\"text-decoration: underline;cursor:pointer;\" onclick=\"updateTestReportTypeTask('" + newEntry.unique_id + "','root_mashupcontainer-17_navigationfunction-150-popup_ptcsbutton-56')\"> Manage details</a>";
                                        								} else if (newEntry.verification_data_format == "Certificate") {
                                        									let testLabs = Things[dataBaseThing].getAllTestLabDetails();
                                        									let options = "";
                                        									for (let i = 0; i < testLabs.getRowCount(); i++) {
                                        										options += "<option style=\"font-size:14px;\"value=\"" + testLabs.rows[i].LAB_NUMBER + "\">" + testLabs.rows[i].LAB_NAME + "</option>";
                                        									}
                                        									newEntry.ValidationMashupName = "IK.VerificationReportingCertificateTypeVerify.Mashup";
                                        									newEntry.delegation_mashup_name = "IK.DelegateCertificateType.Mashup";
                                        									newEntry.SendRequestMashupName = "IK.VerificationReportingOrderCertificate.Mashup";
                                        									newEntry.popup_height = 600;
                                        									newEntry.popup_width = 1500;
                                        									newEntry.certifier = "<label style=\"top: -14px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position: relative;font :normal normal normal 14px/20px Noto IKEA Latin; top:-22px; width:90%; height:34px ; border-radius:2px; border:1px solid #929292;\"><option disabled selected value>" + options + "</select>";
                                        									newEntry.batch_number = "<input type=text id=\"" + newEntry.unique_id + "#_#BatchNumber\" style=\"position:relative; left:0px; width:90% ; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#BatchNumber','" + newEntry.unique_id + "', 'BatchNumber')\" />";
                                        									newEntry.material_description = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialDescription','" + newEntry.unique_id + "', 'MaterialDescription')\" />";
                                        									newEntry.material_identification_code = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialIdentificationCode\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialIdentificationCode','" + newEntry.unique_id + "', 'MaterialIdentificationCode')\" />";
                                        									newEntry.sample_description = "<input type=text id=\"" + newEntry.unique_id + "#_#SampleDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#SampleDescription','" + newEntry.unique_id + "', 'SampleDescription')\" />";
                                        									newEntry.additional_information = "<input type=text id=\"" + newEntry.unique_id + "#_#AdditionalInformation\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#AdditionalInformation','" + newEntry.unique_id + "', 'AdditionalInformation')\" />";
                                        									newEntry.action = "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.UploadIcon.Media' onclick=\"\"/>";
                                        								}
                                        								if (distinctVerificationToFetch.indexOf(newEntry.id_rvs_verified) === -1) {
                                        									distinctVerificationToFetch.push(newEntry.id_rvs_verified);
                                        									distinctVerificationToFetchInfoTable.AddRow({
                                        										item: newEntry.id_rvs_verified
                                        									});
                                        								}
                                        								dataToFillWithVerificationTests.push({
                                        									entry: newEntry
                                        								});
                                        							}
                                        						}
                                        					} else {
                                        						let uid = generateGUID();
                                        						let newEntry = {};
                                        						newEntry.uid = uid;
                                        						newEntry.unique_id = uid;
                                        						newEntry.applies_to_material = applies_to_material;
                                        						newEntry.applies_to_name = supplyObjectName;
                                        						//						newEntry.connected_article = "";
                                        						//						newEntry.connected_part = "";
                                        						//						newEntry.connected_article_count = "";
                                        						newEntry.producer = supplyIdentificator;
                                        						newEntry.declarant = supplyIdentificator;
                                        						newEntry.requestor = supplyObjectSupplierDetails;
                                        						newEntry.requirement_title = sp.RequirementTitle;
                                        						newEntry.requirement_description = "<a style=\"text-decoration: underline;cursor:pointer;\" onClick=\"getRequirementText('" + rvsId + "','root_mashupcontainer-17_ptcsbutton-377')\">" + sp.RequirementTitle + "</a>";
                                        						newEntry.requirement_type = sp.RequirementType;
                                        						newEntry.requirement_subtype = sp.RequirementSubtype && sp.RequirementSubtype.rows.length > 0 ? sp.RequirementSubtype.rows[0].get("Requirement Subtype") : "";
                                        						newEntry.id_part = ikeaPartNumber;
                                        						newEntry.id_rvs = sp.ID;
                                        						newEntry.id_rvs_verified = "Not_Defined";
                                        						newEntry.trade_good_type = tradeGoodType;
                                        						newEntry.trade_good_id = tradeGoodID;
                                        						newEntry.trade_good_name = supplyObjectName;
                                        						newEntry.supply_object_id = supplyObjectNumber;
                                        						newEntry.test_report_issue_date = new Date();
                                        						newEntry.isTestReportNewRow = false;
                                        						let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        							requirement_id: newEntry.id_rvs,
                                        							supply_object_id: supplyObjectNumber
                                        						});
                                        						if (deadLine && deadLine.getRowCount() > 0) {
                                        							newEntry.compliant_in_production_string = deadLine.rows[0].DEADLINE.toISOString().slice(0, 10);
                                        							newEntry.compliant_in_production = deadLine.rows[0].DEADLINE;
                                        						}
                                        						newEntry.verification_data_format = "No Verification Method Defined";
                                        						newEntry.delegation_mashup_name = "IK.DelegatePlantDeclaration.Mashup";
                                        						newEntry.task_status = "Not verified";
                                        						newEntry.verification_type = "Never verified";
                                        						newEntry.ValidationMashupName = "IK.VerificationReportingPlantDeclarationType.Mashup";
                                        						newEntry.popup_height = 600;
                                        						newEntry.popup_width = 1350;
                                        						let filterReportingObjJson = ["SupplyObjectID:" + supplyObjectNumber + ";ComponentID:" + ikeaPartNumber + ";RequirementID:" + sp.ID + ";VerificationMethodID:Not_Defined;SupplierDetails:" + project_number];
                                        						let p = {
                                        							"criteriaToMatch": filterReportingObjJson
                                        						};
                                        						let reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        							criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        							$select: SELECT_REPORTING_OBJECT_FIELDS
                                        						});
                                        						if (reportingObjJson !== undefined && reportingObjJson.value !== undefined && reportingObjJson.value.length > 0) {
                                        							let reportingObjValues = reportingObjJson.value;
                                        							let reportingObj = reportingObjValues[0];
                                        							if (reportingObj) {
                                        								newEntry.verification_type = "Reverification";
                                        								newEntry.task_status = reportingObj.VerificationStatus;
                                        								newEntry.comment = reportingObj.VerificationComment;
                                        								newEntry.reporting_object_oid = reportingObj.ID;
                                        							}
                                        						}
                                        						let param = newEntry.supply_object_id + "#_#" + newEntry.id_part + "#_#" + newEntry.id_rvs + "#_#" + "Not_Defined" + "#_#" + newEntry.requestor + "#_#" + newEntry.declarant + "#_#" + newEntry.verification_data_format + "#_#" + newEntry.applies_to_name + "#_#" + newEntry.task_status;
                                        						newEntry.applies_to_name_html = newEntry.applies_to_name + "<img style=\"cursor: pointer; float:right; padding-bottom:1px; padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('" + param + "')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>";
                                        						result.AddRow(newEntry);
                                        					}
                                        				}
                                        			}
                                        		}
                                        		
                                        		const testResourceProviderThing = Things[Things["IK.CVM.Configuration"].getTestResourceProvider()];
                                        		let verifiedTests;
                                                let testStart = new Date().getTime();
                                        		if (distinctVerificationToFetchInfoTable.getRowCount() > 0) {
                                        			verifiedTests = testResourceProviderThing.getObjectsByIds({
                                        				ids: distinctVerificationToFetchInfoTable /* INFOTABLE {"dataShape":"GenericStringList"} */
                                        			});
                                        		}
                                                logger.debug(FN + "To query test -------"+ (new Date().getTime() - testStart));
                                        		let filterReportingObjJson = [];
                                        		let dataToFillWithVerificationResults = [];
                                        		let supplierDetails = project_number;
                                        		let reportingObjJson;
                                        		for (let tempEntry in dataToFillWithVerificationTests) {
                                        			let newEntry = dataToFillWithVerificationTests[tempEntry].entry;
                                        			let reqID = newEntry.id_rvs;
                                        
                                        			let tests = Resources["InfoTableFunctions"].EQFilter({
                                        				fieldName: "ID" /* STRING */ ,
                                        				isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        				t: verifiedTests /* INFOTABLE */ ,
                                        				value: newEntry.id_rvs_verified /* STRING */
                                        			});
                                        			let test = tests.rows[0];
                                        			newEntry.id_rvs_verified = test.ID == test.LiveItemID ? test.ID : test.LiveItemID + "-" + test.MajorVersionID + "." + test.MinorVersionID;
                                        			newEntry.verification_method = test.VerificationMethodTitle;
                                        			newEntry.reporting_frequency = test.ReportingFrequency;
                                        			newEntry.task_status = "Not verified";
                                        			newEntry.verification_type = "Never verified";
                                        			filterReportingObjJson.push("SupplyObjectID:" + newEntry.supply_object_id + ";ComponentID:" + newEntry.id_part + ";RequirementID:" + reqID + ";VerificationMethodID:" + newEntry.id_rvs_verified + ";SupplierDetails:" + supplierDetails);
                                        			dataToFillWithVerificationResults.push({
                                        				entry: newEntry,
                                        				SupplyObjectID: newEntry.supply_object_id,
                                        				ComponentID: newEntry.id_part,
                                        				reqID: reqID,
                                        				verificationMethodId: newEntry.id_rvs_verified,
                                        				supplierDetails: supplierDetails,
                                        				tests: tests
                                        			});
                                        		}
                                        		if (filterReportingObjJson && filterReportingObjJson.length > 0) {
                                        			let p = {
                                        				"criteriaToMatch": filterReportingObjJson
                                        			};
                                        			reportingObjJson = Things[odataconnectorthing].getPostReportingObjects({
                                        				criteriaToMatch: p /* STRING [Required] {"dataShape":""} */ ,
                                        				$expand: undefined /* STRING {"dataShape":""} */ ,
                                        				$select: SELECT_REPORTING_OBJECT_FIELDS + ",SupplyObjectID,ComponentID,RequirementID,VerificationMethodID,SupplierDetails" /* STRING {"dataShape":""} */
                                        			});
                                        		}
                                        
                                        		for (let tempObj in dataToFillWithVerificationResults) {
                                        			let newEntry = dataToFillWithVerificationResults[tempObj].entry;
                                        			let supplyObjectId = dataToFillWithVerificationResults[tempObj].SupplyObjectID;
                                        			let componentId = dataToFillWithVerificationResults[tempObj].ComponentID;
                                        			let reqId = dataToFillWithVerificationResults[tempObj].reqID;
                                        			let verifMethdId = dataToFillWithVerificationResults[tempObj].verificationMethodId;
                                        			let supplierDet = dataToFillWithVerificationResults[tempObj].supplierDetails;
                                        			let tests = dataToFillWithVerificationResults[tempObj].tests;
                                        			let reportingObj = reportingObjJson.value.filter(function(item) {
                                        				return (item.SupplyObjectID == supplyObjectId && item.ComponentID == componentId && item.RequirementID == reqId && item.VerificationMethodID == verifMethdId && item.SupplierDetails == supplierDet);
                                        			});
                                        			if (reportingObj !== undefined && reportingObj.length > 0) {
                                        				newEntry.verification_type = "Reverification";
                                        				newEntry.task_status = reportingObj[0].VerificationStatus;
                                        				newEntry.comment = reportingObj[0].VerificationComment;
                                        				newEntry.reporting_object_oid = reportingObj[0].ID;
                                        			}
                                        			let param = newEntry.supply_object_id + "#_#" + newEntry.id_part + "#_#" + newEntry.id_rvs + "#_#" + newEntry.id_rvs_verified + "#_#" + newEntry.requestor + "#_#" + newEntry.declarant + "#_#" + newEntry.verification_data_format + "#_#" + newEntry.applies_to_name + "#_#" + newEntry.task_status;
                                        			newEntry.applies_to_name_html = newEntry.applies_to_name + "<img style=\"cursor: pointer; float:right; padding-bottom:1px; padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('" + param + "')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>";
                                        			result.AddRow(newEntry);
                                        		}
                                        	}
                                             logger.debug(FN + "To complete task formation ------"+(new Date().getTime() - taskStart));
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTestLabs">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTestLabs -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let testLabs = Things[dataBaseThing].getAllTestLabDetails();
                                        	result.AddRow({item:""});
                                        	if (testLabs && testLabs.getRowCount() > 0) {        
                                        		for (let i = 0; i < testLabs.getRowCount(); i++) {            
                                        			result.AddRow({
                                        				item: testLabs.rows[i].LAB_NAME
                                        			});
                                        		}
                                        	}
                                        	logger.info(FN + "test labs fetched successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTestOrderColumnJson">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	"columns": [{
                                                    selectable: true,
                                                    width: "58px"
                                                },
                                                {
                                                   template: "#if(applies_to_name){#<p class=\"customTextOverflow\" title='#= applies_to_name #'>#= applies_to_name # </p>#}#",
                                         
                                                    field: "applies_to_name",
                                                    width: "129px",
                                                    title: "Supply object"
                                                },
                                              {
                                                    template: "#if(requirement_title){#<p class=\"customTextOverflow\" title='#= requirement_title #'>#= requirement_title # </p>#}#",
                                                    field: "requirement_title",
                                                    width: "129px",
                                                    title: "Requirement object"
                                                },
                                              {
                                                    template: "#if(test_method){#<p class=\"customTextOverflow\" title='#= test_method #'>#= test_method # </p>#}#",
                                                    field: "test_method",
                                                    width: "129px",
                                                    title: "Test method"
                                                },
                                               {
                                        			field: "test_labs_data",
                                        			title: "Test labs",
                                        			template: "<input class=\"testLabsDropDownTemplate\"/>",
                                        			width: "129px"
                                        		},
                                                
                                              {
                                                    template: "<input  onkeydown='return false;' class=\"sampleProdDatePicker\"/>",
                                                    field: "test_report_issue_date",
                                                    width: "129px",
                                                    title: "Sample production date",
                                                	format: "{0:M/d/yyyy hh:mm:ss tt}"
                                                },
                                                {
                                                    template: "<input class=\"batchNumberTextBox\"/>",
                                                    field: "batch_number",
                                                    width: "129px",
                                                    title: "Batch number"
                                                },
                                        //         {
                                        //            template: "<textarea class=\"materialDescriptionTextBox\"/></textarea>",
                                        //            field: "material_description",
                                        //            width: "129px",
                                        //            title: "Material description"
                                        //        },
                                                         {
                                                    template: "<input class=\"materialIdentificationCodeTextBox\"/>",
                                                    field: "material_identification_code",
                                                    width: "129px",
                                                    title: "Material identification code"
                                                },{
                                                    template: "<textarea class=\"sampleDescriptionTextBox\"/></textarea>",
                                                    field: "sample_description",
                                                    width: "129px",
                                                    title: "Sample description"
                                                },
                                                {
                                        //            template: "<button  class=\"action\" style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ThreeDotsMenuIcon.Media'/><img style=\"cursor: pointer; padding-left:10px;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/CVM.PaperClip.Media' onclick=\"\"/>",
                                        //            template:"<img style=\"cursor: pointer; padding-left:10px;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/CVM.PaperClip.Media' onclick=\"\"/>",
                                                                "template": "<span><img class=\"action\" style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ThreeDotsMenuIcon.Media'/><img class=\"fileUpload\" style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/CVM.PaperClip.Media'/>",
                                        
                                                    field: "action",
                                                    width: "100px",
                                                    title: "Action"
                                                }
                                        
                                        	]
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTestOrderColumnJsonCopyPaste">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        result = {
                                        	"columns": [{
                                                    selectable: true,
                                                    width: "58px"
                                                },
                                                {
                                                   template: "#if(applies_to_name){#<p class=\"customTextOverflow\" title='#= applies_to_name #'>#= applies_to_name # </p>#}#",
                                         
                                                    field: "applies_to_name",
                                                    width: "129px",
                                                    title: "Supply object"
                                                },
                                              {
                                                    template: "#if(requirement_title){#<p class=\"customTextOverflow\" title='#= requirement_title #'>#= requirement_title # </p>#}#",
                                                    field: "requirement_title",
                                                    width: "129px",
                                                    title: "Requirement object"
                                                },
                                              {
                                                    template: "#if(test_method){#<p class=\"customTextOverflow\" title='#= test_method #'>#= test_method # </p>#}#",
                                                    field: "test_method",
                                                    width: "129px",
                                                    title: "Test method"
                                                },
                                               {
                                        			field: "test_labs_data",
                                        			title: "Test labs",
                                        			template: "<input class=\"testLabsDropDownTemplate\"/>",
                                        			width: "129px"
                                        		},
                                                
                                              {
                                                    template: "<input class=\"sampleProdDatePicker\"/>",
                                                    field: "test_report_issue_date",
                                                    width: "129px",
                                                    title: "Sample production date",
                                                	format: "{0:M/d/yyyy hh:mm:ss tt}"
                                                },
                                                {
                                                    template: "<input class=\"batchNumberTextBox\"/>",
                                                    field: "batch_number",
                                                    width: "129px",
                                                    title: "Batch number"
                                                },
                                                 {
                                                    template: "<input class=\"materialDescriptionTextBox\"/>",
                                                    field: "material_description",
                                                    width: "129px",
                                                    title: "Material description"
                                                },
                                                         {
                                                    template: "<input class=\"materialIdentificationCodeTextBox\"/>",
                                                    field: "material_identification_code",
                                                    width: "129px",
                                                    title: "Material identification code"
                                                },{
                                                    template: "<input class=\"sampleDescriptionTextBox\"/>",
                                                    field: "sample_description",
                                                    width: "129px",
                                                    title: "Sample description"
                                                },
                                                {
                                        //            template: "<button  class=\"action\" style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ThreeDotsMenuIcon.Media'/><img style=\"cursor: pointer; padding-left:10px;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/CVM.PaperClip.Media' onclick=\"\"/>",
                                        //            template:"<img style=\"cursor: pointer; padding-left:10px;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/CVM.PaperClip.Media' onclick=\"\"/>",
                                                   template: "<span><img class=\"copy\" style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DuplicateIcon.Media'/><img class=\"paste\" style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.PasteIcon.Media'/>",
                                                    field: "action",
                                                    width: "100px",
                                                    title: "Action"
                                                }
                                        
                                        	]
                                        };
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTestReportTaskFileDetailsCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTestReportTaskFileDetails -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        try {
                                        	let data = updatedData;
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let row = data.rows[i];
                                        		if (grouping_section_id && row.grouping_section_id == grouping_section_id) {
                                        			result.AddRow(row);
                                        			break;
                                        		} else if (unique_id && row.unique_id == unique_id) {
                                        			result.AddRow(row);
                                        			break;
                                        		}
                                        	}
                                        	logger.info(FN + "executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getTestReportValidity">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTestReportValidity -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        try {
                                        	result.AddRow({
                                        		item: "1 Year"
                                        	});
                                        	logger.info(FN + "validity loaded successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getUnit">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getUnit -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        try {
                                        	result.AddRow({
                                        		item: "mg/kg"
                                        	});
                                        	logger.info(FN + "unit loaded successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getValuesForViews">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getValuesForViews -> ";
                                        let dropdownValuesForViews = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        });
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.DropdownValuesForViews.DataShape"
                                        });
                                        let selectedItems = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        });
                                        
                                        try {
                                        	let projectNumber = project_number.replace("_", "/");
                                        	let databaseConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	let supplyObjects;
                                        	const SEP = ",";
                                        	let filter;
                                        	let expand;
                                        	let select = "Name,ConfigurableRevisionLinkDown";
                                        	if (view != "Article") {
                                        		if (view == "Requirements") {
                                        			filter = "(ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'IKEA Part')) or ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'Material'))) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good')";
                                        			expand = "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name;$expand=Traces($select=Uri)))";
                                        		} else if (view == "Part") {
                                        			filter = "ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'IKEA Part')) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good')";
                                        			expand = "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name))";
                                        		} else if (view == "Material") {
                                        			filter = "ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'Material')) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good')";
                                        			expand = "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name))";
                                        		} else if (view == "Sub supplier") {
                                        			filter = "(ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'IKEA Part')) or ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectType' and contains(d/DisplayValue,'Material'))) and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDSupplierDetails' and d/DisplayValue eq '" + project_number + "') and ClassificationAttributes/any(d:d/InternalName eq 'com.ikea.GDObjectClass' and d/DisplayValue eq 'Trade good')";
                                        			expand = "ConfigurableRevisionLinkDown($expand=Child($select=Number,Name;$expand=Traces($select=Uri)))";
                                        			select = "Name,ConfigurableRevisionLinkDown,CVMClassification";
                                        		}
                                        		let classificationjson = Things[odataconnectorthing].getClassificationObjects({
                                        			$filter: filter /* STRING {"dataShape":""} */ ,
                                        			$select: "Number" /* STRING {"dataShape":""} */ ,
                                        			ClfNodeId: "GDSupplyObject"
                                        		});
                                        		let filterParts = "";
                                        		let classificationValues = classificationjson.value;
                                        		for (let i = 0; i < classificationValues.length; i++) {
                                        			let value = classificationValues[i];
                                        			filterParts += value.Number + SEP;
                                        		}
                                        		if (filterParts.length > 0) {
                                        			filterParts = filterParts.substring(0, filterParts.length - SEP.length);
                                        		}
                                        		let supplypartsWithConfigurableJson = Things[odataconnectorthing].getPostParts({
                                        			numbers: filterParts,
                                        			$expand: expand /* STRING {"dataShape":""} */ ,
                                        			$select: select
                                        		});
                                        		supplyObjects = supplypartsWithConfigurableJson.value;
                                        	}
                                        	if (view == "Article") {
                                        		let articleIdStr = "";
                                        		let articles = Things[databaseConnector].getArticlesFromSupplyBOMAssociation({
                                        			supplier_number: project_number
                                        		});
                                        		for (let j = 0; j < articles.getRowCount(); j++) {
                                        			let row = articles.rows[j];
                                        			articleIdStr = articleIdStr + row.ARTICLE_NUMBER + SEP;
                                        		}
                                        		articleIdStr = articleIdStr.slice(0, -1);
                                        		let json = Things[odataconnectorthing].getPostParts({
                                        			numbers: articleIdStr,
                                        			$select: "Name,Number"
                                        		});
                                        		if (json && json.value) {
                                        			let values = json.value;
                                        			for (let i = 0; i < values.length; i++) {
                                        				let value = values[i];
                                        				let newEntry = new Object();
                                        				newEntry.key = value.Number;
                                        				newEntry.value = value.Number + " - " + value.Name;
                                        				dropdownValuesForViews.AddRow(newEntry);
                                        			}
                                        		}
                                        	} else if (view == "Part" || view == "Material") {
                                        		supplyObjects.forEach(supplyObject => {
                                        			let ikeapartjson = supplyObject.ConfigurableRevisionLinkDown;
                                        			if (ikeapartjson && ikeapartjson.length > 0) {
                                        				for (let n = 0; n < ikeapartjson.length; n++) {
                                        					let ikeapartvalue = ikeapartjson[n];
                                        					let newEntry = new Object();
                                        					newEntry.key = ikeapartvalue.Child.Number;
                                        					newEntry.value = ikeapartvalue.Child.Number + " - " + ikeapartvalue.Child.Name;
                                        					dropdownValuesForViews.AddRow(newEntry);
                                        				}
                                        			}
                                        		});
                                        	} else if (view == "Requirements") {
                                        		let requirementsToFetch = []; // keeps all the requirement IDs for all the parts
                                        		let reqToFetchInfoTable = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        			infoTableName: "InfoTable",
                                        			dataShapeName: "GenericStringList"
                                        		});
                                        		supplyObjects.forEach(supplyPart => {
                                        			let ikeapartjson = supplyPart.ConfigurableRevisionLinkDown;
                                        			if (ikeapartjson && ikeapartjson.length > 0) {
                                        				for (let n = 0; n < ikeapartjson.length; n++) {
                                        					let ikeapartvalue = ikeapartjson[n];
                                        					let tracesjson = ikeapartvalue.Child.Traces;
                                        
                                        					if (tracesjson && tracesjson.length > 0) {
                                        						for (var k = 0; k < tracesjson.length; k++) {
                                        							var tracesvalue = tracesjson[k];
                                        							var uri = tracesvalue.Uri;
                                        							var reqId = uri.split("=")[1];
                                        							if (requirementsToFetch.indexOf(reqId) === -1) {
                                        								requirementsToFetch.push(reqId);
                                        								reqToFetchInfoTable.AddRow({
                                        									item: reqId.split("-")[0]
                                        								});
                                        							}
                                        						}
                                        					}
                                        				}
                                        			}
                                        		});
                                        		const reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        		let requirementsData;
                                        		let filters = [];
                                        		if (reqToFetchInfoTable.getRowCount() > 0) {
                                        			reqToFetchInfoTable.rows.toArray().forEach(row => {
                                        				filters.push({
                                        					"fieldName": "LiveItemID",
                                        					"type": "EQ",
                                        					"value": row.item
                                        				});
                                        			});
                                        
                                        			let query = {
                                        				"filters": {
                                        					"type": "OR",
                                        					"filters": filters
                                        				}
                                        			};
                                        			requirementsData = reqResourceProviderThing.getObjects({
                                        				query: query
                                        			});
                                        		}
                                        		for (let s = 0; s < requirementsToFetch.length; s++) {
                                        			let rvsId = requirementsToFetch[s];
                                        			let sp;
                                        			let liveIdWithVersions = rvsId.split("-");
                                        			if (liveIdWithVersions.length == 1) {
                                        				//liveItem
                                        				sp = Resources["InfoTableFunctions"].EQFilter({
                                        					fieldName: "ID" /* STRING */ ,
                                        					isCaseSensitive: undefined /* BOOLEAN {"defaultValue":false} */ ,
                                        					t: requirementsData /* INFOTABLE */ ,
                                        					value: rvsId /* STRING */
                                        				});
                                        			} else {
                                        				//versioned item
                                        				let liveItemId = liveIdWithVersions[0];
                                        				let versionId = liveIdWithVersions[1].split(".");
                                        				let majorVersion = versionId[0];
                                        				let minorVersion = versionId[1];
                                        				let query = {
                                        					"filters": {
                                        						"filters": [{
                                        							fieldName: "LiveItemID",
                                        							value: liveItemId,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "MajorVersionID",
                                        							value: majorVersion,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "MinorVersionID",
                                        							value: minorVersion,
                                        							type: "EQ"
                                        						}, {
                                        							fieldName: "DocumentID",
                                        							type: "MissingValue"
                                        						}],
                                        						"type": "AND"
                                        					}
                                        				};
                                        				params = {
                                        					t: requirementsData /* INFOTABLE */ ,
                                        					query: query /* QUERY */
                                        				};
                                        				sp = Resources["InfoTableFunctions"].Query(params);
                                        			}
                                        
                                        			let newEntry = new Object();
                                        			newEntry.key = sp.RequirementType;
                                        			newEntry.value = sp.RequirementType;
                                        			dropdownValuesForViews.AddRow(newEntry);
                                        		}
                                        	} else if (view == "Sub supplier") {
                                        		supplyObjects.forEach(supplyObject => {
                                        			let ikeapartjson = supplyObject.ConfigurableRevisionLinkDown;
                                        			let classificationAttributes = supplyObject.CVMClassification.ClassificationAttributes;
                                        			let supplyActor = "";
                                        			for (let c = 0; c < classificationAttributes.length; c++) {
                                        				if (classificationAttributes[c].InternalName == "com.ikea.GDLegalName") {
                                        					supplyActor = classificationAttributes[c].Value;
                                        					break;
                                        				}
                                        			}
                                        			if (ikeapartjson && ikeapartjson.length > 0) {
                                        				let newEntry = new Object();
                                        				newEntry.key = supplyActor;
                                        				newEntry.value = supplyActor;
                                        				dropdownValuesForViews.AddRow(newEntry);
                                        			}
                                        		});
                                        	}
                                        	let params = {
                                        		t: dropdownValuesForViews /* INFOTABLE */ ,
                                        		columns: "key,value" /* STRING */
                                        	};
                                        	dropdownValuesForViews = Resources["InfoTableFunctions"].Distinct(params);
                                        	let sessionValues = Resources["CurrentSessionInfo"].GetGlobalSessionValues();
                                        
                                        	if (sessionValues.rows[0].InputForReqListNavigation) {
                                        		let selectedItemsString = sessionValues.rows[0].InputForReqListValueSelection;
                                        		let selectedValues = selectedItemsString.split("#_#");
                                        		for (let i = 1; i < selectedValues.length; i++) {
                                        			selectedItems.AddRow({
                                        				key: selectedValues[i]
                                        			});
                                        		}
                                        
                                        		let params = {
                                        			name: "InputForReqListNavigation" /* STRING */ ,
                                        			value: false /* BOOLEAN */
                                        		};
                                        		// no return
                                        		Resources["CurrentSessionInfo"].SetGlobalSessionBooleanValue(params);
                                        	}
                                        
                                        
                                        	result.AddRow({
                                        		dropdownValuesForViews: dropdownValuesForViews,
                                        		selectedData: selectedItems
                                        	});
                                        
                                        	logger.info(FN + "values are loaded for dropdown");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getVerificationOverviewData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getVerificationOverviewData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationOverview.DataShape"
                                        });
                                        let definition = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let ids = inputForOverview.split("#_#");
                                        	let supply_object_id = ids[0];
                                        	let id_part = ids[1];
                                        	let id_rvs = ids[2];
                                        	let id_rvs_verified = ids[3];
                                        	let requestor = ids[4];
                                        	let declarant = ids[5];
                                        	let verification_data_format = ids[6];
                                        	let applies_to_name = ids[7];
                                        	let status = ids[8];
                                        	let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	const reqResourceProviderThing = Things[Things["IK.CVM.Configuration"].getRequirementResourceProvider()];
                                        
                                        	let newEntry = new Object();
                                        	newEntry.applies_to_name = "/ " + applies_to_name;
                                        	newEntry.verification_data_format = verification_data_format;
                                        	newEntry.status = "Not verified";
                                        	newEntry.requestor = requestor;
                                        	newEntry.declarant = declarant;
                                        	newEntry.status = status;
                                        	newEntry.requirement_connected_date = "";
                                        	newEntry.ikea_sales_item_production_date = "";
                                        	newEntry.label1_visibility = false;
                                        	newEntry.label2_visibility = false;
                                        
                                        	if (applies_to_name == "Sample Data") {
                                        		newEntry.requirement_title = "Sample Data";
                                        		newEntry.requirement_type = "Sample Data";
                                        		newEntry.requirement_text = "Sample Data";
                                        	} else {
                                        		let requirement = reqResourceProviderThing.getObjectById({
                                        			id: id_rvs
                                        		});
                                        		let row = requirement.rows[0];
                                        		newEntry.requirement_title = row.RequirementTitle;
                                        		newEntry.requirement_type = row.RequirementType;
                                        		newEntry.requirement_text = row.Text;
                                        		if (row.Definition) {
                                        			for (let i = 0; i < row.Definition.getRowCount(); i++) {
                                        				let def = row.Definition.rows[i];
                                        				definition.AddRow({
                                        					item: def.ID
                                        				});
                                        			}
                                        		}
                                        		newEntry.definition = definition;
                                        
                                        		let deadLine = Things[dataBaseThing].getDeadLineDetailForSupplyObject({
                                        			requirement_id: id_rvs,
                                        			supply_object_id: supply_object_id
                                        		});
                                        		newEntry.requirement_connected_date = dateFormat(new Date(deadLine.rows[0].CREATED_TIMESTAMP), "yyyy-MM-dd");
                                        		newEntry.ikea_sales_item_production_date = dateFormat(new Date(deadLine.rows[0].DEADLINE), "yyyy-MM-dd");
                                        	}
                                        	if (status == "Delegated") {
                                        		let verificationObj = Things[dataBaseThing].getAggregatedVerificationObject({
                                        			id_supplier: project_number,
                                        			supply_object_id: supply_object_id,
                                        			id_part: id_part,
                                        			id_rvs: id_rvs,
                                        			id_rvs_verified: id_rvs_verified
                                        		});
                                        		if (verificationObj && verificationObj.getRowCount() > 0) {
                                        			newEntry.status = "Delegated";
                                        			newEntry.label1_visibility = true;
                                        			newEntry.label1_text = "Delegated";
                                        			newEntry.label1_date = dateFormat(new Date(verificationObj.rows[0].CREATED_TIMESTAMP), "yyyy-MM-dd");
                                        		}
                                        
                                        	} else if (status == "Verified") {
                                        		let verificationObj = Things[dataBaseThing].getAggregatedVerificationObject({
                                        			id_supplier: project_number,
                                        			supply_object_id: supply_object_id,
                                        			id_part: id_part,
                                        			id_rvs: id_rvs,
                                        			id_rvs_verified: id_rvs_verified
                                        		});
                                        		if (verificationObj && verificationObj.getRowCount() > 0) {
                                        			newEntry.status = "Delegated";
                                        			newEntry.label1_visibility = true;
                                        			newEntry.label1_text = "Delegated";
                                        			newEntry.label1_date = dateFormat(new Date(verificationObj.rows[0].CREATED_TIMESTAMP), "yyyy-MM-dd");
                                        			let filterReportingObj = "SupplyObjectID eq '" + supply_object_id + "' and ComponentID eq '" + id_part + "' and RequirementID eq '" + id_rvs + "' and VerificationMethodID eq '" + id_rvs_verified + "' and SupplierDetails eq '" + verificationObj.rows[0].DELEGATED_ID + "'";
                                        			if (verificationObj.rows[0].IS_VERIFIED > 0) {
                                        				newEntry.status = "Verified";
                                        				newEntry.label2_visibility = true;
                                        				newEntry.label2_text = "Verified";
                                        				reportingObjJson = Things[odataconnectorthing].getReportingObjects({
                                        					$filter: filterReportingObj,
                                        					$select: "CreatedOn"
                                        				});
                                        				if (reportingObjJson && reportingObjJson.value.length > 0) {
                                        					newEntry.label2_date = dateFormat(new Date(reportingObjJson.value[0].CreatedOn), "yyyy-MM-dd");
                                        				}
                                        			}
                                        		} else {
                                        			let filterReportingObj = "SupplyObjectID eq '" + supply_object_id + "' and ComponentID eq '" + id_part + "' and RequirementID eq '" + id_rvs + "' and VerificationMethodID eq '" + id_rvs_verified + "' and SupplierDetails eq '" + project_number + "'";
                                        			reportingObjJson = Things[odataconnectorthing].getReportingObjects({
                                        				$filter: filterReportingObj,
                                        				$select: "CreatedOn"
                                        			});
                                        			if (reportingObjJson && reportingObjJson.value.length > 0) {
                                        				newEntry.status = "Verified";
                                        				newEntry.label1_visibility = true;
                                        				newEntry.label1_text = "Verified";
                                        				newEntry.label1_date = dateFormat(new Date(reportingObjJson.value[0].CreatedOn), "yyyy-MM-dd");
                                        			}
                                        		}
                                        	} else if (status == "New test result" || status == "New certificate received") {
                                        		newEntry.label1_visibility = true;
                                        		newEntry.label1_text = status == "New test result" ? "Report requested" : "Certificate requested";
                                        		newEntry.label1_date = "YYYY-MM-DD";
                                        		newEntry.label2_visibility = true;
                                        		newEntry.label2_text = status == "New test result" ? "Report received" : "Certificate received";
                                        		newEntry.label2_date = "YYYY-MM-DD";
                                        	} else if (status == "Report requested" || status == "Certificate requested") {
                                        		newEntry.label1_visibility = true;
                                        		newEntry.label1_text = status == "Report requested" ? "Report requested" : "Certificate requested";
                                        		newEntry.label1_date = "YYYY-MM-DD";
                                        	}
                                        	if (status == "Verified" || status == "New certificate received" || status == "New test result") {
                                        		newEntry.part_material_production_date_img = "IK.TickIconWithGreenBackground.Media";
                                        		newEntry.ikea_sales_production_date_img = "IK.TickIconWithGreenBackground.Media";
                                        		newEntry.implementation_deadline_img = "IK.TickIconWithGreenBackground.Media";
                                        	} else {
                                        		newEntry.part_material_production_date_img = "IK.EllipseIcon.Media";
                                        		newEntry.ikea_sales_production_date_img = "IK.EllipseIcon.Media";
                                        		newEntry.implementation_deadline_img = "IK.EllipseIcon.Media";
                                        	}
                                        	result.AddRow(newEntry);
                                        	logger.info(FN + "executed successfully [" + inputForOverview + "]");
                                        } catch (err) {
                                        	logger.error(FN + "Line :" + err.lineNumber + " Error :" + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getVerificationResultForSubSupplier">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getVerificationResultForSubSupplier -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        try {
                                        	let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnectorForSubSupplierUsers();
                                        	let rows = Things[dataBaseThing].getAggregatedVerificationResultsBySupplierIdSubSupplierId({
                                        		id_delegated: project_number,
                                        		id_delegator: parent_supplier
                                        	});
                                        	for (let m = 0; m < rows.getRowCount(); m++) {
                                        		let row = rows[m];
                                        
                                        		let partJson = Things[odataconnectorthing].getParts({
                                        			$filter: "Number eq '" + row.APPLIES_TO_NAME + "' or Number eq '" + row.APPLIES_TO_MATERIAL + "'" /* STRING {"dataShape":""} */ ,
                                        			$select: "Name,Number,CVMClassification" /* STRING {"dataShape":""} */ ,
                                        		});
                                        		let values = partJson.value;
                                        		let newEntry = {};
                                        		newEntry.uid = generateGUID();
                                        		newEntry.unique_id = newEntry.uid;
                                        		for (let i = 0; i < values.length; i++) {
                                        			let value = values[i];
                                        			if (value.Number == row.APPLIES_TO_NAME) {
                                        				newEntry.applies_to_name = value.Name;
                                        				newEntry.applies_to_name_html = value.Name;
                                        				newEntry.trade_good_name = value.Name;
                                        				let classificationAttributes = value.CVMClassification.ClassificationAttributes;
                                        				for (let c = 0; c < classificationAttributes.length; c++) {
                                        					if (classificationAttributes[c].InternalName == "com.ikea.GDType") {
                                        						newEntry.trade_good_type = classificationAttributes[c].Value;
                                        					}
                                        					if (classificationAttributes[c].InternalName == "com.ikea.GDTradeGoodID") {
                                        						newEntry.trade_good_id = classificationAttributes[c].Value;
                                        					}
                                        				}
                                        			} else if (value.Number == row.APPLIES_TO_MATERIAL) {
                                        				newEntry.applies_to_material = value.Name;
                                        			}
                                        		}
                                        		newEntry.producer = row.PRODUCER;
                                        		newEntry.requirement_text = row.DETAILS;
                                        		newEntry.requirement_type = row.REQUIREMENT_TYPE;
                                        		newEntry.requirement_subtype = row.REQUIREMENT_SUBTYPE;
                                        		newEntry.requirement_source = row.REQUIREMENT_SOURCE;
                                        		newEntry.requirement_valid_from = row.REQUIREMENT_VALID_FROM;
                                        		newEntry.requirement_valid_to = row.REQUIREMENT_VALID_TO;
                                        		newEntry.latest_implementation_date = row.LATEST_IMPLEMENTATION_DATE;
                                        		newEntry.parent_supplier = row.DELEGATOR_ID;
                                        		newEntry.child_supplier = row.DELEGATED_ID;
                                        		newEntry.id_verification_result = row.VERIFICATION_RESULT_ID;
                                        		newEntry.id_verification = row.VERIFICATION_ID;
                                        		newEntry.id_rvs = row.RVS_ID;
                                        		newEntry.id_rvs_verified = row.RVS_VERIFIED_ID;
                                        		newEntry.requirement_title = row.SPECIFICATION_NAME;
                                        		newEntry.requirement_text = row.DETAILS;
                                        		newEntry.verification_method = row.TEST_METHOD;
                                        		newEntry.verification_data_format = row.VERIFICATION_REQUESTED;
                                        		newEntry.compliant_in_production = row.COMPLIANT_IN_PRODUCTION;
                                        		newEntry.compliant_in_production_string = row.COMPLIANT_IN_PRODUCTION.toISOString().slice(0, 10);
                                        
                                        		if (newEntry.verification_data_format == "Self Declaration") {
                                        			newEntry.declarant = project_number;
                                        			newEntry.requestor = parent_supplier;
                                        			newEntry.ValidationMashupName = "IK.VerificationReportingSelfDeclarationType.Mashup";
                                        			newEntry.popup_height = 600;
                                        			newEntry.popup_width = 1500;
                                        			newEntry.verification_statement = "<label style=\"top: -16px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position:relative; left:-35px; width:80%; height:26px ; border-radius:2px; border:1px solid #929292; font-size:11px;\" onchange=\"setDropDownValue('" + newEntry.unique_id + "#_#Select','" + newEntry.unique_id + "')\"><option disabled selected value></option><option value=\"Fulfils\">Fulfils</option><option value=\"Not applicable\">Not applicable</option></select>";
                                        
                                        		} else if (newEntry.verification_data_format == "Test Report") {
                                        			newEntry.test_method = "Formaldehyde content wood mg/100 g (perforator), EN ISO 12460-5 as per IOS-TM-0010";
                                        			let testLabs = Things[dataBaseThing].getAllTestLabDetails();
                                        			let options = "";
                                        			for (let i = 0; i < testLabs.getRowCount(); i++) {
                                        				options += "<option style=\"font-size:14px;\"value=\"" + testLabs.rows[i].LAB_NUMBER + "\">" + testLabs.rows[i].LAB_NAME + "</option>";
                                        			}
                                        			newEntry.ValidationMashupName = "IK.VerificationReportingTestReportTypeVerify.Mashup";
                                        			newEntry.SendRequestMashupName = "IK.VerificationReportingOrderTestReport.Mashup";
                                        			newEntry.popup_height = 600;
                                        			newEntry.popup_width = 1500;
                                        			newEntry.test_labs = "<label style=\"top: -14px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position: relative;font :normal normal normal 14px/20px Noto IKEA Latin; top:-22px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292;\"><option disabled selected value>" + options + "</select>";
                                        			newEntry.batch_number = "<input type=text id=\"" + newEntry.unique_id + "#_#BatchNumber\" style=\"position:relative; left:0px; width:90% ; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#BatchNumber','" + newEntry.unique_id + "', 'BatchNumber')\" />";
                                        			newEntry.material_description = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialDescription','" + newEntry.unique_id + "', 'MaterialDescription')\" />";
                                        			newEntry.material_identification_code = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialIdentificationCode\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialIdentificationCode','" + newEntry.unique_id + "', 'MaterialIdentificationCode')\" />";
                                        			newEntry.sample_description = "<input type=text id=\"" + newEntry.unique_id + "#_#SampleDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#SampleDescription','" + newEntry.unique_id + "', 'SampleDescription')\" />";
                                        			newEntry.additional_information = "<input type=text id=\"" + newEntry.unique_id + "#_#AdditionalInformation\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#AdditionalInformation','" + newEntry.unique_id + "', 'AdditionalInformation')\" />";
                                        			newEntry.action = "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.UploadIcon.Media' onclick=\"\"/>";
                                        
                                        		} else if (newEntry.verification_data_format == "Certificate") {
                                        			newEntry.certification_method = "Formaldehyde content wood mg/100 g (perforator), EN ISO 12460-5 as per IOS-TM-0010";
                                        			let testLabs = Things[dataBaseThing].getAllTestLabDetails();
                                        			let options = "";
                                        			for (let i = 0; i < testLabs.getRowCount(); i++) {
                                        				options += "<option style=\"font-size:14px;\"value=\"" + testLabs.rows[i].LAB_NUMBER + "\">" + testLabs.rows[i].LAB_NAME + "</option>";
                                        			}
                                        			newEntry.ValidationMashupName = "IK.VerificationReportingCertificateTypeVerify.Mashup";
                                        			newEntry.SendRequestMashupName = "IK.VerificationReportingOrderCertificate.Mashup";
                                        
                                        			newEntry.popup_height = 600;
                                        			newEntry.popup_width = 1500;
                                        			newEntry.certifier = "<label style=\"top: -14px; position: relative; z-index: 8; left: 10px; display: inline-block; background: white; padding: 0 5px; width: fit-content; font :normal normal normal 9px/15px Noto IKEA Latin;color:#767676;\">Select</label><select name=\"" + newEntry.unique_id + "#_#Select\" id=\"" + newEntry.unique_id + "#_#Select\" style=\"position: relative;font :normal normal normal 14px/20px Noto IKEA Latin; top:-22px; width:90%; height:34px ; border-radius:2px; border:1px solid #929292;\"><option disabled selected value>" + options + "</select>";
                                        			newEntry.batch_number = "<input type=text id=\"" + newEntry.unique_id + "#_#BatchNumber\" style=\"position:relative; left:0px; width:90% ; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#BatchNumber','" + newEntry.unique_id + "', 'BatchNumber')\" />";
                                        			newEntry.material_description = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialDescription','" + newEntry.unique_id + "', 'MaterialDescription')\" />";
                                        			newEntry.material_identification_code = "<input type=text id=\"" + newEntry.unique_id + "#_#MaterialIdentificationCode\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#MaterialIdentificationCode','" + newEntry.unique_id + "', 'MaterialIdentificationCode')\" />";
                                        			newEntry.sample_description = "<input type=text id=\"" + newEntry.unique_id + "#_#SampleDescription\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#SampleDescription','" + newEntry.unique_id + "', 'SampleDescription')\" />";
                                        			newEntry.additional_information = "<input type=text id=\"" + newEntry.unique_id + "#_#AdditionalInformation\" style=\"position:relative; left:0px; width:90%; height:32px ; border-radius:2px; border:1px solid #929292; font-size:14px;padding-left:5px;padding-right:5px\" onchange=\"setTestReportVerifyValue('" + newEntry.unique_id + "#_#AdditionalInformation','" + newEntry.unique_id + "', 'AdditionalInformation')\" />";
                                        			newEntry.action = "<img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.UploadIcon.Media' onclick=\"\"/>";
                                        
                                        		} else if (newEntry.verification_data_format == "No Verification Method Defined") {
                                        			newEntry.ValidationMashupName = "IK.VerificationReportingPlantDeclarationType.Mashup";
                                        			newEntry.popup_height = 600;
                                        			newEntry.popup_width = 1350;
                                        			newEntry.declarant = project_number;
                                        			newEntry.requestor = parent_supplier;
                                        		}
                                        		newEntry.id_article = row.ARTICLE_ID;
                                        		newEntry.id_part = row.PART_ID;
                                        		newEntry.is_verification_needed = row.IS_VERIFICATION_NEEDED;
                                        		newEntry.measuring_unit = row.MEASURING_UNIT;
                                        		newEntry.math_operator_1 = row.MATH_OPERATOR_1;
                                        		newEntry.math_operator_2 = row.MATH_OPERATOR_2;
                                        		newEntry.value_1 = row.VALUE_1;
                                        		newEntry.value_2 = row.VALUE_2;
                                        		newEntry.reporting_frequency = row.VERIFICATION_FREQUENCY;
                                        		newEntry.number_result = row.NUMBER_RESULT;
                                        		newEntry.integer_result = row.INTEGER_RESULT;
                                        		newEntry.text_result = row.TEXT_RESULT;
                                        		newEntry.is_verified = row.IS_VERIFIED;
                                        		newEntry.comment = row.RESULT_COMMENT;
                                        		newEntry.file_content = row.FILE_CONTENT;
                                        		newEntry.has_feedback = row.HAS_FEEDBACK;
                                        		newEntry.file_name = row.FILENAME;
                                        		newEntry.task_status = "Not Verified";
                                        		newEntry.isSelected = "";
                                        		newEntry.verification_type = "Never verified";
                                        		if (newEntry.has_feedback) {
                                        			newEntry.verification_result = newEntry.is_verified ? "Verified" : "Not Verified";
                                        			newEntry.verification_type = "Reverification";
                                        			newEntry.task_status = newEntry.is_verified ? "Verified" : "Verification failed";
                                        		}
                                        		result.AddRow(newEntry);
                                        	}
                                        	let query = {
                                        		"sorts": [{
                                        			"fieldName": "verification_type",
                                        			"isAscending": true
                                        		}, {
                                        			"fieldName": "compliant_in_production",
                                        			"isAscending": true
                                        		}]
                                        	};
                                        	let params = {
                                        		t: result /* INFOTABLE */ ,
                                        		query: query /* QUERY */
                                        	};
                                        
                                        	// result: INFOTABLE
                                        	result = Resources["InfoTableFunctions"].Query(params);
                                        	if (result.getRowCount() > 0) {
                                        		let sampleData = me.sampleDataForSubSupplier();
                                        		sampleData.rows.forEach(row => {
                                        			result.AddRow(row);
                                        		});
                                        	}
                                        	logger.info(FN + "Task loaded for [" + project_number + "] and [" + parent_supplier + "] ");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getViews">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getViews -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.KeyValue.DataShape"
                                        });
                                        
                                        try {
                                        	result.AddRow({
                                        		key: "Article",
                                        		value: "Select article(s)"
                                        	});
                                        	result.AddRow({
                                        		key: "Part",
                                        		value: "Select part(s)"
                                        	});
                                        	result.AddRow({
                                        		key: "Material",
                                        		value: "Select material(s)"
                                        	});
                                        	result.AddRow({
                                        		key: "Requirements",
                                        		value: "Requirement type"
                                        	});
                                        	result.AddRow({
                                        		key: "Sub supplier",
                                        		value: "Select sub supplier(s)"
                                        	});
                                            logger.info(FN + "View loaded successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="groupTestOrders">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " groupTestOrders -> ";
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.PreviewTestOrder.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PreviewTestOrder.DataShape"
                                        });
                                        
                                        let testLabs = {};
                                        try {	
                                        	for (let i = 0; i < data.getRowCount(); i++) {
                                        		let rowData = data.rows[i];
                                        		let testLabName = rowData.test_labs;
                                                //If test labs is not present then create new JSON
                                        			if (testLabs[testLabName] == null) {
                                        				testLabs[testLabName] = {};
                                        				testLabs[testLabName].testLabName = rowData.test_labs;
                                        				testLabs[testLabName].testCount = 1;
                                        				testLabs[testLabName].requirement = [rowData.id_rvs];
                                        			}
                                                //If test labs is already present the add thee values
                                                else {
                                        				testLabs[testLabName].testCount++;
                                        				if (!testLabs[testLabName].requirement.includes(rowData.id_rvs)) {
                                        					testLabs[testLabName].requirement.push(rowData.id_rvs);
                                        				}
                                        			}
                                        		
                                        	}
                                            //Formation of Test lab data as infotable
                                        	for (let testLab in testLabs) {
                                        		let testLabDetails = testLabs[testLab];
                                        		result.AddRow({
                                        			test_lab_name: testLabDetails.testLabName,
                                        			test_count: testLabDetails.testCount,
                                        			requirements_covered: testLabDetails.requirement.length,
                                        			action: "<a style=\"text-decoration: underline;cursor:pointer;\">Preview Test order form</a>"
                                        		});
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="groupTestReportTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " getTestReportTasks -> ";
                                        let start  = new Date().getTime();
                                        
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        let testLabsData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        let unitsData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	if (task_details && task_details.getRowCount() > 0) {
                                        		let dataBaseThing = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		let testLabsData = me.getTestLabs();
                                                
                                                unitsData.AddRow({item:""});
                                                unitsData.AddRow({item: "mg/kg"});
                                                
                                        		let obj = {};
                                        		for (let i = 0; i < task_details.getRowCount(); i++) {
                                                    let row = task_details.rows[i];
                                                    let newEntry = new Object();
                                                    newEntry.isSelected = true;
                                                    newEntry.unique_id = row.unique_id;          
                                                    newEntry.id_part =row.id_part;
                                                    newEntry.id_rvs = row.id_rvs;
                                                    newEntry.id_rvs_verified = row.id_rvs_verified;
                                                    newEntry.applies_to_name = row.applies_to_name;
                                                    newEntry.applies_to_material = row.applies_to_material;
                                                    newEntry.producer = row.producer;
                                                    newEntry.verification_method = row.verification_method;
                                                    newEntry.reporting_frequency = row.reporting_frequency;
                                                    newEntry.requestor = row.requestor;
                                                    newEntry.declarant = row.declarant;
                                                    newEntry.supply_object_id = row.supply_object_id;
                                                    newEntry.sub_row_count = row.sub_row_count;
                                                    newEntry.test_labs_data = testLabsData;
                                                    newEntry.units_data = unitsData;
                                        			newEntry.test_report_base_mashup ="IK.VerificationReportingTestReportVerifyBaseMashup.Mashup";
                                                    newEntry.sample_production_date =row.sample_production_date;
                                        			let grouping_section_id = row.grouping_section_id;
                                        			if (!obj[row.grouping_section_id]) {
                                        				for (let j = 0; j < task_details.getRowCount(); j++) {
                                        					if (task_details[j].grouping_section_id == grouping_section_id) {
                                        						if (obj[grouping_section_id]) {
                                        							obj[grouping_section_id]++;
                                        						} else {
                                        							obj[grouping_section_id] = 1;
                                        						}
                                        					}
                                        				}
                                        				if (obj[grouping_section_id] == 1) {
                                        					row.grouping_section_id = "1";
                                                            newEntry.test_report_base_mashup ="IK.VerificationReportingTestReportVerifyBase2Mashup.Mashup";
                                        				}
                                        			}
                                                    newEntry.grouping_section_id = row.grouping_section_id;
                                                    result.AddRow(newEntry);
                                        		}
                                        //		result = task_details;
                                        		logger.debug("grp task -- "+result.ToJSON());
                                        		let localInfoTable = result;
                                        		let sort = {
                                        			name: "unique_id",
                                        			ascending: true
                                        		};
                                        		localInfoTable.Sort(sort);
                                        		result = localInfoTable;
                                        	}
                                        	logger.info(FN + "service executed");
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        let end = new Date().getTime();
                                        logger.debug(FN + " Toatal time "+(end -start));
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="resetTasklistGrid">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " resetTasklistGrid -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        logger.info(FN + "Tasks reset successful");
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="sampleData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " sampleData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Verified",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Test Report",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_source: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "",
                                        	//		popup_height: 600,
                                        	//		popup_width: 1500,
                                        	//		is_verified: false,
                                        	//		batch_number: "92345",
                                        	//		value_1: 90,
                                        	//		measuring_unit: "mg/kg",
                                        	//		requestor: "AMG(01210)",
                                        	//		test_labs: "Catas",
                                        	//		date: "2023-02-01",
                                        	//		sample_description: "Test report description",
                                        	//		value: "0.1",
                                        	//		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>Pass",
                                        	//		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        	//		test_method: "Formaldehyde ASTM D6007"
                                        	//
                                        	//	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                                compliant_in_production:new Date(),
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Report requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>Pass",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Test Report#_#Sample Data#_#Sample Data#_#Report requested')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Report requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>Pass",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Test Report#_#Sample Data#_#Sample Data#_#Report requested')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New test result",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingTestReportTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>Fail",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Test Report#_#Sample Data#_#Sample Data#_#New test result')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New test result",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingTestReportTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>Fail",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Test Report#_#Sample Data#_#Sample Data#_#New test result')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	//////	result.AddRow({
                                        	////		uid: generateGUID(),
                                        	////		applies_to_material: "Sample Data",
                                        	////		applies_to_name: "Sample Data",
                                        	////		producer: "AKZO Nobel",
                                        	////		requirement_title: "Phthalates",
                                        	////		requirement_text: "Not allowed to be used",
                                        	////		task_status: "Delegated",
                                        	////		requirement_type: "Chemical requirements",
                                        	////		requirement_subtype: "NA",
                                        	////		verification_data_format: "Test Report",
                                        	////		reporting_frequency: "Every year",
                                        	////		requirement_source: " ",
                                        	////		verification_method: "Not allowed to be used",
                                        	////		latest_implementation_date: "28-02-2023",
                                        	////		requirement_valid_from: "28-02-2023",
                                        	////		requirement_valid_to: "28-02-2025",
                                        	////		has_feedback: false,
                                        	////		ValidationMashupName: "IK.VerificationReportingTestReportTypeFileUpload.Mashup",
                                        	////		popup_height: 725,
                                        	////		popup_width: 868,
                                        	////		is_verified: false,
                                        	////		requestor: "AMG(01210)",
                                        	////		test_labs: "Catas",
                                        	////		test_method: "Formaldehyde ASTM D6007"
                                        	////	});
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Delegated",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Test Report",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_source: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "IK.VerificationReportingTestReportTypeFileUpload.Mashup",
                                        	//		popup_height: 725,
                                        	//		popup_width: 868,
                                        	//		is_verified: false,
                                        	//		requestor: "AMG(01210)",
                                        	//		test_labs: "Catas",
                                        	//		test_method: "Formaldehyde ASTM D6007"
                                        	//	});
                                        	//	// Adding sample data for certificate type
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Delegated",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Certificate",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_reference: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        	//		popup_height: 600,
                                        	//		popup_width: 1500,
                                        	//		is_verified: false,
                                        	//		batch_number: "92345",
                                        	//		value_1: 90,
                                        	//		measuring_unit: "mg/kg",
                                        	//		requestor: "AMG(01210)",
                                        	//		certifier: "Catas",
                                        	//		date: "2023-02-01",
                                        	//		sample_description: "Certificate description",
                                        	//		value: "0.1",
                                        	//		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        	//		certification_method: "Certificate data",
                                        	//		certificate_id: "5673211"
                                        	//	});
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Delegated",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Certificate",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_reference: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        	//		popup_height: 600,
                                        	//		popup_width: 1500,
                                        	//		is_verified: false,
                                        	//		batch_number: "92345",
                                        	//		value_1: 90,
                                        	//		measuring_unit: "mg/kg",
                                        	//		requestor: "AMG(01210)",
                                        	//		certifier: "Catas",
                                        	//		date: "2023-02-01",
                                        	//		sample_description: "Certificate description",
                                        	//		value: "0.1",
                                        	//		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        	//		certification_method: "Certificate data",
                                        	//		certificate_id: "5673211"
                                        	//	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New certificate received",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Certificate#_#Sample Data#_#Sample Data#_#New certificate received')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New certificate received",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Certificate#_#Sample Data#_#Sample Data#_#New certificate received')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New certificate received",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Certificate#_#Sample Data#_#Sample Data#_#New certificate received')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Certificate requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Certificate#_#Sample Data#_#Sample Data#_#Certificate requested')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	result.AddRow({
                                                compliant_in_production:new Date(),
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Certificate requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        //		latest_implementation_date: "28-02-2023",
                                        //		requirement_valid_from: "28-02-2023",
                                        //		requirement_valid_to: "28-02-2025",
                                        //		has_feedback: false,
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        //		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211",
                                        		applies_to_name_html: "Sample Data" + "<img style=\"cursor: pointer; float:right; padding-bottom:1px;padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('Article#_#Part#_#Requirement#_#Test#_#AMG(01210)#_#AKZO Nobel#_#Certificate#_#Sample Data#_#Sample Data#_#Certificate requested')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>"
                                        	});
                                        	logger.info(FN + " executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="sampleDataForSubSupplier">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " sampleDataForSubSupplier -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Verified",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Test Report",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_source: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "",
                                        	//		popup_height: 600,
                                        	//		popup_width: 1500,
                                        	//		is_verified: false,
                                        	//		batch_number: "92345",
                                        	//		value_1: 90,
                                        	//		measuring_unit: "mg/kg",
                                        	//		requestor: "AMG(01210)",
                                        	//		test_labs: "Catas",
                                        	//		date: "2023-02-01",
                                        	//		sample_description: "Test report description",
                                        	//		value: "0.1",
                                        	//		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>Pass",
                                        	//		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        	//		test_method: "Formaldehyde ASTM D6007"
                                        	//
                                        	//	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Report requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>Pass",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007"
                                        
                                        	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Report requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.GreenIcon.Media'>Pass",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007"
                                        
                                        	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New test result",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingTestReportTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>Fail",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007"
                                        	});
                                        
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New test result",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Test Report",
                                        		reporting_frequency: "Every year",
                                        		requirement_source: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingTestReportTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		test_labs: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Test report description",
                                        		value: "0.1",
                                        		result: "<img style=\"padding-right: 5px;\" src='/Thingworx/MediaEntities/IK.RedIcon.Media'>Fail",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		test_method: "Formaldehyde ASTM D6007"
                                        	});
                                        	//////	result.AddRow({
                                        	////		uid: generateGUID(),
                                        	////		applies_to_material: "Sample Data",
                                        	////		applies_to_name: "Sample Data",
                                        	////		producer: "AKZO Nobel",
                                        	////		requirement_title: "Phthalates",
                                        	////		requirement_text: "Not allowed to be used",
                                        	////		task_status: "Delegated",
                                        	////		requirement_type: "Chemical requirements",
                                        	////		requirement_subtype: "NA",
                                        	////		verification_data_format: "Test Report",
                                        	////		reporting_frequency: "Every year",
                                        	////		requirement_source: " ",
                                        	////		verification_method: "Not allowed to be used",
                                        	////		latest_implementation_date: "28-02-2023",
                                        	////		requirement_valid_from: "28-02-2023",
                                        	////		requirement_valid_to: "28-02-2025",
                                        	////		has_feedback: false,
                                        	////		ValidationMashupName: "IK.VerificationReportingTestReportTypeFileUpload.Mashup",
                                        	////		popup_height: 725,
                                        	////		popup_width: 868,
                                        	////		is_verified: false,
                                        	////		requestor: "AMG(01210)",
                                        	////		test_labs: "Catas",
                                        	////		test_method: "Formaldehyde ASTM D6007"
                                        	////	});
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Delegated",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Test Report",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_source: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "IK.VerificationReportingTestReportTypeFileUpload.Mashup",
                                        	//		popup_height: 725,
                                        	//		popup_width: 868,
                                        	//		is_verified: false,
                                        	//		requestor: "AMG(01210)",
                                        	//		test_labs: "Catas",
                                        	//		test_method: "Formaldehyde ASTM D6007"
                                        	//	});
                                        	//	// Adding sample data for certificate type
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Delegated",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Certificate",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_reference: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        	//		popup_height: 600,
                                        	//		popup_width: 1500,
                                        	//		is_verified: false,
                                        	//		batch_number: "92345",
                                        	//		value_1: 90,
                                        	//		measuring_unit: "mg/kg",
                                        	//		requestor: "AMG(01210)",
                                        	//		certifier: "Catas",
                                        	//		date: "2023-02-01",
                                        	//		sample_description: "Certificate description",
                                        	//		value: "0.1",
                                        	//		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        	//		certification_method: "Certificate data",
                                        	//		certificate_id: "5673211"
                                        	//	});
                                        	//	result.AddRow({
                                        	//		uid: generateGUID(),
                                        	//		applies_to_material: "Sample Data",
                                        	//		applies_to_name: "Sample Data",
                                        	//		producer: "AKZO Nobel",
                                        	//		requirement_title: "Phthalates",
                                        	//		requirement_text: "Not allowed to be used",
                                        	//		task_status: "Delegated",
                                        	//		requirement_type: "Chemical requirements",
                                        	//		requirement_subtype: "NA",
                                        	//		verification_data_format: "Certificate",
                                        	//		reporting_frequency: "Every year",
                                        	//		requirement_reference: " ",
                                        	//		verification_method: "Not allowed to be used",
                                        	//		latest_implementation_date: "28-02-2023",
                                        	//		requirement_valid_from: "28-02-2023",
                                        	//		requirement_valid_to: "28-02-2025",
                                        	//		has_feedback: false,
                                        	//		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        	//		popup_height: 600,
                                        	//		popup_width: 1500,
                                        	//		is_verified: false,
                                        	//		batch_number: "92345",
                                        	//		value_1: 90,
                                        	//		measuring_unit: "mg/kg",
                                        	//		requestor: "AMG(01210)",
                                        	//		certifier: "Catas",
                                        	//		date: "2023-02-01",
                                        	//		sample_description: "Certificate description",
                                        	//		value: "0.1",
                                        	//		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        	//		certification_method: "Certificate data",
                                        	//		certificate_id: "5673211"
                                        	//	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New certificate received",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211"
                                        	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New certificate received",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211"
                                        	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "New certificate received",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		ValidationMashupName: "IK.VerificationReportingCertificateTypeResult.Mashup",
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211"
                                        	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Certificate requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211"
                                        	});
                                        	result.AddRow({
                                        		uid: generateGUID(),
                                        		applies_to_material: "Sample Data",
                                        		applies_to_name: "Sample Data",
                                        		applies_to_name_html: "Sample Data",
                                        		producer: "AKZO Nobel",
                                        		requirement_title: "Phthalates",
                                        		requirement_text: "Not allowed to be used",
                                        		task_status: "Certificate requested",
                                        		requirement_type: "Chemical requirements",
                                        		requirement_subtype: "NA",
                                        		verification_data_format: "Certificate",
                                        		reporting_frequency: "Every year",
                                        		requirement_reference: " ",
                                        		verification_method: "Not allowed to be used",
                                        		latest_implementation_date: "28-02-2023",
                                        		requirement_valid_from: "28-02-2023",
                                        		requirement_valid_to: "28-02-2025",
                                        		has_feedback: false,
                                        		popup_height: 600,
                                        		popup_width: 1500,
                                        		is_verified: false,
                                        		batch_number: "92345",
                                        		value_1: 90,
                                        		measuring_unit: "mg/kg",
                                        		requestor: "AMG(01210)",
                                        		certifier: "Catas",
                                        		date: "2023-02-01",
                                        		sample_description: "Certificate description",
                                        		value: "0.1",
                                        		action: "<span><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.ViewIcon.Media' onclick=\"\"/></span><span style=\"padding-left: 10px;\"><img style=\"cursor: pointer;\" height=\"24px !important\" width=\"24px !important\" src='/Thingworx/MediaEntities/IK.DownloadIcon2.Media' onclick=\"\"/></span>",
                                        		certification_method: "Certificate data",
                                        		certificate_id: "5673211"
                                        	});
                                        	logger.info(FN + " executed successfully");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="sampleTestReportTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        for (let i = 0; i < 50; i++) {
                                        	let newEntry = new Object();
                                        	newEntry.applies_to_name_html = "Paint <img style=\"cursor: pointer; float:right; padding-bottom:1px; padding-right:10px;\" height=\"24px !important\" width=\"24px !important\" onclick=\"getDataForVerificationOverview('0000243035#_#10294036#_#33490-1.0#_#5770-1.0#_#SREDNA GORA AD(11565)#_#FUJIAN HAOSEN FORESTRY TECHNOLOGY CO., LTD(851455011)#_#Test Report#_#Paint#_#Not verified')\" src='/Thingworx/MediaEntities/IK.InformationIcon'/>";
                                        	newEntry.verification_data_format = "Test Report";
                                        	newEntry.requirement_subtype = "Structural";
                                        	newEntry.SendRequestMashupName = "IK.VerificationReportingTestReportTypeVerify.Mashup";
                                        	newEntry.applies_to_material = "Paint";
                                        	newEntry.compliant_in_production_string = "2024-01-13";
                                        	newEntry.id_rvs = "33490-1.0";
                                        	newEntry.uid = generateGUID();
                                        	newEntry.sub_row_count = "0";
                                        	newEntry.id_part = "10294036";
                                        	newEntry.reporting_frequency = "Each time a test is perfomed.";
                                        	newEntry.verification_method = "IOS-TM-0042 Unit load stacking capacity test for transport";
                                        	newEntry.action = "<a style=\"text-decoration: underline;cursor:pointer;\" onclick=\"updateTestReportTypeTask('" + newEntry.uid + "','root_mashupcontainer-17_navigationfunction-150-popup_ptcsbutton-56')\"> Manage details<\/a>";
                                        	newEntry.requirement_title = "IKEA IF (inside filler) 30";
                                        //	newEntry.ValidationMashupName = "IK.VerificationReportingTestReportTypeVerify.Mashup";
                                            newEntry.ValidationMashupName = "IK.VerificationReportingTestReportTypeVerifyCustomWidget.Mashup";
                                        
                                        	newEntry.declarant = "FUJIAN HAOSEN FORESTRY TECHNOLOGY CO., LTD(851455011)";
                                        	newEntry.delegation_mashup_name = "IK.DelegateTestReportType.Mashup";
                                        	newEntry.test_report_issue_date = 1698706800000;
                                           newEntry.grouping_section_id = "Paint - SREDNA GORA AD(11565)#_#0000243035";
                                            if(i >=0 && i<5){
                                                
                                        	newEntry.grouping_section_id = "Paint - SREDNA GORA AD(11565)#_#0000243035"+"1";
                                            }
                                            else if(i >=5 && i<10){
                                                
                                        	newEntry.grouping_section_id = "Paint - SREDNA GORA AD(11565)#_#0000243035"+"2";
                                            }
                                            else if(i >=10 && i<15){
                                        	newEntry.grouping_section_id = "Paint - SREDNA GORA AD(11565)#_#0000243035"+"3";
                                            }   
                                            else{
                                        	newEntry.grouping_section_id = "Paint - SREDNA GORA AD(11565)#_#0000243035"+"4";
                                            }
                                        //    logger.debug(i+" ----------- "+newEntry.grouping_section_id );
                                        	newEntry.supply_object_id = "0000243035";
                                        	newEntry.task_status = "Not verified";
                                        	newEntry.unique_id = newEntry.uid;
                                        	newEntry.popup_width = 1500;
                                        	newEntry.verification_type = "Never verified";
                                        	newEntry.requirement_description = "<a style=\"text-decoration: underline;cursor:pointer;\" onClick=\"getRequirementText('33490-1.0','root_mashupcontainer-17_ptcsbutton-377')\">IKEA IF (inside filler) 30<\/a>";
                                        	newEntry.trade_good_type = "Component";
                                        	newEntry.popup_height = 600;
                                        	newEntry.compliant_in_production = 1705145422909;
                                        	newEntry.requestor = "SREDNA GORA AD(11565)";
                                        	newEntry.requirement_type = "Mechanical Requirement";
                                        	newEntry.applies_to_name = "Paint";
                                        	newEntry.id_rvs_verified = "5770-1.0";
                                        	newEntry.trade_good_name = "Paint";
                                        	newEntry.producer = "FUJIAN HAOSEN FORESTRY TECHNOLOGY CO., LTD(851455011)";
                                        	newEntry.trade_good_id = "424";
                                        	result.AddRow(newEntry);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="searchTasklist">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " searchTasklist -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	if (searchText) {
                                        		let query = {
                                        			"filters": {
                                        				"filters": [{
                                        					"type": "LIKE",
                                        					"fieldName": "applies_to_material",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "applies_to_name",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "producer",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "requirement_title",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "requirement_type",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "requirement_subtype",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "verification_data_format",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "verification_deadline",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "task_status",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "verification_method",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "requirement_source",
                                        					"value": "%" + searchText + "%"
                                        				}, {
                                        					"type": "LIKE",
                                        					"fieldName": "reporting_frequency",
                                        					"value": "%" + searchText + "%"
                                        				}],
                                        				"type": "OR"
                                        			}
                                        		};
                                        		params = {
                                        			t: data /* INFOTABLE */ ,
                                        			query: query /* QUERY */
                                        		};
                                        
                                        		// result: INFOTABLE
                                        		result = Resources["InfoTableFunctions"].Query(params);
                                        		logger.info(FN + "Tasks is searched using [" + searchText + "]");
                                        	} else {
                                        		result = data;
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="triggerFileUpload">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " triggerFileUpload -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	let img = "<img id='IK.FileUploadIcon.Media' src='/Thingworx/MediaEntities/IK.FileUploadIcon.Media' onload=\"triggerFileUpload()\" />";
                                        	result.AddRow({
                                        		item: img
                                        	});
                                        	logger.info(FN + "File upload triggered.");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateBooleanReportingObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateBooleanReportingObject -> ";
                                        
                                        try {
                                        	let reportingObjCount = 0;
                                        	result = false;
                                        	let odataconnectorthing;
                                        	let groupInfo = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        	if (groupInfo.Find({
                                        			name: "Supplier Users"
                                        		})) {
                                        		odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	} else if (groupInfo.Find({
                                        			name: "Sub Supplier Users"
                                        		})) {
                                        		odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnectorForSubSupplierUsers();
                                        	}
                                        
                                        	if (validTasks.getRowCount() > 0) {
                                        		let libraryId = Things["IK.CVM.Configuration"].getSupplyPartsLibraryID();
                                        		let subfolderId;
                                        		// To fetch supplier folder for supplier tasks
                                        		if (validTasks && !validTasks.rows[0].parent_supplier) {
                                        
                                        			let swaggerConnector = Things["IK.CVM.Configuration"].getWNCSwaggerConnector();
                                        			let folderjson = Things[swaggerConnector].Get_Folders({
                                        				id: libraryId
                                        			});
                                        
                                        			let folderId;
                                        			if (folderjson !== undefined && folderjson.items !== undefined) {
                                        				let items = folderjson.items;
                                        				for (let i = 0; i < items.length; i++) {
                                        					let item = items[i];
                                        					if (item.attributes.name == project_name) {
                                        						folderId = item.id;
                                        					}
                                        				}
                                        			}
                                        			let subfolderjson = Things[swaggerConnector].Get_SubFolders({
                                        				id: folderId
                                        			});
                                        
                                        			if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        				let subfolderitems = subfolderjson.items;
                                        				for (let j = 0; j < subfolderitems.length; j++) {
                                        					let subfolderitem = subfolderitems[j];
                                        					if (subfolderitem.attributes.name == "Reporting Objects") {
                                        						subfolderId = subfolderitem.id;
                                        					}
                                        				}
                                        			}
                                        		}
                                        		for (let i = 0; i < validTasks.getRowCount(); i++) {
                                        			let task = validTasks.rows[i];
                                        
                                        			if (task) {
                                        				let is_verified = true;
                                        				let selectedChoice = task.verification_statement_value;
                                        				let json;
                                        				if (!task.parent_supplier) {
                                        					json = {
                                        						"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        						"Name": "Verification Result " + task.supply_object_id + " " + task.id_rvs + " " + task.id_rvs_verified,
                                        						"Context@odata.bind": "Containers('" + libraryId + "')",
                                        						"Folder@odata.bind": "Folders('" + subfolderId + "')",
                                        						"View": "Design",
                                        						"SupplyObjectID": task.supply_object_id,
                                                                "ComponentID":"0",
                                        						"SupplierDetails": project_number,
                                                                "BUCodeOwner": bu_code_owner,
                                                                "BUType": bu_type,
                                        						"VerificationComment": comment,
                                        						"RequirementID": task.id_rvs,
                                        						"VerificationMethodID": task.id_rvs_verified,
                                        						"VerificationStatus": "Verified",
                                        						"ReportingObjectClassification": {
                                        							"ClfNodeInternalName": "GDReportingObjectSelfDeclaration",
                                        							"ClassificationAttributes": [{
                                        									"InternalName": "com.ikea.GDVerificationStatement",
                                        									"Value": selectedChoice
                                        								}
                                        							]
                                        						}
                                        					};
                                        
                                        				} else {
                                        					let reportingObjFolderId = Things["IK.CVM.Configuration"].subsupplierReportingObjFolderID;
                                        					json = {
                                        						"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        						"Name": "Verification Result " + task.supply_object_id + " " + task.id_rvs + " " + task.id_rvs_verified,
                                        						"Context@odata.bind": "Containers('" + libraryId + "')",
                                        						"Folder@odata.bind": "Folders('" + reportingObjFolderId + "')",
                                        						"View": "Design",
                                        						"SupplyObjectID": task.supply_object_id,
                                                                "ComponentID":"0",
                                        						"SupplierDetails": project_number,
                                                                "BUCodeOwner": bu_code_owner,
                                                                "BUType": bu_type,
                                        						"VerificationComment": comment,
                                        						"RequirementID": task.id_rvs,
                                        						"VerificationMethodID": task.id_rvs_verified,
                                        						"VerificationStatus": "Verified",
                                        						"ReportingObjectClassification": {
                                        							"ClfNodeInternalName": "GDReportingObjectSelfDeclaration",
                                        							"ClassificationAttributes": [{
                                        									"InternalName": "com.ikea.GDVerificationStatement",
                                        									"Value": selectedChoice
                                        								}	
                                        							]
                                        						}
                                        					};
                                        				}
                                        
                                        
                                        				let odataResult = Things[odataconnectorthing].createPart({
                                        					Part: json
                                        				});
                                        				if (odataResult && (!task.parent_supplier)) {
                                        					reportingObjCount++;
                                        					logger.info(FN + "Reporting Object created successfully.");
                                        				}
                                        				if (task.parent_supplier && task.id_verification_result && odataResult) {
                                        					let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        					let update = Things[dbConnector].updateVerificationResult({
                                        						id_verification_result: task.id_verification_result,
                                        						is_verified: is_verified,
                                        						has_feedback: 1
                                        					});
                                        					if (update) {
                                        						reportingObjCount++;
                                        						logger.info(FN + "Updating is_verified in DB is completed.");
                                        					}
                                        				}
                                        			}
                                        		}
                                        		result = validTasks.getRowCount() == reportingObjCount ? true : false;
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateCertificateFileDetailsCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateCertificateFileDetailsCustomWidget -> ";
                                        try {	
                                        		result = {
                                        			certificate_id:certificate_id,
                                        			certificate_valid_from :certificate_valid_from,
                                        			certificate_valid_to : certificate_valid_to,
                                        			certificate_file_name: file_name,
                                                    certificate_comments:comments,
                                        			certificate_file_path :full_path,
                                                    unique_id:unique_id
                                        };
                                           
                                        	logger.debug("result -- "+ unique_id +" "+JSON.stringify(result));
                                        	logger.info(FN + "service executed");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateCertificateReportingObjectCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateCertificateReportingObjectCustomWidget -> ";
                                        let validTasks = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        let start = new Date().getTime();
                                        try {
                                        	result = true;
                                        	let selectedIds = [];
                                        	for (let i = 0; i < selectedIDs.getRowCount(); i++) {
                                        		selectedIds.push(selectedIDs.rows[i].item);
                                        	}
                                        	if (!selectedIds || selectedIds.length == 0) {
                                        		result = false;
                                        	}
                                        	logger.debug("selected ids -- " + result);
                                        	let classificationAttributes = [];
                                        	const SEP = "|";
                                        
                                        	if (result) {
                                        		for (let i = 0; i < tasks.getRowCount(); i++) {
                                        			let rowData = tasks.rows[i];
                                        			if (selectedIds.indexOf(rowData.unique_id) != -1) {
                                        				if (!(rowData.certificate_issuer && rowData.certificate_name && rowData.certificate_type && rowData.certificate_id && rowData.certificate_valid_from && rowData.certificate_valid_to && rowData.certificate_comments && rowData.certificate_file_name)) {
                                        					result = false;
                                        					break;
                                        				}
                                        				validTasks.AddRow(rowData);
                                        			}
                                        		}
                                        	}
                                        
                                        	if (result) {
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let swaggerConnector = Things["IK.CVM.Configuration"].getWNCSwaggerConnector();
                                        		let subfolderjson;
                                        		let docSubFolderId;
                                        		let libraryId = Things["IK.CVM.Configuration"].getSupplyPartsLibraryID();
                                        		let folderjson = Things[swaggerConnector].Get_Folders({
                                        			id: libraryId
                                        		});
                                        
                                        		let folderId;
                                        		if (folderjson !== undefined && folderjson.items !== undefined) {
                                        			let items = folderjson.items;
                                        			for (let i = 0; i < items.length; i++) {
                                        				let item = items[i];
                                        				if (item.attributes.name == project_name) {
                                        					folderId = item.id;
                                        				}
                                        			}
                                        		}
                                        		subfolderjson = Things[swaggerConnector].Get_SubFolders({
                                        			id: folderId
                                        		});
                                        		let subfolderId;
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let subfolderitems = subfolderjson.items;
                                        			for (let j = 0; j < subfolderitems.length; j++) {
                                        				let subfolderitem = subfolderitems[j];
                                        				if (subfolderitem.attributes.name == "Reporting Objects") {
                                        					subfolderId = subfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let docSubfolderitems = subfolderjson.items;
                                        			for (let k = 0; k < docSubfolderitems.length; k++) {
                                        				let docSubfolderitem = docSubfolderitems[k];
                                        				if (docSubfolderitem.attributes.name == "Documents") {
                                        					docSubFolderId = docSubfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        
                                        		for (let i = 0; i < validTasks.getRowCount(); i++) {
                                        			let row = validTasks.rows[i];
                                        			logger.debug("row -- " + row.unique_id);
                                        			let certificateIssuer = row.certificate_issuer && row.certificate_issuer.length > 0 ? row.certificate_issuer : "";
                                        			let certificateName = row.certificate_name && row.certificate_name.length > 0 ? row.certificate_name : "";
                                        			let certificateType = row.certificate_type && row.certificate_type.length > 0 ? row.certificate_type : "";
                                        
                                        			let json = {
                                        				"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        				"Name": "Verification Result " + row.supply_object_id + " " + row.id_rvs + " " + row.id_rvs_verified,
                                        				"Context@odata.bind": "Containers('" + libraryId + "')",
                                        				"Folder@odata.bind": "Folders('" + subfolderId + "')",
                                        				"View": "Design",
                                        				"SupplyObjectID": row.supply_object_id,
                                                        "ComponentID":"0",
                                        				"SupplierDetails": project_number,
                                        				"BUCodeOwner": bu_code_owner,
                                        				"BUType": bu_type,
                                        				"RequirementID": row.id_rvs,
                                        				"VerificationMethodID": row.id_rvs_verified,
                                        				"VerificationStatus": "Verified",
                                        				"ReportingObjectClassification": {
                                        					"ClfNodeInternalName": "GDReportingObjectCertificate",
                                        					"ClassificationAttributes": [{
                                        						"InternalName": "com.ikea.GDCertificateIssuer",
                                        						"Value": certificateIssuer
                                        					},{
                                        						"InternalName": "com.ikea.GDCertificateName",
                                        						"Value": certificateName
                                        					},{
                                        						"InternalName": "com.ikea.GDCertificateType",
                                        						"Value": certificateType
                                        					}]
                                        				}
                                        			};
                                        			let odataResult = Things[odataconnectorthing].createPart({
                                        				Part: json
                                        			});
                                        			let checkoutJson = Things[odataconnectorthing].checkoutPart({
                                        				ID: odataResult.ID
                                        			});
                                        			let checkoutId = checkoutJson.ID;
                                        			let documentJson = {
                                        				"Context@odata.bind": "Containers('" + libraryId + "')",
                                        				"Folder@odata.bind": "Folders('" + docSubFolderId + "')",
                                        				"@odata.type": "#PTC.DocMgmt.CVMSupplierCertificate",
                                                        "Name": row.certificate_file_name,
                                        				"CertificateID": row.certificate_id,
                                        				"ValidFrom": dateFormatISO(row.certificate_valid_from),
                                        				"ValidTill": dateFormatISO(row.certificate_valid_to),
                                                        "CertificateComments":row.certificate_comments
                                        			};
                                        			
                                        			let uploadDocResult = Things[odataconnectorthing].createDocument({
                                        				Document: documentJson
                                        			});
                                        			let uploadResult = me.uploadPrimaryContent({
                                        				FilePath: row.certificate_file_path /* STRING */ ,
                                        				ID: uploadDocResult.ID /* STRING */
                                        			});
                                        			let describedByJson = Things[odataconnectorthing].createDescribedByLink({
                                        				PartId: checkoutId,
                                        				DescribedBy: {
                                        					"DescribedBy@odata.bind": "Documents('" + uploadDocResult.ID + "')"
                                        				}
                                        			});
                                        			let checkInResult = Things[odataconnectorthing].checkInPart({
                                        				ID: checkoutId
                                        			});
                                        		}
                                        		result = true;
                                        	} else {
                                        		result = false;
                                        	}
                                        
                                        //	logger.debug("Selected IDs = " + selectedIds.toString());
                                        //	let task = tasks.rows[0];
                                        //	logger.debug("Task = " + task.certificate_issuer + " " + task.certificate_name + " " + task.certificate_type + " " + task.certifier);
                                        	logger.info(FN + "service executed");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        let end = new Date().getTime();
                                        logger.debug(FN + "Total time : " + (end - start));
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updatePlantReportReportingObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updatePlantReportReportingObject -> ";
                                        
                                        try {
                                        	result = false;
                                        	if (reporting_object_oid) {
                                        		reporting_object_oid = reporting_object_oid.includes("#_#") ? reporting_object_oid.split("#_#")[0] : reporting_object_oid;
                                        	}
                                        	let libraryId = Things["IK.CVM.Configuration"].getSupplyPartsLibraryID();
                                        	let is_verified = false;
                                        
                                        	let classificationAttributes = [{
                                        		"InternalName": "com.ikea.GDRecyclePercentage",
                                        		"Value": recycle_percentage ? recycle_percentage : " "
                                        	}, {
                                        		"InternalName": "com.ikea.GDRequestor",
                                        		"Value": requestor
                                        	}, {
                                        		"InternalName": "com.ikea.GDDeclarant",
                                        		"Value": declarant
                                        	}];
                                        
                                        	if (valid_from) {
                                        		classificationAttributes.push({
                                        			"InternalName": "com.ikea.GDValidFrom",
                                        			"Value": dateFormatISO(valid_from)
                                        		});
                                        	}
                                        	if (valid_to) {
                                        		classificationAttributes.push({
                                        			"InternalName": "com.ikea.GDValidTill",
                                        			"Value": dateFormatISO(valid_to)
                                        		});
                                        	}
                                        	const SEP = "|";
                                        	if (plantReportData && plantReportData.getRowCount() > 0) {
                                        		for (let p = 0; p < plantReportData.getRowCount(); p++) {
                                        			let plantReport = plantReportData.rows[p];
                                        			let commonName = plantReport.commonName && plantReport.commonName.length > 0 ? plantReport.commonName : "";
                                        			let genus = plantReport.genus && plantReport.genus.length > 0 ? plantReport.genus : "";
                                        			let species = plantReport.species && plantReport.species.length > 0 ? plantReport.species : "";
                                        			let country = plantReport.country && plantReport.country.length > 0 ? plantReport.country : "";
                                        			let region = plantReport.region && plantReport.region.length > 0 ? plantReport.region : "";
                                        			let subRegion = plantReport.subRegion && plantReport.subRegion.length > 0 ? plantReport.subRegion : "";
                                        			let risk = plantReport.risk && plantReport.risk.length > 0 ? plantReport.risk : "";
                                        			let complianceStatus = plantReport.complianceStatus && plantReport.complianceStatus.length > 0 ? plantReport.complianceStatus : "";
                                        			is_verified = true;
                                        			let plantReportValue = commonName + SEP + genus + SEP + species + SEP + country + SEP + region + SEP + subRegion + SEP + risk + SEP + complianceStatus;
                                        			classificationAttributes.push({
                                        				"InternalName": "com.ikea.GDPlantReportAttributes",
                                        				"DisplayName": "Plant Based Report",
                                        				"Value": plantReportValue,
                                        				"DisplayValue": plantReportValue
                                        			});
                                        		}
                                        	}
                                        	let json;
                                        	if (!id_delegator) {
                                        		// result: THINGNAME
                                        		let swaggerConnector = Things["IK.CVM.Configuration"].getWNCSwaggerConnector();
                                        		let folderjson = Things[swaggerConnector].Get_Folders({
                                        			id: libraryId
                                        		});
                                        
                                        		let folderId;
                                        		if (folderjson !== undefined && folderjson.items !== undefined) {
                                        			let items = folderjson.items;
                                        			for (let i = 0; i < items.length; i++) {
                                        				let item = items[i];
                                        				if (item.attributes.name == project_name) {
                                        					folderId = item.id;
                                        				}
                                        			}
                                        		}
                                        		let subfolderjson = Things[swaggerConnector].Get_SubFolders({
                                        			id: folderId
                                        		});
                                        		let subfolderId;
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let subfolderitems = subfolderjson.items;
                                        			for (let j = 0; j < subfolderitems.length; j++) {
                                        				let subfolderitem = subfolderitems[j];
                                        				if (subfolderitem.attributes.name == "Reporting Objects") {
                                        					subfolderId = subfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        
                                        		json = {
                                        			"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        			"Name": "Verification Result " + supply_object_id + " " + id_rvs + " " + id_rvs_verified,
                                        			"Context@odata.bind": "Containers('" + libraryId + "')",
                                        			"Folder@odata.bind": "Folders('" + subfolderId + "')",
                                        			"View": "Design",
                                        			"SupplyObjectID": supply_object_id,
                                                    "ComponentID":"0",
                                        			"SupplierDetails": project_number,
                                        			"BUCodeOwner": bu_code_owner,
                                        			"BUType": bu_type,
                                        			"VerificationComment": comment,
                                        			"RequirementID": id_rvs,
                                        			"VerificationMethodID": id_rvs_verified,
                                        			"VerificationStatus": verification_status,
                                        			"ReportingObjectClassification": {
                                        				"ClfNodeInternalName": "GDReportingObjectPlantDeclaration",
                                        				"ClfNodeDisplayName": "Plant Declaration",
                                        				"ClfNodeHierarchyDisplayName": "Classification > Reporting Object Classification > Plant Declaration",
                                        				"ClassificationAttributes": classificationAttributes
                                        			}
                                        		};
                                        	} else {
                                        		let reportingObjFolderId = Things["IK.CVM.Configuration"].subsupplierReportingObjFolderID;
                                        		json = {
                                        			"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        			"Name": "Verification Result " + supply_object_id + " " + id_part + " " + id_rvs + " " + id_rvs_verified,
                                        			"Context@odata.bind": "Containers('" + libraryId + "')",
                                        			"Folder@odata.bind": "Folders('" + reportingObjFolderId + "')",
                                        			"View": "Design",
                                        			"SupplyObjectID": supply_object_id,
                                                    "ComponentID":"0",
                                        			"SupplierDetails": project_number,
                                        			"BUCodeOwner": bu_code_owner,
                                        			"BUType": bu_type,
                                        			"VerificationComment": comment,
                                        			"RequirementID": id_rvs,
                                        			"VerificationMethodID": id_rvs_verified,
                                        			"VerificationStatus": verification_status,
                                        			"ReportingObjectClassification": {
                                        				"ClfNodeInternalName": "GDReportingObjectPlantDeclaration",
                                        				"ClfNodeDisplayName": "Plant Declaration",
                                        				"ClfNodeHierarchyDisplayName": "Classification > Reporting Object Classification > Plant Declaration",
                                        				"ClassificationAttributes": classificationAttributes
                                        			}
                                        		};
                                        	}
                                        	let odataconnectorthing;
                                        	let groupInfo = Resources["CurrentSessionInfo"].GetCurrentUserGroups();
                                        	if (groupInfo.Find({
                                        			name: "Supplier Users"
                                        		})) {
                                        		odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	} else if (groupInfo.Find({
                                        			name: "Sub Supplier Users"
                                        		})) {
                                        		odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnectorForSubSupplierUsers();
                                        	}
                                        	let odataResult;
                                        	if (!reporting_object_oid) {
                                        		odataResult = Things[odataconnectorthing].createPart({
                                        			Part: json
                                        		});
                                        	} else if (reporting_object_oid) {
                                        		json = {
                                        			"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        			"VerificationComment": comment,
                                        			"VerificationStatus": verification_status,
                                        			"ReportingObjectClassification": {
                                        				"ClfNodeInternalName": "GDReportingObjectPlantDeclaration",
                                        				"ClfNodeDisplayName": "Plant Declaration",
                                        				"ClfNodeHierarchyDisplayName": "Classification > Reporting Object Classification > Plant Declaration",
                                        				"ClassificationAttributes": classificationAttributes
                                        			}
                                        		};
                                        		let checkoutJson = Things[odataconnectorthing].checkoutPart({
                                        			ID: reporting_object_oid
                                        		});
                                        		let checkoutId = checkoutJson.ID;
                                        		let updatetJson = Things[odataconnectorthing].updatePart({
                                        			Part: json,
                                        			ID: checkoutId
                                        		});
                                        		odataResult = Things[odataconnectorthing].checkInPart({
                                        			ID: checkoutId
                                        		});
                                        	}
                                        
                                        	if (odataResult && (!id_delegator) && (!id_verification_result)) {
                                        		result = odataResult.ID + "#_#" + verification_status;
                                        		logger.info(FN + "Reporting object created.");
                                        	}
                                        	if (id_delegator && id_verification_result && odataResult) {
                                        		let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		let update = Things[dbConnector].updateVerificationResult({
                                        			id_verification_result: id_verification_result,
                                        			is_verified: is_verified,
                                        			has_feedback: 1
                                        		});
                                        		if (update) {
                                        			result = true;
                                        			logger.info(FN + "Updating is_verified in DB is completed.");
                                        		}
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateTestReportReportingObjectCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateTestReportReportingObjectCustomWidget -> ";
                                        let validTasks = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        let start = new Date().getTime();
                                        try {
                                        
                                        	result = true;
                                        	let selectedIds = [];
                                        	for (let i = 0; i < selectedIDs.getRowCount(); i++) {
                                        		selectedIds.push(selectedIDs.rows[i].item);
                                        	}
                                        
                                        	if (!selectedIds || selectedIds.length == 0) {
                                        		result = false;
                                        	}
                                        	logger.debug("selected ids -- "+result);
                                        	if (result) {
                                        		for (let i = 0; i < tasks.getRowCount(); i++) {
                                        			let rowData = tasks.rows[i];
                                        			if (selectedIds.indexOf(rowData.unique_id) != -1) {
                                        				if (!(rowData.test_labs && rowData.batch_number && rowData.sample_description && rowData.measuring_unit && rowData.result && rowData.test_report_file_name)) {
                                        					result = false;
                                        					break;
                                        				}
                                        				validTasks.AddRow(rowData);
                                        			}
                                        		}
                                        		if (subRows && subRows.getRowCount() > 0) {
                                        			for (let i = 0; i < subRows.getRowCount(); i++) {
                                        				let rowData = subRows.rows[i];
                                        				if (selectedIds.indexOf(rowData.parent_id) != -1) {
                                        					if (!(rowData.batch_number && rowData.sample_description && rowData.measuring_unit && rowData.result)) {
                                        						result = false;
                                        						break;
                                        					}
                                        				}
                                        			}
                                        		}
                                        	}
                                        
                                        	if (result) {
                                        		const SEP = "|";
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let swaggerConnector = Things["IK.CVM.Configuration"].getWNCSwaggerConnector();
                                        		let subfolderjson;
                                        		let docSubFolderId;
                                        		let libraryId = Things["IK.CVM.Configuration"].getSupplyPartsLibraryID();
                                        		let folderjson = Things[swaggerConnector].Get_Folders({
                                        			id: libraryId
                                        		});
                                        
                                        		let folderId;
                                        		if (folderjson !== undefined && folderjson.items !== undefined) {
                                        			let items = folderjson.items;
                                        			for (let i = 0; i < items.length; i++) {
                                        				let item = items[i];
                                        				if (item.attributes.name == project_name) {
                                        					folderId = item.id;
                                        				}
                                        			}
                                        		}
                                        		subfolderjson = Things[swaggerConnector].Get_SubFolders({
                                        			id: folderId
                                        		});
                                        		let subfolderId;
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let subfolderitems = subfolderjson.items;
                                        			for (let j = 0; j < subfolderitems.length; j++) {
                                        				let subfolderitem = subfolderitems[j];
                                        				if (subfolderitem.attributes.name == "Reporting Objects") {
                                        					subfolderId = subfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let docSubfolderitems = subfolderjson.items;
                                        			for (let k = 0; k < docSubfolderitems.length; k++) {
                                        				let docSubfolderitem = docSubfolderitems[k];
                                        				if (docSubfolderitem.attributes.name == "Documents") {
                                        					docSubFolderId = docSubfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        		logger.debug("docSubFolderId -- " + docSubFolderId);
                                        
                                        		for (let i = 0; i < validTasks.getRowCount(); i++) {
                                        			let row = validTasks.rows[i];
                                        			logger.debug("row -- " + row.unique_id);
                                        			let testLabs = row.test_labs && row.test_labs.length > 0 ? row.test_labs : "";
                                        			let batchNumber = row.batch_number && row.batch_number.length > 0 ? row.batch_number : "";
                                        			let sampleDescription = row.sample_description && row.sample_description.length > 0 ? row.sample_description : "";
                                        			let unit = row.measuring_unit && row.measuring_unit.length > 0 ? row.measuring_unit : "";
                                        			let testReportResult = row.result && row.result.length > 0 ? row.result : "";
                                        			let testReportValue = testLabs + SEP + batchNumber + SEP + sampleDescription + SEP + unit + SEP + testReportResult;
                                        			let classificationAttributes = [{
                                        				"InternalName": "com.ikea.GDTestReportValue",
                                        				"Value": testReportValue
                                        			}];
                                        
                                        			if (subRows) {
                                        				let params = {
                                        					t: subRows /* INFOTABLE */ ,
                                        					query: {
                                        						"filters": {
                                        							"type": "EQ",
                                        							"fieldName": "parent_id",
                                        							"value": row.unique_id
                                        						}
                                        					}
                                        					/* QUERY */
                                        				};
                                        
                                        				// result: INFOTABLE
                                        				let subrows = Resources["InfoTableFunctions"].Query(params);
                                        
                                        
                                        				if (subrows) {
                                        					for (let j = 0; j < subrows.getRowCount(); j++) {
                                        						let subRow = subrows.rows[j];
                                        						let batchNumber = subRow.batch_number && subRow.batch_number.length > 0 ? subRow.batch_number : "";
                                        						let sampleDescription = subRow.sample_description && subRow.sample_description.length > 0 ? subRow.sample_description : "";
                                        						let unit = subRow.measuring_unit && subRow.measuring_unit.length > 0 ? subRow.measuring_unit : "";
                                        						let testReportResult = subRow.result && subRow.result.length > 0 ? subRow.result : "";
                                        						let testReportValue = testLabs + SEP + batchNumber + SEP + sampleDescription + SEP + unit + SEP + testReportResult;
                                        						classificationAttributes.push({
                                        							"InternalName": "com.ikea.GDTestReportValue",
                                        							"Value": testReportValue
                                        						});
                                        					}
                                        				}
                                        			}
                                        			let json = {
                                        				"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        				"Name": "Verification Result " + row.supply_object_id + " " + row.id_rvs + " " + row.id_rvs_verified,
                                        				"Context@odata.bind": "Containers('" + libraryId + "')",
                                        				"Folder@odata.bind": "Folders('" + subfolderId + "')",
                                        				"View": "Design",
                                        				"SupplyObjectID": row.supply_object_id,
                                                        "ComponentID":"0",
                                        				"SupplierDetails": project_number,
                                        				"BUCodeOwner": bu_code_owner,
                                        				"BUType": bu_type,
                                        				"RequirementID": row.id_rvs,
                                        				"VerificationMethodID": row.id_rvs_verified,
                                        				"VerificationStatus": "Verified",
                                        				"ReportingObjectClassification": {
                                        					"ClfNodeInternalName": "GDReportingObjectTestReport",
                                        					"ClassificationAttributes": classificationAttributes
                                        				}
                                        			};
                                        			let odataResult = Things[odataconnectorthing].createPart({
                                        				Part: json
                                        			});
                                        			let checkoutJson = Things[odataconnectorthing].checkoutPart({
                                        				ID: odataResult.ID
                                        			});
                                        			let checkoutId = checkoutJson.ID;
                                        			let documentJson = {
                                        				"Context@odata.bind": "Containers('" + libraryId + "')",
                                        				"Folder@odata.bind": "Folders('" + docSubFolderId + "')",
                                        				"@odata.type": "#PTC.DocMgmt.SupplierSupportedDocument",
                                        				"Name": row.test_report_file_name,
                                        				"TestReportID": row.test_report_id,
                                        				"ValidityPeriod": row.test_report_validity_period
                                        			};
                                        			if (row.test_report_issue_date) {
                                        				documentJson["IssueDate"] = dateFormatISO(row.test_report_issue_date);
                                        			}
                                        			let uploadDocResult = Things[odataconnectorthing].createDocument({
                                        				Document: documentJson
                                        			});
                                        			let uploadResult = me.uploadPrimaryContent({
                                        				FilePath: row.test_report_file_path /* STRING */ ,
                                        				ID: uploadDocResult.ID /* STRING */
                                        			});
                                        			let describedByJson = Things[odataconnectorthing].createDescribedByLink({
                                        				PartId: checkoutId,
                                        				DescribedBy: {
                                        					"DescribedBy@odata.bind": "Documents('" + uploadDocResult.ID + "')"
                                        				}
                                        			});
                                        			let checkInResult = Things[odataconnectorthing].checkInPart({
                                        				ID: checkoutId
                                        			});
                                        		}
                                        		result = true;
                                        	} else {
                                        		result = false;
                                        	}
                                        	logger.info(FN + "service executed");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        
                                        let end = new Date().getTime();
                                        logger.debug(FN + "Total time : " + (end - start));
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateTestReportTaskFileDetailsCustomWidget">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateTestReportTaskFileDetailsCustomWidget -> ";
                                        
                                        try {	
                                        		result = {
                                        			test_report_id:test_report_id,
                                        			test_report_issue_date :issue_date,
                                        			test_report_validity_period : validity_period,
                                        			test_report_file_name: file_name,
                                        			test_report_file_path :full_path
                                        //			grouping_section_id : (row.grouping_section_id == "1") ? row.grouping_section_id : row.grouping_section_id + file_name            
                                        };
                                            if(grouping_section_id &&grouping_section_id.length >0 ){
                                                result.grouping_section_id =  grouping_section_id ;
                                            }else if(unique_id && unique_id.length>0){
                                                result.unique_id = unique_id;
                                            }
                                        	logger.debug("result -- "+ unique_id +"  "+ grouping_section_id +"  "+JSON.stringify(result));
                                        	logger.info(FN + "service executed");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="updateWeightOrVolumeReportingObject">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " updateWeightOrVolumeReportingObject -> ";
                                        let validRows = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	result = true;
                                        
                                        	for (let i = 0; i < tasks.getRowCount(); i++) {
                                        		let row = tasks.rows[i];
                                        		let unique_id = row.unique_id;
                                        		let isSelected = row.isSelected;
                                        		let taskRow;
                                        		let task;
                                        		if (editedTable && editedTable.getRowCount() > 0) {
                                        			taskRow = editedTable.Find({
                                        				unique_id: unique_id
                                        			});
                                        		}
                                        		if (!taskRow) {
                                        			task = row;
                                        		} else {
                                        			if (taskRow.isSelected) {
                                        				task = row;
                                        			}
                                        		}
                                        		if (task) {
                                        			if (valueJson && valueJson[unique_id]) {
                                        				validRows.AddRow({
                                        					unique_id: unique_id,
                                        					weight_or_volume: valueJson[unique_id],
                                        					supply_object_id: task.supply_object_id,
                                        					id_part: task.id_part,
                                        					id_rvs: task.id_rvs,
                                        					id_rvs_verified: task.id_rvs_verified,
                                        					parent_supplier: task.parent_supplier,
                                        					id_verification_result: task.id_verification_result
                                        				});
                                        			} else {
                                        				result = false;
                                        				break;
                                        			}
                                        		}
                                        	}
                                        	if (!validRows || validRows.getRowCount() == 0) {
                                        		result = false;
                                        	}
                                            logger.debug("validRows -- "+validRows.getRowCount());
                                        	if (result) {
                                        		let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        		let swaggerConnector = Things["IK.CVM.Configuration"].getWNCSwaggerConnector();
                                        		let subfolderjson;
                                        		let docSubFolderId;
                                        		let libraryId = Things["IK.CVM.Configuration"].getSupplyPartsLibraryID();
                                        		let folderjson = Things[swaggerConnector].Get_Folders({
                                        			id: libraryId
                                        		});
                                        
                                        		let folderId;
                                        		if (folderjson !== undefined && folderjson.items !== undefined) {
                                        			let items = folderjson.items;
                                        			for (let i = 0; i < items.length; i++) {
                                        				let item = items[i];
                                        				if (item.attributes.name == project_name) {
                                        					folderId = item.id;
                                        				}
                                        			}
                                        		}
                                        		subfolderjson = Things[swaggerConnector].Get_SubFolders({
                                        			id: folderId
                                        		});
                                        		let subfolderId;
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let subfolderitems = subfolderjson.items;
                                        			for (let j = 0; j < subfolderitems.length; j++) {
                                        				let subfolderitem = subfolderitems[j];
                                        				if (subfolderitem.attributes.name == "Reporting Objects") {
                                        					subfolderId = subfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        		if (subfolderjson !== undefined && subfolderjson.items !== undefined) {
                                        			let docSubfolderitems = subfolderjson.items;
                                        			for (let k = 0; k < docSubfolderitems.length; k++) {
                                        				let docSubfolderitem = docSubfolderitems[k];
                                        				if (docSubfolderitem.attributes.name == "Documents") {
                                        					docSubFolderId = docSubfolderitem.id;
                                        				}
                                        			}
                                        		}
                                        
                                        		for (let i = 0; i < validRows.getRowCount(); i++) {
                                        			let task = validRows.rows[i];
                                        			let json = {
                                        				"@odata.type": "#PTC.ProdMgmt.ReportingObject",
                                        				"Name": "Verification Result " + task.supply_object_id + " " + task.id_rvs + " " + task.id_rvs_verified,
                                        				"Context@odata.bind": "Containers('" + libraryId + "')",
                                        				"Folder@odata.bind": "Folders('" + subfolderId + "')",
                                        				"View": "Design",
                                        				"SupplyObjectID": task.supply_object_id,
                                        				"ComponentID": "0",
                                        				"SupplierDetails": project_number,
                                        				"BUCodeOwner": bu_code_owner,
                                        				"BUType": bu_type,
                                        				"RequirementID": task.id_rvs,
                                        				"VerificationMethodID": task.id_rvs_verified,
                                        				"VerificationStatus": "Verified",
                                        				"ReportingObjectClassification": {
                                        					"ClfNodeInternalName": "GDWeightOrVolume",
                                        					"ClassificationAttributes": [{
                                        						"InternalName": "com.ikea.GDWeightOrVolume",
                                        						"Value": task.weight_or_volume
                                        					}]
                                        				}
                                        			};
                                        			let odataResult = Things[odataconnectorthing].createPart({
                                        				Part: json
                                        			});
                                        		}
                                        	}
                                        
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="uploadPrimaryContent">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " uploadPrimaryContent -> ";
                                        let result;
                                        
                                        try {
                                        	// Content: BLOB
                                        	let blob = Things["CustomFileRepoistory"].LoadBinary({
                                        		path: FilePath /* STRING */
                                        	});
                                        
                                        	// result: INFOTABLE dataShape: "FileSystemFile"
                                        	let info = Things["CustomFileRepoistory"].GetFileInfo({
                                        		path: FilePath /* STRING */
                                        	});
                                        
                                        	let params = {
                                        		infoTableName: "InfoTable",
                                        		dataShapeName: "File"
                                        	};
                                        	// CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(File)
                                        	let fileInfo = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape(params);
                                        	// File entry object
                                        	let newEntry = new Object();
                                        	newEntry.data = blob; // BLOB
                                        	newEntry.name = info.rows[0].name; // STRING
                                        	fileInfo.AddRow(newEntry);
                                        
                                        	let odataconnectorthing = Things["IK.CVM.Configuration"].getOdataConnector();
                                        	let searchData = Things[odataconnectorthing].uploadPrimaryContent({
                                        		DocId: ID,
                                        		File: fileInfo
                                        	});
                                        
                                        	if (searchData) {
                                        		if (searchData.ID) {
                                        			logger.info(FN + "Successfully uploaded the data [" + FilePath + "].");
                                        		}
                                        		result = searchData;
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        	result = "Error";
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="validateBulkUploadPlantData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " validateBulkUploadPlantData -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PlantReportBulkUpload.DataShape"
                                        });
                                        let plantData = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.PlantReportData.DataShape"
                                        });
                                        let error_rows_details = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "GenericStringList"
                                        });
                                        
                                        try {
                                        	if (pathAndFileName && pathAndFileName.length > 0) {
                                        		let newEntry = new Object();
                                        		// result: INFOTABLE dataShape: "FileSystemFile"
                                        		let fileInfo = Things["CustomFileRepoistory"].GetFileInfo({
                                        			path: pathAndFileName /* STRING */
                                        		});
                                        		let file = fileInfo ? fileInfo.rows[0] : {};
                                        		newEntry.file_name = file.name;
                                        		newEntry.file_size = Math.round(file.size / 1024) + " KB";
                                        		let excelData = Things["IK.ExcelGeneration.Thing"].ConvertExcelToInfotable({
                                        			pathAndFileName: pathAndFileName /* STRING */ ,
                                        			repository: "CustomFileRepoistory" /* THINGNAME */
                                        		});
                                        		let dbConnector = Things["IK.CVM.Configuration"].getCVMDatabase();
                                        		for (let i = 0; i < excelData.getRowCount(); i++) {
                                        			let row = excelData.rows[i];
                                        			let plantDataRow = new Object();
                                        			let genus_name = row["Genus"];
                                        			let specie_name = row["Species"];
                                        			let common_name = row["Common name"];
                                        			let country_name = row["Country"];
                                        			let region_name = row["Region"];
                                        			let sub_region_name = row["Sub region"];
                                        
                                        			let genus = Things[dbConnector].checkGenus({
                                        				genus_name: genus_name
                                        			});
                                        			if (genus && genus.rows[0].TOTAL == 0) {
                                        				error_rows_details.AddRow({
                                        					item: "Line " + (i + 1) + " - Incorrect genus"
                                        				});
                                        				continue;
                                        			}
                                        			let specie = Things[dbConnector].checkSpecie({
                                        				specie_name: specie_name
                                        			});
                                        			if (specie && specie.rows[0].TOTAL == 0) {
                                        				error_rows_details.AddRow({
                                        					item: "Line " + (i + 1) + " - Incorrect species"
                                        				});
                                        				continue;
                                        			}
                                        			let commonName = Things[dbConnector].checkCommonName({
                                        				common_name: common_name
                                        			});
                                        			if (commonName && commonName.rows[0].TOTAL == 0) {
                                        				error_rows_details.AddRow({
                                        					item: "Line " + (i + 1) + " - Incorrect common name"
                                        				});
                                        				continue;
                                        			}
                                        			let genusSpecie = Things[dbConnector].checkGenusSpecieCombination({
                                        				genus_name: genus_name,
                                        				specie_name: specie_name
                                        			});
                                        			if (genusSpecie && genusSpecie.rows[0].TOTAL == 0) {
                                        				error_rows_details.AddRow({
                                        					item: "Line " + (i + 1) + " - Invalid genus and species combination"
                                        				});
                                        				continue;
                                        			}
                                        			let combination = Things[dbConnector].checkGenusSpecieCommonNameCombination({
                                        				genus_name: genus_name,
                                        				specie_name: specie_name,
                                        				common_name: common_name
                                        			});
                                        			if (combination && combination.rows[0].TOTAL == 0) {
                                        				error_rows_details.AddRow({
                                        					item: "Line " + (i + 1) + " - Invalid genus, species and common name combination"
                                        				});
                                        				continue;
                                        			}
                                        			let country_id;
                                        			let region_id;
                                        			let subregion_id;
                                        
                                        			let country = Things[dbConnector].checkCountry({
                                        				country_name: country_name
                                        			});
                                        			if (country && country.getRowCount() == 0) {
                                        				error_rows_details.AddRow({
                                        					item: "Line " + (i + 1) + " - Incorrect country"
                                        				});
                                        				continue;
                                        			} else {
                                        				country_id = country.rows[0].COUNTRY_ID;
                                        			}
                                        
                                        
                                        			if (region_name) {
                                        				let region = Things[dbConnector].checkRegion({
                                        					region_name: region_name
                                        				});
                                        				if (region && region.getRowCount() == 0) {
                                        					error_rows_details.AddRow({
                                        						item: "Line " + (i + 1) + " - Incorrect region"
                                        					});
                                        					continue;
                                        				}
                                        				region_id = region.rows[0].REGION_ID;
                                        
                                        
                                        				if (sub_region_name) {
                                        					let subRegion = Things[dbConnector].checkSubRegion({
                                        						sub_region_name: sub_region_name
                                        					});
                                        					if (subRegion && subRegion.getRowCount() == 0) {
                                        						error_rows_details.AddRow({
                                        							item: "Line " + (i + 1) + " - Incorrect sub region"
                                        						});
                                        						continue;
                                        					}
                                        					subregion_id = subRegion.rows[0].SUBREGION_ID;
                                        				}
                                        			} else {
                                        				if (sub_region_name) {
                                        					error_rows_details.AddRow({
                                        						item: "Line " + (i + 1) + " - Incorrect region"
                                        					});
                                        					continue;
                                        				}
                                        			}
                                        
                                        			if (country_name && region_name) {
                                        				let countryRegionCombination = Things[dbConnector].checkCountryRegionCombination({
                                        					country_name: country_name,
                                        					region_name: region_name
                                        				});
                                        				if (countryRegionCombination && countryRegionCombination.rows[0].TOTAL == 0) {
                                        					error_rows_details.AddRow({
                                        						item: "Line " + (i + 1) + " - Invalid country and region combination"
                                        					});
                                        					continue;
                                        				}
                                        			}
                                        
                                        			if (region_name && sub_region_name) {
                                        				let regionSubRegionCombination = Things[dbConnector].checkRegionSubRegionCombination({
                                        					region_name: region_name,
                                        					sub_region_name: sub_region_name
                                        				});
                                        				if (regionSubRegionCombination && regionSubRegionCombination.getRowCount() == 0) {
                                        					error_rows_details.AddRow({
                                        						item: "Line " + (i + 1) + " - Invalid region and sub region combination"
                                        					});
                                        					continue;
                                        				}
                                        			}
                                        			let illegalLogging;
                                        			if (country_id && !region_id && !subregion_id) {
                                        				illegalLogging = Things[dbConnector].getIllegalLoggingByCountry({
                                        					country_id: country_id
                                        				});
                                        			} else if (country_id && region_id && !subregion_id) {
                                        				illegalLogging = Things[dbConnector].getIllegalLoggingByCountryRegion({
                                        					country_id: country_id,
                                        					region_id: region_id
                                        				});
                                        			} else if (country_id && region_id && subregion_id) {
                                        				illegalLogging = Things[dbConnector].getIllegalLoggingByCountryRegionSubregion({
                                        					country_id: country_id,
                                        					region_id: region_id,
                                        					subregion_id: subregion_id
                                        				});
                                        			}
                                        			plantDataRow.genus = genus_name;
                                        			plantDataRow.species = specie_name;
                                        			plantDataRow.commonName = common_name;
                                        			plantDataRow.country = country_name;
                                        			plantDataRow.region = region_name;
                                        			plantDataRow.subRegion = sub_region_name;
                                        			plantDataRow.risk = illegalLogging.rows[0].ILLEGAL_LOGGING;
                                        			plantDataRow.complianceStatus = row["IWAY compliance"];
                                        			plantData.AddRow(plantDataRow);
                                        		}
                                        
                                        		newEntry.plant_data = plantData;
                                        		newEntry.error_rows_details = error_rows_details;
                                        		newEntry.valid_rows_count = plantData.getRowCount() + " valid rows fetched from uploaded data sheet.";
                                        		newEntry.error_rows_count = error_rows_details.getRowCount() + " rows not fetched due to incorrect data.";
                                        		result.AddRow(newEntry);
                                        		logger.info(FN + "service executed");
                                        	}
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="validateSelfDeclarationVerifyTasks">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        const FN = me.name + " validateSelfDeclarationVerifyTasks -> ";
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        let validRows = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                        	infoTableName: "InfoTable",
                                        	dataShapeName: "IK.VerificationAggregated.DataShape"
                                        });
                                        
                                        try {
                                        	let isValid = true;
                                        	let count = 0;
                                        	let tasksCount = tasks.getRowCount();
                                        	let editedTasksCount = (editedTable && editedTable.getRowCount() > 0) ? editedTable.getRowCount() : 0;
                                        	selectedRowCount = (selectedRowCount) ? selectedRowCount : 0;
                                        	let selectedTaskCount = (tasksCount - editedTasksCount) + selectedRowCount;
                                        
                                        	if (selectedTaskCount > 0) {
                                        		for (let i = 0; i < tasks.getRowCount(); i++) {
                                        			let row = tasks.rows[i];
                                        			let unique_id = row.unique_id;
                                        			let isSelected = row.isSelected;
                                        			let taskRow;
                                        			let task;
                                        			if (editedTable && editedTable.getRowCount() > 0) {
                                        				taskRow = editedTable.Find({
                                        					unique_id: unique_id
                                        				});
                                        			}
                                        			if (!taskRow) {
                                        				task = row;
                                        				count++;
                                        			} else {
                                        				if (taskRow.isSelected) {
                                        					task = row;
                                        					count++;
                                        				}
                                        			}
                                        
                                        			if (task && verification_statement) {
                                        				let statementRow = verification_statement.Find({
                                        					key: unique_id
                                        				});
                                        				if (statementRow && statementRow.value) {
                                        					validRows.AddRow({
                                        						unique_id: unique_id,
                                        						verification_statement_value: statementRow.value,
                                        						supply_object_id: task.supply_object_id,
                                        						id_part: task.id_part,
                                        						id_rvs: task.id_rvs,
                                        						id_rvs_verified: task.id_rvs_verified,
                                        						parent_supplier: task.parent_supplier,
                                        						id_verification_result: task.id_verification_result                       
                                        					});
                                        				} else {
                                        					isValid = false;
                                        					break;
                                        				}
                                        			} else if (!verification_statement) {
                                        				isValid = false;
                                        				break;
                                        			}
                                        		}
                                        	} else {
                                        		count = 0;
                                        	}
                                        
                                        	if (count == 0) {
                                        		isValid = false;
                                        	}
                                        	if (isValid) {
                                        		result = validRows;
                                        	}
                                        	logger.info(FN + "Verification done sucessfully ");
                                        } catch (err) {
                                        	logger.error(FN + "Line" + err.lineNumber + ": " + err);
                                        }
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
