<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <ThingShapes>
        <ThingShape
         className=""
         description=""
         documentationContent=""
         homeMashup=""
         name="CVM.DNB.ThingShape"
         projectName="IKEA.CVM"
         tags="">
            <PropertyDefinitions></PropertyDefinitions>
            <ServiceDefinitions>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="UTILS"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="CheckToken">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.defaultValue="false"
                         baseType="BOOLEAN"
                         description=""
                         name="forceRenew"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetApiBaseUrl">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetEncodedAuthorizationString">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="GetToken">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="IsTokenValid">
                    <ResultType
                     baseType="BOOLEAN"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="UTILS"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="ProcessResponse">
                    <ResultType
                     baseType="JSON"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         baseType="JSON"
                         description=""
                         name="response"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="API"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="RequestToken">
                    <ResultType
                     baseType="STRING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions></ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetApiBaseUrl">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="url"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetEncodedAuthorizationString">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="apiKey"
                         ordinal="1"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="apiSecret"
                         ordinal="2"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
                <ServiceDefinition
                 aspect.isAsync="false"
                 category="CONF"
                 description=""
                 isAllowOverride="false"
                 isLocalOnly="false"
                 isOpen="false"
                 isPrivate="false"
                 name="SetToken">
                    <ResultType
                     baseType="NOTHING"
                     description=""
                     name="result"
                     ordinal="0"></ResultType>
                    <ParameterDefinitions>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="DATETIME"
                         description=""
                         name="expirationDate"
                         ordinal="2"></FieldDefinition>
                        <FieldDefinition
                         aspect.isRequired="true"
                         baseType="STRING"
                         description=""
                         name="token"
                         ordinal="1"></FieldDefinition>
                    </ParameterDefinitions>
                </ServiceDefinition>
            </ServiceDefinitions>
            <EventDefinitions></EventDefinitions>
            <ServiceMappings></ServiceMappings>
            <ServiceImplementations>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="CheckToken">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let renew = forceRenew || !me.IsTokenValid();
                                    
                                    if(renew) {
                                        me.RequestToken();
                                    }
                                    
                                    let result = me.IsTokenValid();
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetApiBaseUrl">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = "";
                                    
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length != 0) {
                                        let newSettings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "CVM.DNB.DataShape"
                                        });
                                    
                                        result = connectionSettings.rows[0].apiBaseUrl;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetEncodedAuthorizationString">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = "";
                                    
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length != 0) {
                                        let newSettings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "CVM.DNB.DataShape"
                                        });
                                    
                                        result = connectionSettings.rows[0].encodedAuthorizationString;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="GetToken">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = "";
                                    
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length != 0) {
                                        let newSettings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "CVM.DNB.DataShape"
                                        });
                                    
                                        result = connectionSettings.rows[0].token;
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="IsTokenValid">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = false;
                                    
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length != 0) {
                                        let token = connectionSettings.rows[0].token;
                                        if(token) {
                                            let expirationDate = connectionSettings.rows[0].tokenExpirationDate;
                                            let now = Date.now();
                                            if(expirationDate.getTime() >= now) {
                                                result = true;
                                            }
                                        }
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="ProcessResponse">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let result = {"redo": false, "result": {}};
                                    
                                    const errorCodes = [
                                        {
                                            "code": "00040",
                                            "message": "Access token expired",
                                            "action": "Generate a new token once using the Authentication Service. If the same error occurs while generating a new token, please contact D&B Customer Support."
                                        },
                                        {
                                            "code": "00041",
                                            "message": "Invalid credentials",
                                            "action": "Generate a new token once using the Authentication Service. If the same error occurs while generating a new token, please contact D&B Customer Support."
                                        },
                                        {
                                            "code": "00004",
                                            "message": "You are not currently authorised to access this product. Please contact your D&B account representative",
                                            "action": "Generate a new token once using the Authentication Service. If the same error occurs while generating a new token, please contact D&B Customer Support."
                                        },
                                        {
                                            "code": "00005",
                                            "message": "This request was issued outside the contract start/end date",
                                            "action": "Contact D&B Customer Support"
                                        },
                                        {
                                            "code": "00012",
                                            "message": "Contract data not found",
                                            "action": "Contact D&B Customer Support"
                                        },
                                        {
                                            "code": "00014",
                                            "message": "There is an issue with the subscriber record. Please contact Dun & Bradstreet customer support.",
                                            "action": "Contact D&B Customer Support"
                                        },
                                        {
                                            "code": "00045",
                                            "message": "Too Many Requests",
                                            "action": "Subsequent requests are blocked when exceeding the set limit and time frame defined per customer contract. Please wait a moment and try again using the same token."
                                        },
                                        {
                                            "code": "00046",
                                            "message": "Too Many Requests",
                                            "action": "Subsequent requests are blocked when exceeding the set limit and time frame defined per customer contract. Please wait a moment and try again using the same token."
                                        },
                                        {
                                            "code": "00047",
                                            "message": "Too Many Requests",
                                            "action": "Subsequent requests are blocked when exceeding the set limit and time frame defined per customer contract. Please wait a moment and try again using the same token."
                                        },
                                        {
                                            "code": "400050",
                                            "message": "You have reached your allocated transaction quota.",
                                            "action": "Subsequent requests are blocked when exceeding the set limit and time frame defined per customer contract. Please wait a moment and try again using the same token."
                                        }
                                    ];
                                    
                                    if(!response.error) {
                                    	result.redo = false;
                                        result.result = response;
                                    }
                                    else {
                                        if(response.error.errorCode == "00040") {
                                            // token expired error
                                            result.redo = true;
                                            result.result = response;
                                        }
                                        else {
                                            // uncomment to throw error with error code and message from api response
                                    		throw new Error("Error " + response.error.errorCode + ". " + response.error.errorMessage);
                                        }
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="RequestToken">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let encodedAuthorizationString = me.GetEncodedAuthorizationString();
                                    
                                    let headers = {
                                        "Content-Type": "application/x-www-form-urlencoded",
                                        "Authorization": "Basic " + encodedAuthorizationString,
                                    };
                                    
                                    let content = "grant_type=client_credentials";
                                    
                                    let url = "https://plus.dnb.com/v3/token";
                                    
                                    let response = Resources["ContentLoaderFunctions"].PostText({
                                        headers: headers /* JSON */,
                                        ignoreSSLErrors: true /* BOOLEAN */,
                                        url: url /* STRING */,
                                        content: content /* JSON */
                                    });
                                    
                                    //the headers are appended at the end with a ^ character, split those off
                                    let split = response.split("^");
                                    //convert the string of the response to a JSON
                                    let tokenData = JSON.parse(split[0]);
                                    
                                    let expDate = new Date(Date.now() + tokenData.expires_in * 1000);
                                    logger.warn("expDate: " + expDate);
                                    
                                    me.SetToken({
                                        token: tokenData.access_token /* STRING [Required] */,
                                        expirationDate: expDate /* DATETIME [Required] */
                                    });
                                    
                                    let result = response;
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetApiBaseUrl">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length == 0) {
                                        let newSettings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "CVM.DNB.DataShape"
                                        });
                                    
                                        newSettings.AddRow({
                                            apiBaseUrl: url, // STRING
                                        });
                                    
                                        me.SetConfigurationTable({
                                            configurationTable: newSettings /* INFOTABLE */,
                                            tableName: "connectionSettings" /* STRING */
                                        });
                                    }
                                    else {
                                        let updatedSettings = Resources["InfoTableFunctions"].Clone({
                                            t1: connectionSettings /* INFOTABLE */
                                        });
                                    
                                        updatedSettings.rows[0].apiBaseUrl = url;
                                    
                                        me.SetConfigurationTable({
                                            configurationTable: updatedSettings /* INFOTABLE */,
                                            tableName: "connectionSettings" /* STRING */
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetEncodedAuthorizationString">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let twxEncodedAuth = base64EncodeString(apiKey+":"+apiSecret);
                                    twxEncodedAuth = twxEncodedAuth.replace(/\s/g, ''); // for some reason twx encode put white spaces ???
                                    
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length == 0) {
                                        let newSettings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "CVM.DNB.DataShape"
                                        });
                                    
                                        newSettings.AddRow({
                                            encodedAuthorizationString: twxEncodedAuth, // STRING
                                        });
                                    
                                        me.SetConfigurationTable({
                                            configurationTable: newSettings /* INFOTABLE */,
                                            tableName: "connectionSettings" /* STRING */
                                        });
                                    }
                                    else {
                                        let updatedSettings = Resources["InfoTableFunctions"].Clone({
                                            t1: connectionSettings /* INFOTABLE */
                                        });
                                    
                                        updatedSettings.rows[0].encodedAuthorizationString = twxEncodedAuth;
                                    
                                        me.SetConfigurationTable({
                                            configurationTable: updatedSettings /* INFOTABLE */,
                                            tableName: "connectionSettings" /* STRING */
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
                <ServiceImplementation
                 description=""
                 handlerName="Script"
                 name="SetToken">
                    <ConfigurationTables>
                        <ConfigurationTable
                         dataShapeName=""
                         description=""
                         isMultiRow="false"
                         name="Script"
                         ordinal="0">
                            <DataShape>
                                <FieldDefinitions>
                                    <FieldDefinition
                                     baseType="STRING"
                                     description="code"
                                     name="code"
                                     ordinal="0"></FieldDefinition>
                                </FieldDefinitions>
                            </DataShape>
                            <Rows>
                                <Row>
                                    <code>
                                    <![CDATA[
                                    let connectionSettings = me.GetConfigurationTable({
                                        tableName: "connectionSettings" /* STRING */
                                    });
                                    
                                    if(connectionSettings.rows.length == 0) {
                                        let newSettings = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "CVM.DNB.DataShape"
                                        });
                                    
                                        newSettings.AddRow({
                                            token: token, // STRING
                                            tokenExpirationDate: expirationDate
                                        });
                                    
                                        me.SetConfigurationTable({
                                            configurationTable: newSettings /* INFOTABLE */,
                                            tableName: "connectionSettings" /* STRING */
                                        });
                                    }
                                    else {
                                        let updatedSettings = Resources["InfoTableFunctions"].Clone({
                                            t1: connectionSettings /* INFOTABLE */
                                        });
                                    
                                        updatedSettings.rows[0].token = token; // STRING
                                        updatedSettings.rows[0].tokenExpirationDate = expirationDate;
                                    
                                        me.SetConfigurationTable({
                                            configurationTable: updatedSettings /* INFOTABLE */,
                                            tableName: "connectionSettings" /* STRING */
                                        });
                                    }
                                    ]]>
                                    </code>
                                </Row>
                            </Rows>
                        </ConfigurationTable>
                    </ConfigurationTables>
                </ServiceImplementation>
            </ServiceImplementations>
            <Subscriptions></Subscriptions>
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions>
                <ConfigurationTableDefinition
                 category=""
                 dataShapeName="CVM.DNB.DataShape"
                 description=""
                 isHidden="false"
                 isMultiRow="false"
                 name="connectionSettings"
                 ordinal="0"
                 source="IMPORT"></ConfigurationTableDefinition>
            </ConfigurationTableDefinitions>
            <ConfigurationTables>
                <ConfigurationTable
                 dataShapeName=""
                 description=""
                 isMultiRow="false"
                 name="connectionSettings"
                 ordinal="0">
                    <DataShape>
                        <FieldDefinitions>
                            <FieldDefinition
                             aspect.isPrimaryKey="true"
                             baseType="STRING"
                             description=""
                             name="apiBaseUrl"
                             ordinal="1"></FieldDefinition>
                            <FieldDefinition
                             aspect.isPrimaryKey="false"
                             baseType="STRING"
                             description=""
                             name="encodedAuthorizationString"
                             ordinal="2"></FieldDefinition>
                            <FieldDefinition
                             aspect.isPrimaryKey="false"
                             baseType="STRING"
                             description=""
                             name="token"
                             ordinal="3"></FieldDefinition>
                            <FieldDefinition
                             aspect.isPrimaryKey="false"
                             baseType="DATETIME"
                             description=""
                             name="tokenExpirationDate"
                             ordinal="4"></FieldDefinition>
                        </FieldDefinitions>
                    </DataShape>
                    <Rows>
                        <Row>
                            <apiBaseUrl></apiBaseUrl>
                            <encodedAuthorizationString></encodedAuthorizationString>
                            <token></token>
                            <tokenExpirationDate>2023-12-20T09:48:36.607Z</tokenExpirationDate>
                        </Row>
                    </Rows>
                </ConfigurationTable>
            </ConfigurationTables>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <InstanceRunTimePermissions></InstanceRunTimePermissions>
        </ThingShape>
    </ThingShapes>
</Entities>
