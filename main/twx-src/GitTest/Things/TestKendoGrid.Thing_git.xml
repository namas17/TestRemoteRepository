<?xml version="1.0" encoding="UTF-8"?>
<Entities
 universal="password">
    <Things>
        <Thing
         description=""
         documentationContent=""
         effectiveThingPackage="ConfiguredThing"
         enabled="true"
         homeMashup=""
         identifier=""
         inheritedValueStream=""
         name="TestKendoGrid.Thing_git"
         projectName="GitTest"
         published="false"
         tags=""
         thingTemplate="GenericThing"
         valueStream="">
            <avatar></avatar>
            <DesignTimePermissions>
                <Create></Create>
                <Read></Read>
                <Update></Update>
                <Delete></Delete>
                <Metadata></Metadata>
            </DesignTimePermissions>
            <RunTimePermissions></RunTimePermissions>
            <VisibilityPermissions>
                <Visibility></Visibility>
            </VisibilityPermissions>
            <ConfigurationTableDefinitions></ConfigurationTableDefinitions>
            <ConfigurationTables></ConfigurationTables>
            <ThingShape>
                <PropertyDefinitions></PropertyDefinitions>
                <ServiceDefinitions>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getConfiguration">
                        <ResultType
                         baseType="STRING"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                    <ServiceDefinition
                     aspect.isAsync="false"
                     category=""
                     description=""
                     isAllowOverride="false"
                     isLocalOnly="false"
                     isOpen="false"
                     isPrivate="false"
                     name="getData">
                        <ResultType
                         aspect.dataShape="IK.VerificationAggregated.DataShape_git"
                         baseType="INFOTABLE"
                         description=""
                         name="result"
                         ordinal="0"></ResultType>
                        <ParameterDefinitions></ParameterDefinitions>
                    </ServiceDefinition>
                </ServiceDefinitions>
                <EventDefinitions></EventDefinitions>
                <ServiceMappings></ServiceMappings>
                <ServiceImplementations>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getConfiguration">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        let colDefs = [{
                                        		"targets": 0, // {integer} the index of the column to which this data applies.
                                        		"fieldName": "is_verified", // {string} the data field name.
                                        		"title": "is_verified", // *{string} the column display name.
                                        		"autoWidth": false,
                                        		"width": "auto",
                                        		"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        		"headerTextAlignment": "center", // *{string} header text alignment. Options: 'left', 'right', 'center'.
                                        		"textAlignment": "center", // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                                        		"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        		"inLayout": true,
                                        		"columnFormatter": {
                                        			"type": "STRING",
                                        			"cellEditor": { // optional: defines cell-editing options for this column
                                        				"enabled": true // *{boolean} to indicate whether cell editing is enable for this column
                                        			}
                                        		}
                                        	},{
                                        		"targets": 1, // {integer} the index of the column to which this data applies.
                                        		"fieldName": "has_feedback", // {string} the data field name.
                                        		"title": "has_feedback", // *{string} the column display name.
                                        		"autoWidth": false,
                                        		"width": "auto",
                                        		"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        		"headerTextAlignment": "center", // *{string} header text alignment. Options: 'left', 'right', 'center'.
                                        		"textAlignment": "center", // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                                        		"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        		"inLayout": true,
                                        		"columnFormatter": {
                                        			"type": "STRING",
                                        			"cellEditor": { // optional: defines cell-editing options for this column
                                        				"enabled": true // *{boolean} to indicate whether cell editing is enable for this column
                                        			}
                                        		}
                                        	},{
                                        		"targets": 2, // {integer} the index of the column to which this data applies.
                                        		"fieldName": "unique_id", // {string} the data field name.
                                        		"title": "unique_id", // *{string} the column display name.
                                        		"autoWidth": false,
                                        		"width": "auto",
                                        		"overflow": "wrapped", // *{string} cell overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        		"headerTextAlignment": "center", // *{string} header text alignment. Options: 'left', 'right', 'center'.
                                        		"textAlignment": "center", // *{string} cell text alignment. Options: 'left', 'right', 'center'.
                                        		"hidden": false, // *{boolean} hide column. If context menu is enabled, end-user can unhide column. Data of this column will be available for state formatting.
                                        		"inLayout": true,
                                        		"columnFormatter": {
                                        			"type": "STRING",
                                        			"cellEditor": { // optional: defines cell-editing options for this column
                                        				"enabled": true // *{boolean} to indicate whether cell editing is enable for this column
                                        			}
                                        		}
                                        	}];
                                        
                                        
                                        result = {
                                        		"cellEditingEnabled": true, // {boolean} Optional. Specifies whether Cell editing is enabled by default for the grid, required for auto-save use-case. Disable for manual save; enable 'editButtons' in config below instead.
                                        		"columns": { // Required
                                        			"idFieldName": "unique_id", // {string} Required. The name of the 'id' column containing the primary key.
                                        			"header": { // Optional
                                        				"titleCase": "", // *{string} header title case setting. Options: 'lower', 'upper', 'camel'
                                        				"overflow": "wrapped" // *{string} header overflow setting. Options: 'fitted', 'wrapped', 'clipped', 'ellipsis'
                                        			},
                                        			"columnDefs": colDefs
                                        			
                                        		}
                                        		
                                        	};
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                    <ServiceImplementation
                     description=""
                     handlerName="Script"
                     name="getData">
                        <ConfigurationTables>
                            <ConfigurationTable
                             dataShapeName=""
                             description=""
                             isMultiRow="false"
                             name="Script"
                             ordinal="0">
                                <DataShape>
                                    <FieldDefinitions>
                                        <FieldDefinition
                                         baseType="STRING"
                                         description="code"
                                         name="code"
                                         ordinal="0"></FieldDefinition>
                                    </FieldDefinitions>
                                </DataShape>
                                <Rows>
                                    <Row>
                                        <code>
                                        <![CDATA[
                                        // CreateInfoTableFromDataShape(infoTableName:STRING("InfoTable"), dataShapeName:STRING):INFOTABLE(IK.VerificationAggregated.DataShape)
                                        let result = Resources["InfoTableFunctions"].CreateInfoTableFromDataShape({
                                            infoTableName: "InfoTable",
                                            dataShapeName: "IK.VerificationAggregated.DataShape_git"
                                        });
                                        
                                        result.AddRow({"unique_id":"1","is_verified":"true","has_feedback":"true"});
                                        result.AddRow({"unique_id":"2","is_verified":"true","has_feedback":"true"});
                                        result.AddRow({"unique_id":"3","is_verified":"true","has_feedback":"true"});
                                        
                                        result.AddRow({"unique_id":"4"});
                                        result.AddRow({"unique_id":"5"});
                                        result.AddRow({"unique_id":"6"});
                                        ]]>
                                        </code>
                                    </Row>
                                </Rows>
                            </ConfigurationTable>
                        </ConfigurationTables>
                    </ServiceImplementation>
                </ServiceImplementations>
                <Subscriptions></Subscriptions>
            </ThingShape>
            <PropertyBindings></PropertyBindings>
            <RemotePropertyBindings></RemotePropertyBindings>
            <RemoteServiceBindings></RemoteServiceBindings>
            <RemoteEventBindings></RemoteEventBindings>
            <AlertConfigurations></AlertConfigurations>
            <ImplementedShapes></ImplementedShapes>
            <ThingProperties></ThingProperties>
        </Thing>
    </Things>
</Entities>
